"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["79910"],{704149:function(n,r,t){t.r(r),t.d(r,{metadata:()=>e,contentTitle:()=>i,default:()=>u,assets:()=>a,toc:()=>d,frontMatter:()=>o});var e=JSON.parse('{"id":"\u6838\u5FC3\u7EC4\u4EF6/\u7C7B\u578B\u8F6C\u6362/\u7C7B\u578B\u8F6C\u6362-Converter\u7279\u6027","title":"\u7C7B\u578B\u8F6C\u6362-Converter\u7279\u6027","description":"\u4ECE\u6846\u67B6 v2.6.2 \u7248\u672C\u5F00\u59CB\uFF0C\u8F6C\u6362\u7EC4\u4EF6\u63D0\u4F9B\u4E86 Converter \u7279\u6027\uFF0C\u5141\u8BB8\u5F00\u53D1\u8005\u53EF\u4EE5\u81EA\u5B9A\u4E49 Converter\u8F6C\u6362\u65B9\u6CD5\u6307\u5B9A\u7279\u5B9A\u7C7B\u578B\u4E4B\u95F4\u7684\u8F6C\u6362\u903B\u8F91\u3002","source":"@site/versioned_docs/version-2.6.x/\u6838\u5FC3\u7EC4\u4EF6/\u7C7B\u578B\u8F6C\u6362/\u7C7B\u578B\u8F6C\u6362-Converter\u7279\u6027.md","sourceDirName":"\u6838\u5FC3\u7EC4\u4EF6/\u7C7B\u578B\u8F6C\u6362","slug":"/\u6838\u5FC3\u7EC4\u4EF6/\u7C7B\u578B\u8F6C\u6362/\u7C7B\u578B\u8F6C\u6362-Converter\u7279\u6027","permalink":"/2.6.x/\u6838\u5FC3\u7EC4\u4EF6/\u7C7B\u578B\u8F6C\u6362/\u7C7B\u578B\u8F6C\u6362-Converter\u7279\u6027","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/versioned_docs/version-2.6.x/\u6838\u5FC3\u7EC4\u4EF6/\u7C7B\u578B\u8F6C\u6362/\u7C7B\u578B\u8F6C\u6362-Converter\u7279\u6027.md","tags":[],"version":"2.6.x","lastUpdatedBy":"John","lastUpdatedAt":1730365530000,"sidebarPosition":5,"frontMatter":{"title":"\u7C7B\u578B\u8F6C\u6362-Converter\u7279\u6027","sidebar_position":5,"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"\u7C7B\u578B\u8F6C\u6362-Scan\u8F6C\u6362","permalink":"/2.6.x/\u6838\u5FC3\u7EC4\u4EF6/\u7C7B\u578B\u8F6C\u6362/\u7C7B\u578B\u8F6C\u6362-Scan\u8F6C\u6362"},"next":{"title":"\u7C7B\u578B\u8F6C\u6362-UnmarshalValue","permalink":"/2.6.x/\u6838\u5FC3\u7EC4\u4EF6/\u7C7B\u578B\u8F6C\u6362/\u7C7B\u578B\u8F6C\u6362-UnmarshalValue"}}'),c=t("785893"),s=t("250065");let o={title:"\u7C7B\u578B\u8F6C\u6362-Converter\u7279\u6027",sidebar_position:5,hide_title:!0},i=void 0,a={},d=[{value:"\u8F6C\u6362\u65B9\u6CD5\u5B9A\u4E49",id:"\u8F6C\u6362\u65B9\u6CD5\u5B9A\u4E49",level:2},{value:"\u7ED3\u6784\u4F53\u7C7B\u578B\u8F6C\u6362",id:"\u7ED3\u6784\u4F53\u7C7B\u578B\u8F6C\u6362",level:2},{value:"\u522B\u540D\u7C7B\u578B\u8F6C\u6362",id:"\u522B\u540D\u7C7B\u578B\u8F6C\u6362",level:2}];function l(n){let r={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...n.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(r.p,{children:["\u4ECE\u6846\u67B6 v2.6.2 \u7248\u672C\u5F00\u59CB\uFF0C\u8F6C\u6362\u7EC4\u4EF6\u63D0\u4F9B\u4E86 ",(0,c.jsx)(r.code,{children:"Converter"})," \u7279\u6027\uFF0C\u5141\u8BB8\u5F00\u53D1\u8005\u53EF\u4EE5\u81EA\u5B9A\u4E49 ",(0,c.jsx)(r.code,{children:"Converter"}),"\u8F6C\u6362\u65B9\u6CD5\u6307\u5B9A\u7279\u5B9A\u7C7B\u578B\u4E4B\u95F4\u7684\u8F6C\u6362\u903B\u8F91\u3002"]}),"\n",(0,c.jsx)(r.h2,{id:"\u8F6C\u6362\u65B9\u6CD5\u5B9A\u4E49",children:"\u8F6C\u6362\u65B9\u6CD5\u5B9A\u4E49"}),"\n",(0,c.jsx)(r.p,{children:"\u8F6C\u6362\u65B9\u6CD5\u5B9A\u4E49\u5982\u4E0B:"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-go",children:"func(T1) (T2, error)\n"})}),"\n",(0,c.jsxs)(r.p,{children:["\u5176\u4E2D ",(0,c.jsx)(r.code,{children:"T1"})," \u9700\u8981\u4E3A\u975E\u6307\u9488\u5BF9\u8C61\uFF0C ",(0,c.jsx)(r.code,{children:"T2"})," \u9700\u8981\u4E3A\u6307\u9488\u7C7B\u578B\uFF0C\u5982\u679C\u7C7B\u578B\u4E0D\u6B63\u786E\u8F6C\u6362\u65B9\u6CD5\u6CE8\u518C\u5C06\u4F1A\u62A5\u9519\u3002"]}),"\n",(0,c.jsxs)(r.p,{children:["\u8F93\u5165\u53C2\u6570( ",(0,c.jsx)(r.code,{children:"T1"}),")\u5FC5\u987B\u4E3A\u975E\u6307\u9488\u5BF9\u8C61\u7684\u8BBE\u8BA1\uFF0C\u76EE\u7684\u662F\u4E3A\u4E86\u4FDD\u8BC1\u8F93\u5165\u53C2\u6570\u7684\u5B89\u5168\uFF0C\u5C3D\u53EF\u80FD\u907F\u514D\u5728\u8F6C\u6362\u65B9\u6CD5\u5185\u90E8\u4FEE\u6539\u8F93\u5165\u53C2\u6570\u5F15\u8D77\u4F5C\u7528\u57DF\u5916\u95EE\u9898\u3002"]}),"\n",(0,c.jsx)(r.p,{children:"\u6CE8\u518C\u8F6C\u6362\u65B9\u6CD5\u7684\u51FD\u6570\u5982\u4E0B:"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-go",children:"// RegisterConverter to register custom converter.\n// It must be registered before you use this custom converting feature.\n// It is suggested to do it in boot procedure of the process.\n//\n// Note:\n//  1. The parameter `fn` must be defined as pattern `func(T1) (T2, error)`.\n//     It will convert type `T1` to type `T2`.\n//  2. The `T1` should not be type of pointer, but the `T2` should be type of pointer.\nfunc RegisterConverter(fn interface{}) (err error)\n"})}),"\n",(0,c.jsx)(r.h2,{id:"\u7ED3\u6784\u4F53\u7C7B\u578B\u8F6C\u6362",children:"\u7ED3\u6784\u4F53\u7C7B\u578B\u8F6C\u6362"}),"\n",(0,c.jsx)(r.p,{children:"\u5E38\u89C1\u7684\u81EA\u5B9A\u4E49\u6570\u636E\u7ED3\u6784\u662F\u7ED3\u6784\u4F53\u4E4B\u95F4\u7684\u7C7B\u578B\u8F6C\u6362\u3002\u6211\u4EEC\u6765\u770B\u4E24\u4E2A\u4F8B\u5B50\u3002"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/util/gconv"\n)\n\ntype Src struct {\n    A int\n}\n\ntype Dst struct {\n    B int\n}\n\ntype SrcWrap struct {\n    Value Src\n}\n\ntype DstWrap struct {\n    Value Dst\n}\n\nfunc SrcToDstConverter(src Src) (dst *Dst, err error) {\n    return &Dst{B: src.A}, nil\n}\n\n// SrcToDstConverter is custom converting function for custom type.\nfunc main() {\n    // register custom converter function.\n    err := gconv.RegisterConverter(SrcToDstConverter)\n    if err != nil {\n        panic(err)\n    }\n\n    // custom struct converting.\n    var (\n        src = Src{A: 1}\n        dst *Dst\n    )\n    err = gconv.Scan(src, &dst)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println("src:", src)\n    fmt.Println("dst:", dst)\n\n    // custom struct attributes converting.\n    var (\n        srcWrap = SrcWrap{Src{A: 1}}\n        dstWrap *DstWrap\n    )\n    err = gconv.Scan(srcWrap, &dstWrap)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println("srcWrap:", srcWrap)\n    fmt.Println("dstWrap:", dstWrap)\n}\n'})}),"\n",(0,c.jsxs)(r.p,{children:["\u5728\u8BE5\u793A\u4F8B\u4EE3\u7801\u4E2D\uFF0C\u6F14\u793A\u4E86\u4E24\u79CD\u7C7B\u578B\u8F6C\u6362\u573A\u666F:\u81EA\u5B9A\u4E49\u7ED3\u6784\u4F53\u8F6C\u6362\uFF0C\u4EE5\u53CA\u7ED3\u6784\u4F53\u4F5C\u4E3A\u5C5E\u6027\u7684\u81EA\u52A8\u8F6C\u6362\u3002\u8F6C\u6362\u65B9\u6CD5\u4F7F\u7528\u7684\u662F\u901A\u7528\u7684\u7ED3\u6784\u4F53\u8F6C\u6362\u65B9\u6CD5 ",(0,c.jsx)(r.code,{children:"gconv.Scan"}),"\uFF0C\u8BE5\u65B9\u6CD5\u5728\u5185\u90E8\u5B9E\u73B0\u4E2D\u4F1A\u81EA\u52A8\u5224\u65AD\u5982\u679C\u5B58\u5728\u81EA\u5B9A\u4E49\u7C7B\u578B\u8F6C\u6362\u51FD\u6570\uFF0C\u4F1A\u4F18\u5148\u4F7F\u7528\u81EA\u5B9A\u4E49\u7C7B\u578B\u8F6C\u6362\u51FD\u6570\uFF0C\u5426\u5219\u4F1A\u8D70\u9ED8\u8BA4\u7684\u8F6C\u6362\u903B\u8F91\u3002"]}),"\n",(0,c.jsx)(r.p,{children:"\u6267\u884C\u540E\uFF0C\u7EC8\u7AEF\u8F93\u51FA\uFF1A"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{children:"src: {1}\ndst: &{1}\nsrcWrap: {{1}}\ndstWrap: &{{1}}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["\u9664\u4E86\u4F7F\u7528 ",(0,c.jsx)(r.code,{children:"gconv.Scan"})," \u65B9\u6CD5\u5916\uFF0C\u6211\u4EEC\u4E5F\u53EF\u4EE5\u4F7F ",(0,c.jsx)(r.code,{children:"gconv.ConvertWithRefer"})," \u65B9\u6CD5\u5B9E\u73B0\u7C7B\u578B\u8F6C\u6362\uFF0C\u4E24\u8005\u7684\u6548\u679C\u90FD\u662F\u4E00\u6837\u7684\uFF1A"]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/util/gconv"\n)\n\ntype Src struct {\n    A int\n}\n\ntype Dst struct {\n    B int\n}\n\ntype SrcWrap struct {\n    Value Src\n}\n\ntype DstWrap struct {\n    Value Dst\n}\n\n// SrcToDstConverter is custom converting function for custom type.\nfunc SrcToDstConverter(src Src) (dst *Dst, err error) {\n    return &Dst{B: src.A}, nil\n}\n\nfunc main() {\n    // register custom converter function.\n    err := gconv.RegisterConverter(SrcToDstConverter)\n    if err != nil {\n        panic(err)\n    }\n\n    // custom struct converting.\n    var src = Src{A: 1}\n    dst := gconv.ConvertWithRefer(src, Dst{})\n    fmt.Println("src:", src)\n    fmt.Println("dst:", dst)\n\n    // custom struct attributes converting.\n    var srcWrap = SrcWrap{Src{A: 1}}\n    dstWrap := gconv.ConvertWithRefer(srcWrap, &DstWrap{})\n    fmt.Println("srcWrap:", srcWrap)\n    fmt.Println("dstWrap:", dstWrap)\n}\n'})}),"\n",(0,c.jsx)(r.h2,{id:"\u522B\u540D\u7C7B\u578B\u8F6C\u6362",children:"\u522B\u540D\u7C7B\u578B\u8F6C\u6362"}),"\n",(0,c.jsxs)(r.p,{children:["\u6211\u4EEC\u4E5F\u53EF\u4EE5\u4F7F\u7528 ",(0,c.jsx)(r.code,{children:"Converter"}),"\u7279\u6027\u5B9E\u73B0 ",(0,c.jsx)(r.strong,{children:"\u522B\u540D\u7C7B\u578B"})," \u7684\u8F6C\u6362\u3002\u522B\u540D\u7C7B\u578B\u4E0D\u9650\u4E8E\u7ED3\u6784\u4F53\uFF0C\u4E5F\u53EF\u4EE5\u662F ",(0,c.jsx)(r.code,{children:"int, string"})," \u7B49\u57FA\u7840\u7C7B\u578B\u7684\u522B\u540D\u3002\u6211\u4EEC\u6765\u770B\u4E24\u4E2A\u4F8B\u5B50\u3002"]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/os/gtime"\n    "github.com/gogf/gf/v2/util/gconv"\n)\n\ntype MyTime = *gtime.Time\n\ntype Src struct {\n    A MyTime\n}\n\ntype Dst struct {\n    B string\n}\n\ntype SrcWrap struct {\n    Value Src\n}\n\ntype DstWrap struct {\n    Value Dst\n}\n\n// SrcToDstConverter is custom converting function for custom type.\nfunc SrcToDstConverter(src Src) (dst *Dst, err error) {\n    return &Dst{B: src.A.Format("Y-m-d")}, nil\n}\n\n// SrcToDstConverter is custom converting function for custom type.\nfunc main() {\n    // register custom converter function.\n    err := gconv.RegisterConverter(SrcToDstConverter)\n    if err != nil {\n        panic(err)\n    }\n\n    // custom struct converting.\n    var (\n        src = Src{A: gtime.Now()}\n        dst *Dst\n    )\n    err = gconv.Scan(src, &dst)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println("src:", src)\n    fmt.Println("dst:", dst)\n\n    // custom struct attributes converting.\n    var (\n        srcWrap = SrcWrap{Src{A: gtime.Now()}}\n        dstWrap *DstWrap\n    )\n    err = gconv.Scan(srcWrap, &dstWrap)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println("srcWrap:", srcWrap)\n    fmt.Println("dstWrap:", dstWrap)\n}\n'})}),"\n",(0,c.jsxs)(r.p,{children:["\u4EE3\u7801\u4E2D\u7684 ",(0,c.jsx)(r.code,{children:"type xxx = yyy"}),"\u662F\u7531\u4E8E ",(0,c.jsx)(r.code,{children:"*gtime.Time"})," \u7C7B\u578B\u7684\u9700\u8981\uFF0C\u5176\u4ED6\u7C7B\u578B\u53EF\u6839\u636E\u9700\u8981\u662F\u5426\u4F7F\u7528\u522B\u540D\u7B26\u53F7 ",(0,c.jsx)(r.code,{children:"="}),"\uFF0C\u4F8B\u5982\u57FA\u7840\u7C7B\u578B ",(0,c.jsx)(r.code,{children:"int, string"})," \u7B49\u662F\u4E0D\u9700\u8981\u522B\u540D\u7B26\u53F7\u7684\u3002"]}),"\n",(0,c.jsx)(r.p,{children:"\u6267\u884C\u540E\uFF0C\u7EC8\u7AEF\u8F93\u51FA\uFF1A"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{children:"src: {2024-01-22 21:45:28}\ndst: &{2024-01-22}\nsrcWrap: {{2024-01-22 21:45:28}}\ndstWrap: &{{2024-01-22}}\n"})}),"\n",(0,c.jsxs)(r.p,{children:["\u540C\u6837\u7684\uFF0C\u9664\u4E86\u4F7F\u7528 ",(0,c.jsx)(r.code,{children:"gconv.Scan"})," \u65B9\u6CD5\u5916\uFF0C\u6211\u4EEC\u4E5F\u53EF\u4EE5\u4F7F\u7528 ",(0,c.jsx)(r.code,{children:"gconv.ConvertWithRefer"})," \u65B9\u6CD5\u5B9E\u73B0\u7C7B\u578B\u8F6C\u6362\uFF0C\u4E24\u8005\u7684\u6548\u679C\u90FD\u662F\u4E00\u6837\u7684\uFF1A"]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/os/gtime"\n    "github.com/gogf/gf/v2/util/gconv"\n)\n\ntype MyTime = *gtime.Time\n\ntype Src struct {\n    A MyTime\n}\n\ntype Dst struct {\n    B string\n}\n\ntype SrcWrap struct {\n    Value Src\n}\n\ntype DstWrap struct {\n    Value Dst\n}\n\n// SrcToDstConverter is custom converting function for custom type.\nfunc SrcToDstConverter(src Src) (dst *Dst, err error) {\n    return &Dst{B: src.A.Format("Y-m-d")}, nil\n}\n\n// SrcToDstConverter is custom converting function for custom type.\nfunc main() {\n    // register custom converter function.\n    err := gconv.RegisterConverter(SrcToDstConverter)\n    if err != nil {\n        panic(err)\n    }\n\n    // custom struct converting.\n    var src = Src{A: gtime.Now()}\n    dst := gconv.ConvertWithRefer(src, &Dst{})\n    fmt.Println("src:", src)\n    fmt.Println("dst:", dst)\n\n    // custom struct attributes converting.\n    var srcWrap = SrcWrap{Src{A: gtime.Now()}}\n    dstWrap := gconv.ConvertWithRefer(srcWrap, &DstWrap{})\n    fmt.Println("srcWrap:", srcWrap)\n    fmt.Println("dstWrap:", dstWrap)\n}\n'})})]})}function u(n={}){let{wrapper:r}={...(0,s.a)(),...n.components};return r?(0,c.jsx)(r,{...n,children:(0,c.jsx)(l,{...n})}):l(n)}},250065:function(n,r,t){t.d(r,{Z:function(){return i},a:function(){return o}});var e=t(667294);let c={},s=e.createContext(c);function o(n){let r=e.useContext(s);return e.useMemo(function(){return"function"==typeof n?n(r):{...r,...n}},[r,n])}function i(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(c):n.components||c:o(n.components),e.createElement(s.Provider,{value:r},n.children)}}}]);