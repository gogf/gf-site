"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["20459"],{519802:function(e,n,r){r.r(n),r.d(n,{metadata:()=>l,contentTitle:()=>s,default:()=>h,assets:()=>d,toc:()=>a,frontMatter:()=>t});var l=JSON.parse('{"id":"\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree/\u6811\u5F62\u7C7B\u578B-\u65B9\u6CD5\u4ECB\u7ECD","title":"\u6811\u5F62\u7C7B\u578B-\u65B9\u6CD5\u4ECB\u7ECD","description":"\u4EE5\u4E0B\u5E38\u7528\u65B9\u6CD5\u5217\u8868\uFF0C\u6587\u6863\u66F4\u65B0\u53EF\u80FD\u6EDE\u540E\u4E8E\u4EE3\u7801\u65B0\u7279\u6027\uFF0C\u66F4\u591A\u7684\u65B9\u6CD5\u53CA\u793A\u4F8B\u8BF7\u53C2\u8003\u4EE3\u7801\u6587\u6863\uFF1A https://pkg.go.dev/github.com/gogf/gf/v2/container/gtree","source":"@site/versioned_docs/version-2.4.x/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree/\u6811\u5F62\u7C7B\u578B-\u65B9\u6CD5\u4ECB\u7ECD.md","sourceDirName":"\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree","slug":"/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree/\u6811\u5F62\u7C7B\u578B-\u65B9\u6CD5\u4ECB\u7ECD","permalink":"/2.4.x/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree/\u6811\u5F62\u7C7B\u578B-\u65B9\u6CD5\u4ECB\u7ECD","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/versioned_docs/version-2.4.x/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree/\u6811\u5F62\u7C7B\u578B-\u65B9\u6CD5\u4ECB\u7ECD.md","tags":[],"version":"2.4.x","lastUpdatedBy":"John","lastUpdatedAt":1730365530000,"sidebarPosition":1,"frontMatter":{"title":"\u6811\u5F62\u7C7B\u578B-\u65B9\u6CD5\u4ECB\u7ECD","sidebar_position":1,"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"\u6811\u5F62\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528","permalink":"/2.4.x/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree/\u6811\u5F62\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528"},"next":{"title":"\u5BF9\u8C61\u590D\u7528-gpool","permalink":"/2.4.x/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5BF9\u8C61\u590D\u7528-gpool/"}}'),i=r("785893"),c=r("250065");let t={title:"\u6811\u5F62\u7C7B\u578B-\u65B9\u6CD5\u4ECB\u7ECD",sidebar_position:1,hide_title:!0},s=void 0,d={},a=[{value:"<code>NewBTree</code>",id:"newbtree",level:2},{value:"<code>NewBTreeFrom</code>",id:"newbtreefrom",level:2},{value:"<code>Clone</code>",id:"clone",level:2},{value:"<code>Set</code>",id:"set",level:2},{value:"<code>Sets</code>",id:"sets",level:2},{value:"<code>Get</code>",id:"get",level:2},{value:"<code>GetOrSet</code>",id:"getorset",level:2},{value:"<code>GetOrSetFunc</code>",id:"getorsetfunc",level:2},{value:"<code>GetOrSetFuncLock</code>",id:"getorsetfunclock",level:2},{value:"GetVar",id:"getvar",level:2},{value:"<code>GetVarOrSet</code>",id:"getvarorset",level:2},{value:"GetVarOrSetFunc",id:"getvarorsetfunc",level:2},{value:"<code>GetVarOrSetFuncLock</code>",id:"getvarorsetfunclock",level:2},{value:"<code>SetIfNotExist</code>",id:"setifnotexist",level:2},{value:"<code>SetIfNotExistFunc</code>",id:"setifnotexistfunc",level:2},{value:"<code>SetIfNotExistFuncLock</code>",id:"setifnotexistfunclock",level:2},{value:"<code>Contains</code>",id:"contains",level:2},{value:"<code>Remove</code>",id:"remove",level:2},{value:"<code>Removes</code>",id:"removes",level:2},{value:"IsEmpty",id:"isempty",level:2},{value:"<code>Size</code>",id:"size",level:2},{value:"<code>Keys</code>",id:"keys",level:2},{value:"<code>Values</code>",id:"values",level:2},{value:"<code>Map</code>",id:"map",level:2},{value:"<code>MapStrAny</code>",id:"mapstrany",level:2},{value:"<code>Clear</code>",id:"clear",level:2},{value:"<code>Replace</code>",id:"replace",level:2},{value:"<code>Height</code>",id:"height",level:2},{value:"<code>Left</code>",id:"left",level:2},{value:"<code>Right</code>",id:"right",level:2},{value:"<code>String</code>",id:"string",level:2},{value:"<code>Search</code>",id:"search",level:2},{value:"<code>Print</code>",id:"print",level:2},{value:"<code>Iterator</code>",id:"iterator",level:2},{value:"<code>IteratorFrom</code>",id:"iteratorfrom",level:2},{value:"<code>IteratorAsc</code>",id:"iteratorasc",level:2},{value:"<code>IteratorAscFrom</code>",id:"iteratorascfrom",level:2},{value:"<code>IteratorDesc</code>",id:"iteratordesc",level:2},{value:"<code>IteratorDescFrom</code>",id:"iteratordescfrom",level:2},{value:"<code>MarshalJson</code>",id:"marshaljson",level:2}];function o(e){let n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["\u4EE5\u4E0B\u5E38\u7528\u65B9\u6CD5\u5217\u8868\uFF0C\u6587\u6863\u66F4\u65B0\u53EF\u80FD\u6EDE\u540E\u4E8E\u4EE3\u7801\u65B0\u7279\u6027\uFF0C\u66F4\u591A\u7684\u65B9\u6CD5\u53CA\u793A\u4F8B\u8BF7\u53C2\u8003\u4EE3\u7801\u6587\u6863\uFF1A ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/container/gtree",children:"https://pkg.go.dev/github.com/gogf/gf/v2/container/gtree"})]}),"\n",(0,i.jsx)(n.h2,{id:"newbtree",children:(0,i.jsx)(n.code,{children:"NewBTree"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"NewBTree"})," \u4F7F\u7528 ",(0,i.jsx)(n.code,{children:"m"}),"(\u6700\u5927\u5B50\u8282\u70B9\u6570\u91CF)\u548C\u81EA\u5B9A\u4E49\u7684\u6BD4\u8F83\u65B9\u6CD5\u521B\u5EFA ",(0,i.jsx)(n.code,{children:"BTree"}),"\u3002\u53C2\u6570 ",(0,i.jsx)(n.code,{children:"safe"})," \u7528\u4E8E\u6307\u5B9A\u662F\u5426\u4F7F\u7528\u5E76\u53D1\u5B89\u5168\u7684 ",(0,i.jsx)(n.code,{children:"tree"}),"\uFF0C\u9ED8\u8BA4\u60C5\u51B5\u4E0B\u4E3A ",(0,i.jsx)(n.code,{children:"false"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u6CE8\u610F\uFF1A\u53C2\u6570 ",(0,i.jsx)(n.code,{children:"m"})," \u5FC5\u987B\u5927\u4E8E\u7B49\u4E8E ",(0,i.jsx)(n.code,{children:"3"}),"\uFF0C\u5426\u5219\u4F1A ",(0,i.jsx)(n.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"NewBTree(m int, comparator func(v1, v2 interface{}) int, safe ...bool) *BTree\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleNewBTree() {\n      bTree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          bTree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n      fmt.Println(bTree.Map())\n\n      // Output:\n      // map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"newbtreefrom",children:(0,i.jsx)(n.code,{children:"NewBTreeFrom"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"NewBTreeFrom"})," \u4F7F\u7528 ",(0,i.jsx)(n.code,{children:"m"}),"(\u6700\u5927\u5B50\u8282\u70B9\u6570\u91CF)\uFF0C\u81EA\u5B9A\u4E49\u7684\u6BD4\u8F83\u65B9\u6CD5\u548C\u7C7B\u578B\u4E3A ",(0,i.jsx)(n.code,{children:"map[interface{}]interface{}"})," \u7684 ",(0,i.jsx)(n.code,{children:"data"})," \u521B\u5EFA ",(0,i.jsx)(n.code,{children:"BTree"}),"\u3002\u53C2\u6570 ",(0,i.jsx)(n.code,{children:"safe"})," \u7528\u4E8E\u6307\u5B9A\u662F\u5426\u4F7F\u7528\u5E76\u53D1\u5B89\u5168\u7684 ",(0,i.jsx)(n.code,{children:"tree"}),"\uFF0C\u9ED8\u8BA4\u60C5\u51B5\u4E0B\u4E3A ",(0,i.jsx)(n.code,{children:"false"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u6CE8\u610F\uFF1A\u53C2\u6570 ",(0,i.jsx)(n.code,{children:"m"})," \u5FC5\u987B\u5927\u4E8E\u7B49\u4E8E ",(0,i.jsx)(n.code,{children:"3"}),"\uFF0C\u5426\u5219\u4F1A ",(0,i.jsx)(n.code,{children:"panic"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"NewBTreeFrom(m int, comparator func(v1, v2 interface{}) int, data map[interface{}]interface{}, safe ...bool) *BTree\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleNewBTreeFrom() {\n      bTree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          bTree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      otherBTree := gtree.NewBTreeFrom(3, gutil.ComparatorString, bTree.Map())\n      fmt.Println(otherBTree.Map())\n\n      // Output:\n      // map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"clone",children:(0,i.jsx)(n.code,{children:"Clone"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"clone"})," \u8FD4\u56DE\u4E00\u4E2A\u503C\u4E3A\u5F53\u524D ",(0,i.jsx)(n.code,{children:"tree"})," \u503C\u7684\u526F\u672C\u7684\u65B0 ",(0,i.jsx)(n.code,{children:"BTree"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Clone() *BTree\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Clone() {\n      b := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          b.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      tree := b.Clone()\n\n      fmt.Println(tree.Map())\n      fmt.Println(tree.Size())\n\n      // Output:\n      // map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n      // 6\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"set",children:(0,i.jsx)(n.code,{children:"Set"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Set"})," \u4E3A ",(0,i.jsx)(n.code,{children:"tree"})," \u8BBE\u7F6E ",(0,i.jsx)(n.code,{children:"key/value"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Set(key interface{}, value interface{})\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Set() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Map())\n      fmt.Println(tree.Size())\n\n      // Output:\n      // map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n      // 6\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"sets",children:(0,i.jsx)(n.code,{children:"Sets"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Sets"})," \u4E3A ",(0,i.jsx)(n.code,{children:"tree"})," \u6279\u91CF\u8BBE\u7F6E ",(0,i.jsx)(n.code,{children:"key/value"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Sets(data map[interface{}]interface{})\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Sets() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n\n      tree.Sets(map[interface{}]interface{}{\n          "key1": "val1",\n          "key2": "val2",\n      })\n\n      fmt.Println(tree.Map())\n      fmt.Println(tree.Size())\n\n      // Output:\n      // map[key1:val1 key2:val2]\n      // 2\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"get",children:(0,i.jsx)(n.code,{children:"Get"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Get"})," \u8FD4\u56DE\u53C2\u6570 ",(0,i.jsx)(n.code,{children:"key"})," \u5BF9\u5E94\u7684\u503C ",(0,i.jsx)(n.code,{children:"value"}),"\uFF0C\u5982 ",(0,i.jsx)(n.code,{children:"key"})," \u4E0D\u5B58\u5728\uFF0C\u5219\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"Nil"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Get(key interface{}) (value interface{})\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Get() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Get("key1"))\n      fmt.Println(tree.Get("key10"))\n\n      // Output:\n      // val1\n      // <nil>\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"getorset",children:(0,i.jsx)(n.code,{children:"GetOrSet"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"GetOrSet"})," \u5982 ",(0,i.jsx)(n.code,{children:"key"})," \u5B58\u5728\uFF0C\u5219\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"value"}),"\uFF0C\u5982 ",(0,i.jsx)(n.code,{children:"key"})," \u4E0D\u5B58\u5728\uFF0C\u4F7F\u7528 ",(0,i.jsx)(n.code,{children:"key"})," \u548C ",(0,i.jsx)(n.code,{children:"value"})," \u8BBE\u7F6E\u952E\u503C\uFF0C\u7136\u540E\u8FD4\u56DE\u8BE5\u503C\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"GetOrSet(key interface{}, value interface{}) interface{}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_GetOrSet() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.GetOrSet("key1", "newVal1"))\n      fmt.Println(tree.GetOrSet("key6", "val6"))\n\n      // Output:\n      // val1\n      // val6\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"getorsetfunc",children:(0,i.jsx)(n.code,{children:"GetOrSetFunc"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"GetOrSetFunc"})," \u5982 ",(0,i.jsx)(n.code,{children:"key"})," \u5B58\u5728\uFF0C\u5219\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"value"}),"\uFF0C\u5982 ",(0,i.jsx)(n.code,{children:"key"})," \u4E0D\u5B58\u5728\uFF0C\u4F7F\u7528 ",(0,i.jsx)(n.code,{children:"key"})," \u548C ",(0,i.jsx)(n.code,{children:"func f"})," \u7684\u8FD4\u56DE\u503C\u8BBE\u7F6E\u952E\u503C\uFF0C\u7136\u540E\u8FD4\u56DE\u8BE5\u503C\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"GetOrSetFunc(key interface{}, f func() interface{}) interface{}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_GetOrSetFunc() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.GetOrSetFunc("key1", func() interface{} {\n          return "newVal1"\n      }))\n      fmt.Println(tree.GetOrSetFunc("key6", func() interface{} {\n          return "val6"\n      }))\n\n      // Output:\n      // val1\n      // val6\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"getorsetfunclock",children:(0,i.jsx)(n.code,{children:"GetOrSetFuncLock"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"GetOrSetFunc"})," \u5982 ",(0,i.jsx)(n.code,{children:"key"})," \u5B58\u5728\uFF0C\u5219\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"value"}),"\uFF0C\u5982 ",(0,i.jsx)(n.code,{children:"key"})," \u4E0D\u5B58\u5728\uFF0C\u4F7F\u7528 ",(0,i.jsx)(n.code,{children:"key"})," \u548C ",(0,i.jsx)(n.code,{children:"func f"})," \u7684\u8FD4\u56DE\u503C\u8BBE\u7F6E\u952E\u503C\uFF0C\u7136\u540E\u8FD4\u56DE\u8BE5\u503C\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u6CE8\u610F\uFF1A ",(0,i.jsx)(n.code,{children:"GetOrSetFuncLock"})," \u4E0E ",(0,i.jsx)(n.code,{children:"GetOrSetFunc"})," \u51FD\u6570\u7684\u4E0D\u540C\u4E4B\u5904\u5728\u4E8E\u5B83\u5728\u5199\u9501\u4E2D\u6267\u884C\u51FD\u6570 ",(0,i.jsx)(n.code,{children:"f"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"GetOrSetFuncLock(key interface{}, f func() interface{}) interface{}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_GetOrSetFuncLock() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.GetOrSetFuncLock("key1", func() interface{} {\n          return "newVal1"\n      }))\n      fmt.Println(tree.GetOrSetFuncLock("key6", func() interface{} {\n          return "val6"\n      }))\n\n      // Output:\n      // val1\n      // val6\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"getvar",children:"GetVar"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"GetVar"})," \u6839\u636E\u952E\u540D ",(0,i.jsx)(n.code,{children:"key"})," \u67E5\u8BE2\u5E76\u8FD4\u56DE\u5BF9\u5E94\u7684\u952E\u503C\uFF0C\u7C7B\u578B\u4E3A ",(0,i.jsx)(n.code,{children:"*gvar.Var"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u6CE8\u610F\uFF1A\u8FD4\u56DE\u7684 ",(0,i.jsx)(n.code,{children:"gvar.Var"})," \u662F\u975E\u5E76\u53D1\u5B89\u5168\u7684\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"GetVar(key interface{}) *gvar.Var\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_GetVar() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.GetVar("key1").String())\n\n      // Output:\n      // val1\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"getvarorset",children:(0,i.jsx)(n.code,{children:"GetVarOrSet"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"GetVarOrSet"})," \u4F7F\u7528 ",(0,i.jsx)(n.code,{children:"GetOrSet"})," \u7684\u7ED3\u679C\u8FD4\u56DE\uFF0C\u7C7B\u578B\u4E3A ",(0,i.jsx)(n.code,{children:"*gvar.Var"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u6CE8\u610F\uFF1A\u8FD4\u56DE\u7684 ",(0,i.jsx)(n.code,{children:"gvar.Var"})," \u662F\u975E\u5E76\u53D1\u5B89\u5168\u7684\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"GetVarOrSet(key interface{}, value interface{}) *gvar.Var\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_GetVarOrSet() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.GetVarOrSet("key1", "newVal1"))\n      fmt.Println(tree.GetVarOrSet("key6", "val6"))\n\n      // Output:\n      // val1\n      // val6\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"getvarorsetfunc",children:"GetVarOrSetFunc"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"GetVarOrSetFunc"})," \u4F7F\u7528 ",(0,i.jsx)(n.code,{children:"GetOrSetFunc"})," \u7684\u7ED3\u679C\u8FD4\u56DE\uFF0C\u7C7B\u578B\u4E3A ",(0,i.jsx)(n.code,{children:"*gvar.Var"}),"\u3002"]}),"\n",(0,i.jsxs)(n.li,{children:["\u6CE8\u610F\uFF1A\u8FD4\u56DE\u7684 ",(0,i.jsx)(n.code,{children:"gvar.Var"})," \u662F\u975E\u5E76\u53D1\u5B89\u5168\u7684\u3002"]}),"\n",(0,i.jsx)(n.li,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"GetVarOrSetFunc(key interface{}, f func() interface{}) *gvar.Var\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_GetVarOrSetFunc() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.GetVarOrSetFunc("key1", func() interface{} {\n          return "newVal1"\n      }))\n      fmt.Println(tree.GetVarOrSetFunc("key6", func() interface{} {\n          return "val6"\n      }))\n\n      // Output:\n      // val1\n      // val6\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"getvarorsetfunclock",children:(0,i.jsx)(n.code,{children:"GetVarOrSetFuncLock"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"GetVarOrSetFuncLock"})," \u4F7F\u7528 ",(0,i.jsx)(n.code,{children:"GetOrSetFuncLock"})," \u7684\u7ED3\u679C\u8FD4\u56DE\uFF0C\u7C7B\u578B\u4E3A ",(0,i.jsx)(n.code,{children:"*gvar.Var"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u6CE8\u610F\uFF1A\u8FD4\u56DE\u7684 ",(0,i.jsx)(n.code,{children:"gvar.Var"})," \u662F\u975E\u5E76\u53D1\u5B89\u5168\u7684\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"GetVarOrSetFuncLock(key interface{}, f func() interface{}) *gvar.Var\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_GetVarOrSetFuncLock() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.GetVarOrSetFuncLock("key1", func() interface{} {\n          return "newVal1"\n      }))\n      fmt.Println(tree.GetVarOrSetFuncLock("key6", func() interface{} {\n          return "val6"\n      }))\n\n      // Output:\n      // val1\n      // val6\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"setifnotexist",children:(0,i.jsx)(n.code,{children:"SetIfNotExist"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A\u5982\u679C ",(0,i.jsx)(n.code,{children:"key"})," \u4E0D\u5B58\u5728\uFF0C\u5219 ",(0,i.jsx)(n.code,{children:"SetIfNotExist"})," \u4E3A ",(0,i.jsx)(n.code,{children:"map"})," \u8BBE\u7F6E\u503C\u952E\u503C\u5BF9 ",(0,i.jsx)(n.code,{children:"key/value"}),"\uFF0C\u5E76\u4E14\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"true"}),"\u3002\u5982\u679C ",(0,i.jsx)(n.code,{children:"key"})," \u5B58\u5728\uFF0C\u5219\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"false"}),"\uFF0C\u800C ",(0,i.jsx)(n.code,{children:"value"})," \u5C06\u88AB\u5FFD\u7565\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"SetIfNotExist(key interface{}, value interface{}) bool\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_SetIfNotExist() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.SetIfNotExist("key1", "newVal1"))\n      fmt.Println(tree.SetIfNotExist("key6", "val6"))\n\n      // Output:\n      // false\n      // true\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"setifnotexistfunc",children:(0,i.jsx)(n.code,{children:"SetIfNotExistFunc"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A\u5982\u679C ",(0,i.jsx)(n.code,{children:"key"})," \u4E0D\u5B58\u5728\uFF0C\u5219 ",(0,i.jsx)(n.code,{children:"SetIfNotExistFunc"})," \u8BBE\u7F6E\u503C\u4E3A\u51FD\u6570 ",(0,i.jsx)(n.code,{children:"f"})," \u7684\u8FD4\u56DE\u503C\uFF0C\u5E76\u4E14\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"true"}),"\u3002\u5982\u679C ",(0,i.jsx)(n.code,{children:"key"})," \u5B58\u5728\uFF0C\u5219\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"false"}),"\uFF0C\u5E76\u4E14 ",(0,i.jsx)(n.code,{children:"value"})," \u5C06\u88AB\u5FFD\u7565\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"SetIfNotExistFunc(key interface{}, f func() interface{}) bool\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_SetIfNotExistFunc() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.SetIfNotExistFunc("key1", func() interface{} {\n          return "newVal1"\n      }))\n      fmt.Println(tree.SetIfNotExistFunc("key6", func() interface{} {\n          return "val6"\n      }))\n\n      // Output:\n      // false\n      // true\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"setifnotexistfunclock",children:(0,i.jsx)(n.code,{children:"SetIfNotExistFuncLock"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A\u5982\u679C ",(0,i.jsx)(n.code,{children:"key"})," \u4E0D\u5B58\u5728\uFF0C\u5219 ",(0,i.jsx)(n.code,{children:"SetIfNotExistFunc"})," \u8BBE\u7F6E\u503C\u4E3A ",(0,i.jsx)(n.code,{children:"func c"})," \u7684\u8FD4\u56DE\u503C\uFF0C\u7136\u540E\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"true"}),"\u3002\u5982\u679C ",(0,i.jsx)(n.code,{children:"key"})," \u5B58\u5728\uFF0C\u5219\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"false"}),"\uFF0C\u800C ",(0,i.jsx)(n.code,{children:"value"})," \u5C06\u88AB\u5FFD\u7565\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"SetIfNotExistFuncLock"})," \u4E0E ",(0,i.jsx)(n.code,{children:"SetIfNotExistFunc"})," \u51FD\u6570\u7684\u4E0D\u540C\u4E4B\u5904\u5728\u4E8E\u5B83\u5728 ",(0,i.jsx)(n.code,{children:"mutex.Lock"})," \u4E2D\u6267\u884C\u51FD\u6570 ",(0,i.jsx)(n.code,{children:"f"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"SetIfNotExistFuncLock(key interface{}, f func() interface{}) bool\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_SetIfNotExistFuncLock() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.SetIfNotExistFuncLock("key1", func() interface{} {\n          return "newVal1"\n      }))\n      fmt.Println(tree.SetIfNotExistFuncLock("key6", func() interface{} {\n          return "val6"\n      }))\n\n      // Output:\n      // false\n      // true\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"contains",children:(0,i.jsx)(n.code,{children:"Contains"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Contains"})," \u68C0\u67E5 ",(0,i.jsx)(n.code,{children:"key"})," \u5728 ",(0,i.jsx)(n.code,{children:"tree"})," \u4E2D\u662F\u5426\u5B58\u5728\u3002\u5982\u679C ",(0,i.jsx)(n.code,{children:"key"})," \u5B58\u5728\uFF0C\u5219\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"true"}),"\uFF0C\u5426\u5219\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"false"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Contains(key interface{}) bool\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Contains() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Contains("key1"))\n      fmt.Println(tree.Contains("key6"))\n\n      // Output:\n      // true\n      // false\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"remove",children:(0,i.jsx)(n.code,{children:"Remove"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A\u6309\u7ED9\u5B9A\u7684 ",(0,i.jsx)(n.code,{children:"key"})," \u4ECE ",(0,i.jsx)(n.code,{children:"tree"})," \u4E2D\u5220\u9664 ",(0,i.jsx)(n.code,{children:"value"}),"\uFF0C\u5E76\u8FD4\u56DE\u6B64\u5220\u9664\u7684 ",(0,i.jsx)(n.code,{children:"value"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Remove(key interface{}) (value interface{})\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Remove() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Remove("key1"))\n      fmt.Println(tree.Remove("key6"))\n      fmt.Println(tree.Map())\n\n      // Output:\n      // val1\n      // <nil>\n      // map[key0:val0 key2:val2 key3:val3 key4:val4 key5:val5]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"removes",children:(0,i.jsx)(n.code,{children:"Removes"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Removes"})," \u6309\u7ED9\u5B9A\u7684 ",(0,i.jsx)(n.code,{children:"key"})," \u6279\u91CF\u5220\u9664 ",(0,i.jsx)(n.code,{children:"tree"})," \u7684 ",(0,i.jsx)(n.code,{children:"value"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Removes(keys []interface{})\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Removes() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      removeKeys := make([]interface{}, 2)\n      removeKeys = append(removeKeys, "key1")\n      removeKeys = append(removeKeys, "key6")\n\n      tree.Removes(removeKeys)\n\n      fmt.Println(tree.Map())\n\n      // Output:\n      // map[key0:val0 key2:val2 key3:val3 key4:val4 key5:val5]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"isempty",children:"IsEmpty"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"IsEmpty"})," \u68C0\u67E5 ",(0,i.jsx)(n.code,{children:"tree"})," \u662F\u5426\u4E3A\u7A7A\u3002\u5982\u679C ",(0,i.jsx)(n.code,{children:"tree"})," \u4E3A\u7A7A\uFF0C\u5219\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"true"}),"\uFF0C\u5426\u5219\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"false"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"IsEmpty() bool\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IsEmpty() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n\n      fmt.Println(tree.IsEmpty())\n\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.IsEmpty())\n\n      // Output:\n      // true\n      // false\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"size",children:(0,i.jsx)(n.code,{children:"Size"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Size"})," \u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"tree"})," \u7684\u5927\u5C0F\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Size() int\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Size() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n\n      fmt.Println(tree.Size())\n\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Size())\n\n      // Output:\n      // 0\n      // 6\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"keys",children:(0,i.jsx)(n.code,{children:"Keys"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Keys"})," \u6309\u5347\u5E8F\u8FD4\u56DE\u6240\u6709\u7684 ",(0,i.jsx)(n.code,{children:"key"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Keys() []interface{}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Keys() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 6; i > 0; i-- {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Keys())\n\n      // Output:\n      // [key1 key2 key3 key4 key5 key6]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"values",children:(0,i.jsx)(n.code,{children:"Values"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Values"})," \u6309 ",(0,i.jsx)(n.code,{children:"key"})," \u7684\u5347\u5E8F\u8FD4\u56DE\u6240\u6709\u7684 ",(0,i.jsx)(n.code,{children:"value"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Values() []interface{}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Values() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 6; i > 0; i-- {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Values())\n\n      // Output:\n      // [val1 val2 val3 val4 val5 val6]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"map",children:(0,i.jsx)(n.code,{children:"Map"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Map"})," \u4EE5 ",(0,i.jsx)(n.code,{children:"map"})," \u7684\u5F62\u5F0F\u8FD4\u56DE\u6240\u6709\u7684 ",(0,i.jsx)(n.code,{children:"key/value"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Map() map[interface{}]interface{}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Map() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Map())\n\n      // Output:\n      // map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"mapstrany",children:(0,i.jsx)(n.code,{children:"MapStrAny"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"MapStrAny"})," \u4EE5 ",(0,i.jsx)(n.code,{children:"map[string]interface{}"})," \u7684\u5F62\u5F0F\u8FD4\u56DE\u6240\u6709\u7684 ",(0,i.jsx)(n.code,{children:"key/value"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"MapStrAny() map[string]interface{}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_MapStrAny() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set(1000+i, "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.MapStrAny())\n\n      // Output:\n      // map[1000:val0 1001:val1 1002:val2 1003:val3 1004:val4 1005:val5]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"clear",children:(0,i.jsx)(n.code,{children:"Clear"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Clear"})," \u5220\u9664 ",(0,i.jsx)(n.code,{children:"tree"})," \u7684\u6240\u6709\u6570\u636E\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Clear()\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Clear() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set(1000+i, "val"+gconv.String(i))\n      }\n      fmt.Println(tree.Size())\n\n      tree.Clear()\n      fmt.Println(tree.Size())\n\n      // Output:\n      // 6\n      // 0\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"replace",children:(0,i.jsx)(n.code,{children:"Replace"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Replace"})," \u7528\u7C7B\u578B\u4E3A ",(0,i.jsx)(n.code,{children:"map[interface{}]interface{}"})," \u7684 ",(0,i.jsx)(n.code,{children:"data"})," \u66FF\u6362 ",(0,i.jsx)(n.code,{children:"tree"})," \u7684 ",(0,i.jsx)(n.code,{children:"key/value"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Replace(data map[interface{}]interface{})\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Replace() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Map())\n\n      data := map[interface{}]interface{}{\n          "newKey0": "newVal0",\n          "newKey1": "newVal1",\n          "newKey2": "newVal2",\n      }\n\n      tree.Replace(data)\n\n      fmt.Println(tree.Map())\n\n      // Output:\n      // map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n      // map[newKey0:newVal0 newKey1:newVal1 newKey2:newVal2]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"height",children:(0,i.jsx)(n.code,{children:"Height"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Height"})," \u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"tree"})," \u7684\u9AD8\u5EA6\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Height() int\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func ExampleBTree_Height() {\n      tree := gtree.NewBTree(3, gutil.ComparatorInt)\n      for i := 0; i < 100; i++ {\n          tree.Set(i, i)\n      }\n      fmt.Println(tree.Height())\n\n      // Output:\n      // 6\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"left",children:(0,i.jsx)(n.code,{children:"Left"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Left"})," \u8FD4\u56DE\u6700\u5DE6\u8FB9\uFF08\u6700\u5C0F\uFF09\u7684\u7C7B\u578B\u4E3A ",(0,i.jsx)(n.code,{children:"*BTreeEntry"})," \u7684 ",(0,i.jsx)(n.code,{children:"node"}),"\uFF0C\u5982\u679C ",(0,i.jsx)(n.code,{children:"tree"})," \u662F\u7A7A\u7684\uFF0C\u5219\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"nil"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Left() *BTreeEntry\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func ExampleBTree_Left() {\n      tree := gtree.NewBTree(3, gutil.ComparatorInt)\n      for i := 1; i < 100; i++ {\n          tree.Set(i, i)\n      }\n      fmt.Println(tree.Left().Key, tree.Left().Value)\n\n      emptyTree := gtree.NewBTree(3, gutil.ComparatorInt)\n      fmt.Println(emptyTree.Left())\n\n      // Output:\n      // 1 1\n      // <nil>\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"right",children:(0,i.jsx)(n.code,{children:"Right"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Left"})," \u8FD4\u56DE\u6700\u53F3\u8FB9\uFF08\u6700\u5927\uFF09\u7684\u7C7B\u578B\u4E3A ",(0,i.jsx)(n.code,{children:"*BTreeEntry"})," \u7684 ",(0,i.jsx)(n.code,{children:"node"}),"\uFF0C\u5982\u679C ",(0,i.jsx)(n.code,{children:"tree"})," \u662F\u7A7A\u7684\uFF0C\u5219\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"nil"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Right() *BTreeEntry\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func ExampleBTree_Right() {\n      tree := gtree.NewBTree(3, gutil.ComparatorInt)\n      for i := 1; i < 100; i++ {\n          tree.Set(i, i)\n      }\n      fmt.Println(tree.Right().Key, tree.Right().Value)\n\n      emptyTree := gtree.NewBTree(3, gutil.ComparatorInt)\n      fmt.Println(emptyTree.Left())\n\n      // Output:\n      // 99 99\n      // <nil>\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"string",children:(0,i.jsx)(n.code,{children:"String"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"String"})," \u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"tree"})," \u7684 ",(0,i.jsx)(n.code,{children:"node"})," \u663E\u793A\uFF08\u7528\u4E8E\u8C03\u8BD5\uFF09\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"String() string\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_String() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.String())\n\n      // Output:\n      // key0\n      // key1\n      //     key2\n      // key3\n      //     key4\n      //     key5\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"search",children:(0,i.jsx)(n.code,{children:"Search"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Search"})," \u4F7F\u7528\u53C2\u6570 ",(0,i.jsx)(n.code,{children:"key"})," \u641C\u7D22 ",(0,i.jsx)(n.code,{children:"tree"}),"\u3002\u5982\u679C\u627E\u5230 ",(0,i.jsx)(n.code,{children:"key"}),"\uFF0C\u5219\u8FD4\u56DE\u5176\u5BF9\u5E94\u7684\u952E\u503C\uFF0C\u5E76\u4E14\u8FD4\u56DE\u53C2\u6570 ",(0,i.jsx)(n.code,{children:"found"})," \u4E3A ",(0,i.jsx)(n.code,{children:"true"}),"\uFF0C\u5426\u5219\u4E3A ",(0,i.jsx)(n.code,{children:"false"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Search(key interface{}) (value interface{}, found bool)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Search() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Search("key0"))\n      fmt.Println(tree.Search("key6"))\n\n      // Output:\n      // val0 true\n      // <nil> false\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"print",children:(0,i.jsx)(n.code,{children:"Print"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Print"})," \u5C06 ",(0,i.jsx)(n.code,{children:"tree"})," \u6253\u5370\u5230\u6807\u51C6\u8F93\u51FA\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Print()\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Print() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      tree.Print()\n\n      // Output:\n      // key0\n      // key1\n      //     key2\n      // key3\n      //     key4\n      //     key5\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"iterator",children:(0,i.jsx)(n.code,{children:"Iterator"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"Iterator"})," \u7B49\u540C\u4E8E ",(0,i.jsx)(n.code,{children:"IteratorAsc"})," \u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Iterator(f func(key, value interface{}) bool)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Iterator() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 10; i++ {\n          tree.Set(i, 10-i)\n      }\n\n      var totalKey, totalValue int\n      tree.Iterator(func(key, value interface{}) bool {\n          totalKey += key.(int)\n          totalValue += value.(int)\n\n          return totalValue < 20\n      })\n\n      fmt.Println("totalKey:", totalKey)\n      fmt.Println("totalValue:", totalValue)\n\n      // Output:\n      // totalKey: 3\n      // totalValue: 27\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"iteratorfrom",children:(0,i.jsx)(n.code,{children:"IteratorFrom"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"IteratorFrom"})," \u7B49\u540C\u4E8E ",(0,i.jsx)(n.code,{children:"IteratorAscFrom"})," \u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"IteratorFrom(key interface{}, match bool, f func(key, value interface{}) bool)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IteratorFrom() {\n      m := make(map[interface{}]interface{})\n      for i := 1; i <= 5; i++ {\n          m[i] = i * 10\n      }\n      tree := gtree.NewBTreeFrom(3, gutil.ComparatorInt, m)\n\n      tree.IteratorFrom(1, true, func(key, value interface{}) bool {\n          fmt.Println("key:", key, ", value:", value)\n          return true\n      })\n\n      // Output:\n      // key: 1 , value: 10\n      // key: 2 , value: 20\n      // key: 3 , value: 30\n      // key: 4 , value: 40\n      // key: 5 , value: 50\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"iteratorasc",children:(0,i.jsx)(n.code,{children:"IteratorAsc"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"IteratorAsc"})," \u4F7F\u7528\u81EA\u5B9A\u4E49\u56DE\u8C03\u51FD\u6570 ",(0,i.jsx)(n.code,{children:"f"})," \u4EE5\u53EA\u8BFB\u65B9\u5F0F\u6309\u5347\u5E8F\u8FED\u4EE3 ",(0,i.jsx)(n.code,{children:"tree"}),"\u3002\u5982\u679C ",(0,i.jsx)(n.code,{children:"f"})," \u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"true"}),"\uFF0C\u5219\u7EE7\u7EED\u8FED\u4EE3\uFF0C\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"false"})," \u5219\u505C\u6B62\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"IteratorAsc(f func(key, value interface{}) bool)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IteratorAsc() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 10; i++ {\n          tree.Set(i, 10-i)\n      }\n\n      tree.IteratorAsc(func(key, value interface{}) bool {\n          fmt.Println("key:", key, ", value:", value)\n          return true\n      })\n\n      // Output:\n      // key: 0 , value: 10\n      // key: 1 , value: 9\n      // key: 2 , value: 8\n      // key: 3 , value: 7\n      // key: 4 , value: 6\n      // key: 5 , value: 5\n      // key: 6 , value: 4\n      // key: 7 , value: 3\n      // key: 8 , value: 2\n      // key: 9 , value: 1\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"iteratorascfrom",children:(0,i.jsx)(n.code,{children:"IteratorAscFrom"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"IteratorAscFrom"})," \u4F7F\u7528\u81EA\u5B9A\u4E49\u56DE\u8C03\u51FD\u6570 ",(0,i.jsx)(n.code,{children:"f"})," \u4EE5\u53EA\u8BFB\u65B9\u5F0F\u6309\u5347\u5E8F\u8FED\u4EE3 ",(0,i.jsx)(n.code,{children:"tree"}),"\u3002\u53C2\u6570 ",(0,i.jsx)(n.code,{children:"key"})," \u6307\u5B9A\u4ECE\u54EA\u4E2A ",(0,i.jsx)(n.code,{children:"key"})," \u5F00\u59CB\u8FED\u4EE3\u3002\u53C2\u6570 ",(0,i.jsx)(n.code,{children:"match"})," \u4E3A ",(0,i.jsx)(n.code,{children:"true"})," \u65F6\uFF0C\u4ECE ",(0,i.jsx)(n.code,{children:"key"})," \u5B8C\u5168\u5339\u914D\u65F6\u5F00\u59CB\u8FED\u4EE3\uFF0C\u5426\u5219\u4F7F\u7528\u7D22\u5F15\u641C\u7D22\u8FED\u4EE3\u3002\u5982\u679C ",(0,i.jsx)(n.code,{children:"f"})," \u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"true"}),"\uFF0C\u5219\u7EE7\u7EED\u8FED\u4EE3\uFF0C\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"false"})," \u5219\u505C\u6B62\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"IteratorAscFrom(key interface{}, match bool, f func(key, value interface{}) bool)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IteratorAscFrom_Normal() {\n      m := make(map[interface{}]interface{})\n      for i := 1; i <= 5; i++ {\n          m[i] = i * 10\n      }\n      tree := gtree.NewBTreeFrom(3, gutil.ComparatorInt, m)\n\n      tree.IteratorAscFrom(1, true, func(key, value interface{}) bool {\n          fmt.Println("key:", key, ", value:", value)\n          return true\n      })\n\n      // Output:\n      // key: 1 , value: 10\n      // key: 2 , value: 20\n      // key: 3 , value: 30\n      // key: 4 , value: 40\n      // key: 5 , value: 50\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IteratorAscFrom_NoExistKey() {\n      m := make(map[interface{}]interface{})\n      for i := 1; i <= 5; i++ {\n          m[i] = i * 10\n      }\n      tree := gtree.NewBTreeFrom(3, gutil.ComparatorInt, m)\n\n      tree.IteratorAscFrom(0, true, func(key, value interface{}) bool {\n          fmt.Println("key:", key, ", value:", value)\n          return true\n      })\n\n      // Output:\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IteratorAscFrom_NoExistKeyAndMatchFalse() {\n      m := make(map[interface{}]interface{})\n      for i := 1; i <= 5; i++ {\n          m[i] = i * 10\n      }\n      tree := gtree.NewBTreeFrom(3, gutil.ComparatorInt, m)\n\n      tree.IteratorAscFrom(0, false, func(key, value interface{}) bool {\n          fmt.Println("key:", key, ", value:", value)\n          return true\n      })\n\n      // Output:\n      // key: 1 , value: 10\n      // key: 2 , value: 20\n      // key: 3 , value: 30\n      // key: 4 , value: 40\n      // key: 5 , value: 50\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"iteratordesc",children:(0,i.jsx)(n.code,{children:"IteratorDesc"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"IteratorDesc"})," \u4F7F\u7528\u81EA\u5B9A\u4E49\u56DE\u8C03\u51FD\u6570 ",(0,i.jsx)(n.code,{children:"f"})," \u4EE5\u53EA\u8BFB\u65B9\u5F0F\u6309\u964D\u5E8F\u8FED\u4EE3 ",(0,i.jsx)(n.code,{children:"tree"}),"\u3002\u5982\u679C ",(0,i.jsx)(n.code,{children:"f"})," \u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"true"}),"\uFF0C\u5219\u7EE7\u7EED\u8FED\u4EE3\uFF0C\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"false"})," \u5219\u505C\u6B62\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"IteratorDesc(f func(key, value interface{}) bool)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IteratorDesc() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 10; i++ {\n          tree.Set(i, 10-i)\n      }\n\n      tree.IteratorDesc(func(key, value interface{}) bool {\n          fmt.Println("key:", key, ", value:", value)\n          return true\n      })\n\n      // Output:\n      // key: 9 , value: 1\n      // key: 8 , value: 2\n      // key: 7 , value: 3\n      // key: 6 , value: 4\n      // key: 5 , value: 5\n      // key: 4 , value: 6\n      // key: 3 , value: 7\n      // key: 2 , value: 8\n      // key: 1 , value: 9\n      // key: 0 , value: 10\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"iteratordescfrom",children:(0,i.jsx)(n.code,{children:"IteratorDescFrom"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"IteratorDescFrom"})," \u4F7F\u7528\u81EA\u5B9A\u4E49\u56DE\u8C03\u51FD\u6570 ",(0,i.jsx)(n.code,{children:"f"})," \u4EE5\u53EA\u8BFB\u65B9\u5F0F\u6309\u964D\u5E8F\u8FED\u4EE3 ",(0,i.jsx)(n.code,{children:"tree"}),"\u3002\u53C2\u6570 ",(0,i.jsx)(n.code,{children:"key"})," \u6307\u5B9A\u4ECE\u54EA\u4E2A ",(0,i.jsx)(n.code,{children:"key"})," \u5F00\u59CB\u8FED\u4EE3\u3002\u53C2\u6570 ",(0,i.jsx)(n.code,{children:"match"})," \u4E3A ",(0,i.jsx)(n.code,{children:"true"})," \u65F6\uFF0C\u4ECE ",(0,i.jsx)(n.code,{children:"key"})," \u5B8C\u5168\u5339\u914D\u65F6\u5F00\u59CB\u8FED\u4EE3\uFF0C\u5426\u5219\u4F7F\u7528\u7D22\u5F15\u641C\u7D22\u8FED\u4EE3\u3002\u5982\u679C ",(0,i.jsx)(n.code,{children:"f"})," \u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"true"}),"\uFF0C\u5219\u7EE7\u7EED\u8FED\u4EE3\uFF0C\u8FD4\u56DE ",(0,i.jsx)(n.code,{children:"false"})," \u5219\u505C\u6B62\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"IteratorDescFrom(key interface{}, match bool, f func(key, value interface{}) bool)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IteratorDescFrom() {\n      m := make(map[interface{}]interface{})\n      for i := 1; i <= 5; i++ {\n          m[i] = i * 10\n      }\n      tree := gtree.NewBTreeFrom(3, gutil.ComparatorInt, m)\n\n      tree.IteratorDescFrom(5, true, func(key, value interface{}) bool {\n          fmt.Println("key:", key, ", value:", value)\n          return true\n      })\n\n      // Output:\n      // key: 5 , value: 50\n      // key: 4 , value: 40\n      // key: 3 , value: 30\n      // key: 2 , value: 20\n      // key: 1 , value: 10\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"marshaljson",children:(0,i.jsx)(n.code,{children:"MarshalJson"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u8BF4\u660E\uFF1A ",(0,i.jsx)(n.code,{children:"MarshalJSON"})," \u5B9E\u73B0 ",(0,i.jsx)(n.code,{children:"json.Marshal"})," \u7684\u63A5\u53E3\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u683C\u5F0F\uFF1A"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"MarshalJSON() ([]byte, error)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u793A\u4F8B\uFF1A"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_MarshalJSON() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      bytes, err := json.Marshal(tree)\n      if err == nil {\n          fmt.Println(gconv.String(bytes))\n      }\n\n      // Output:\n      // {"key0":"val0","key1":"val1","key2":"val2","key3":"val3","key4":"val4","key5":"val5"}\n}\n'})})]})}function h(e={}){let{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return s},a:function(){return t}});var l=r(667294);let i={},c=l.createContext(i);function t(e){let n=l.useContext(c);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),l.createElement(c.Provider,{value:n},e.children)}}}]);