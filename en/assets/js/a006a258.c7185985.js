"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["15091"],{851696:function(e,n,t){t.r(n),t.d(n,{metadata:()=>s,contentTitle:()=>o,default:()=>h,assets:()=>d,toc:()=>l,frontMatter:()=>c});var s=JSON.parse('{"id":"docs/\u670D\u52A1\u53EF\u89C2\u6D4B\u6027/\u670D\u52A1\u76D1\u63A7\u544A\u8B66/\u76D1\u63A7\u544A\u8B66-\u57FA\u672C\u4ECB\u7ECD","title":"Metrics - Intro","description":"The fundamentals of monitoring alerts in the GoFrame framework, focusing on OpenTelemetry\'s design specifications and components related to monitoring and alerting. Covers the relationships and data flow among components like Meter Provider, Meter, and Instrument. The article also explains how the framework achieves observability through the gmetric component by adopting an abstract decoupling design, supporting various types of synchronous and asynchronous metrics, aiding developers in handling and extending monitoring functionalities flexibly.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u670D\u52A1\u53EF\u89C2\u6D4B\u6027/\u670D\u52A1\u76D1\u63A7\u544A\u8B66/\u76D1\u63A7\u544A\u8B66-\u57FA\u672C\u4ECB\u7ECD.md","sourceDirName":"docs/\u670D\u52A1\u53EF\u89C2\u6D4B\u6027/\u670D\u52A1\u76D1\u63A7\u544A\u8B66","slug":"/docs/obs/metrics-intro","permalink":"/en/docs/obs/metrics-intro","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u670D\u52A1\u53EF\u89C2\u6D4B\u6027/\u670D\u52A1\u76D1\u63A7\u544A\u8B66/\u76D1\u63A7\u544A\u8B66-\u57FA\u672C\u4ECB\u7ECD.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732451468000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/obs/metrics-intro","title":"Metrics - Intro","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","Monitoring Alerts","OpenTelemetry","Metric Types","Plugin Interface","Metrics Standard","Abstract Decoupling Design","Synchronous Metrics","Asynchronous Metrics"],"description":"The fundamentals of monitoring alerts in the GoFrame framework, focusing on OpenTelemetry\'s design specifications and components related to monitoring and alerting. Covers the relationships and data flow among components like Meter Provider, Meter, and Instrument. The article also explains how the framework achieves observability through the gmetric component by adopting an abstract decoupling design, supporting various types of synchronous and asynchronous metrics, aiding developers in handling and extending monitoring functionalities flexibly."},"sidebar":"mainSidebar","previous":{"title":"Service Metrics","permalink":"/en/docs/obs/metrics"},"next":{"title":"Metrics - Usage","permalink":"/en/docs/obs/metrics-example"}}'),r=t("785893"),i=t("250065");let c={slug:"/docs/obs/metrics-intro",title:"Metrics - Intro",sidebar_position:0,hide_title:!0,keywords:["GoFrame","GoFrame Framework","Monitoring Alerts","OpenTelemetry","Metric Types","Plugin Interface","Metrics Standard","Abstract Decoupling Design","Synchronous Metrics","Asynchronous Metrics"],description:"The fundamentals of monitoring alerts in the GoFrame framework, focusing on OpenTelemetry's design specifications and components related to monitoring and alerting. Covers the relationships and data flow among components like Meter Provider, Meter, and Instrument. The article also explains how the framework achieves observability through the gmetric component by adopting an abstract decoupling design, supporting various types of synchronous and asynchronous metrics, aiding developers in handling and extending monitoring functionalities flexibly."},o=void 0,d={},l=[{value:"OpenTelemetry",id:"opentelemetry",level:2},{value:"Related Components",id:"related-components",level:3},{value:"Meter Provider",id:"meter-provider",level:4},{value:"Meter",id:"meter",level:4},{value:"Instrument",id:"instrument",level:4},{value:"Measurements",id:"measurements",level:4},{value:"View",id:"view",level:4},{value:"Metric Reader",id:"metric-reader",level:4},{value:"Metric Exporter",id:"metric-exporter",level:4},{value:"Related Types",id:"related-types",level:3},{value:"Synchronous Types",id:"synchronous-types",level:4},{value:"Asynchronous Types",id:"asynchronous-types",level:4},{value:"Framework Monitoring Components",id:"framework-monitoring-components",level:2},{value:"Component Abstraction",id:"component-abstraction",level:3},{value:"Metric Types",id:"metric-types",level:3},{value:"Synchronous Types",id:"synchronous-types-1",level:4},{value:"Asynchronous Types",id:"asynchronous-types-1",level:4},{value:"Reference Materials",id:"reference-materials",level:2}];function a(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Before introducing the framework's monitoring alerts, we cannot avoid introducing industry standard observability and the design and specifications of ",(0,r.jsx)(n.code,{children:"OpenTelemetry"})," concerning monitoring alerts. ",(0,r.jsx)(n.code,{children:"OpenTelemetry"})," has a lot of content on this front, and we will highlight some key points."]}),"\n",(0,r.jsx)(n.h2,{id:"opentelemetry",children:"OpenTelemetry"}),"\n",(0,r.jsx)(n.h3,{id:"related-components",children:"Related Components"}),"\n",(0,r.jsxs)(n.p,{children:["Let's look at a diagram showing the relationships between ",(0,r.jsx)(n.code,{children:"OpenTelemetry"})," components. In the implementation of the ",(0,r.jsx)(n.code,{children:"OpenTelemetry Metrics"})," standard, the following components are primarily included."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(427772).Z+"",width:"1596",height:"804"})}),"\n",(0,r.jsx)(n.p,{children:"In the implementation of standardized documentation, each component is typically designed using interfaces to enhance scalability:"}),"\n",(0,r.jsx)(n.h4,{id:"meter-provider",children:"Meter Provider"}),"\n",(0,r.jsxs)(n.p,{children:["Used for interfacing with global management of ",(0,r.jsx)(n.code,{children:"Meter"})," creation, akin to a global monitoring metrics management factory."]}),"\n",(0,r.jsx)(n.h4,{id:"meter",children:"Meter"}),"\n",(0,r.jsxs)(n.p,{children:["Used for interfacing with the creation and management of global ",(0,r.jsx)(n.code,{children:"Instruments"}),". Different ",(0,r.jsx)(n.code,{children:"Meters"})," can be regarded as different program components. For example, various components in a framework can be seen as different ",(0,r.jsx)(n.code,{children:"Meters"}),", like ",(0,r.jsx)(n.code,{children:"gclient"})," and ",(0,r.jsx)(n.code,{children:"ghttp"})," being two different ",(0,r.jsx)(n.code,{children:"Meters"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"instrument",children:"Instrument"}),"\n",(0,r.jsxs)(n.p,{children:["Used to manage the various types of metrics under different components, such as ",(0,r.jsx)(n.code,{children:"http.server.request.duration"}),", ",(0,r.jsx)(n.code,{children:"http.server.request.body_size"}),", etc., under ",(0,r.jsx)(n.code,{children:"ghttp"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"measurements",children:"Measurements"}),"\n",(0,r.jsxs)(n.p,{children:["The specific ",(0,r.jsx)(n.code,{children:"DataPoint"})," metrics data reported for metrics, consisting of a series of numerical items."]}),"\n",(0,r.jsx)(n.h4,{id:"view",children:"View"}),"\n",(0,r.jsxs)(n.p,{children:["Implements operations like calculation, aggregation, filtering, and modification on ",(0,r.jsx)(n.code,{children:"Measurements"}),". Since metrics are usually ",(0,r.jsx)(n.strong,{children:"numerical types"}),", the default ",(0,r.jsx)(n.code,{children:"View"})," is typically used."]}),"\n",(0,r.jsx)(n.h4,{id:"metric-reader",children:"Metric Reader"}),"\n",(0,r.jsxs)(n.p,{children:["Used for implementing data flow readings of metrics and defining specific metric data structures internally. The ",(0,r.jsx)(n.code,{children:"OpenTelemetry"})," community provides various flexible ",(0,r.jsx)(n.code,{children:"Reader"})," implementations, such as ",(0,r.jsx)(n.code,{children:"PeridRader"}),", ",(0,r.jsx)(n.code,{children:"ManualReader"}),", etc."]}),"\n",(0,r.jsx)(n.h4,{id:"metric-exporter",children:"Metric Exporter"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Exporter"})," is used to expose local metrics to corresponding third-party vendors and define whether data transfer is ",(0,r.jsx)(n.code,{children:"push"})," or ",(0,r.jsx)(n.code,{children:"pull"}),". ",(0,r.jsx)(n.code,{children:"Exporter"})," leverages ",(0,r.jsx)(n.code,{children:"Reader"}),", and while there are only several ways for ",(0,r.jsx)(n.code,{children:"Reader"}),", ",(0,r.jsx)(n.code,{children:"Exporter"})," varies by vendor, with many available, such as ",(0,r.jsx)(n.code,{children:"prometheus"}),", ",(0,r.jsx)(n.code,{children:"zipkin"}),", etc."]}),"\n",(0,r.jsxs)(n.p,{children:["The data flow of multiple ",(0,r.jsx)(n.code,{children:"DataPoints"})," for one ",(0,r.jsx)(n.code,{children:"Instrument"})," is shown below:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(243383).Z+"",width:"1600",height:"317"})}),"\n",(0,r.jsx)(n.h3,{id:"related-types",children:"Related Types"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"OpenTelemetry"})," community implementation aims to meet various usage scenarios, hence the detailed granularity of type designs. It includes ",(0,r.jsx)(n.code,{children:"int64"})," and ",(0,r.jsx)(n.code,{children:"float64"})," data types and encompasses both ",(0,r.jsx)(n.strong,{children:"synchronous"})," and ",(0,r.jsx)(n.strong,{children:"asynchronous"})," metric types."]}),"\n",(0,r.jsx)(n.h4,{id:"synchronous-types",children:"Synchronous Types"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Synchronous types"})," are used for promptly exposing monitoring metrics. Regardless of whether the ",(0,r.jsx)(n.code,{children:"metrics reader"})," employs the metric, the calculation results are completed and ready for reading. For example, HTTP request total count and request size must be recorded in the monitoring metrics during the request execution flow, making them suitable for management as synchronous metrics."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Type"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Description"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Example"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Int64Counter"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"int64"})," metrics that only increase."]}),(0,r.jsx)(n.td,{children:"Total request count, total request byte size"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Int64UpDownCounter"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"int64"})," metrics that can increase or decrease."]}),(0,r.jsx)(n.td,{children:"Current active requests, execution queue size"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Float64Counter"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float64"})," metrics that only increase."]}),(0,r.jsx)(n.td,{children:"Total request count, total request byte size"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Float64UpDownCounter"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float64"})," metrics that can increase or decrease."]}),(0,r.jsx)(n.td,{children:"Total request count, total request byte size"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Int64Histogram"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"int64"})," metrics that can be grouped."]}),(0,r.jsxs)(n.td,{children:["Request execution time ",(0,r.jsx)(n.code,{children:"p99"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Float64Histogram"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float64"})," metrics that can be grouped."]}),(0,r.jsxs)(n.td,{children:["Request execution time ",(0,r.jsx)(n.code,{children:"p99"})]})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"asynchronous-types",children:"Asynchronous Types"}),"\n",(0,r.jsxs)(n.p,{children:["Monitoring metrics of ",(0,r.jsx)(n.strong,{children:"asynchronous types"})," execute metric calculation logic only when the ",(0,r.jsx)(n.code,{children:"metrics reader"})," begins using the metric. Asynchronous-type metrics require a callback function that generates metric values, triggering only when the ",(0,r.jsx)(n.code,{children:"metrics reader"})," reads the metric. For examples like machine CPU, memory, and disk usage metrics, if there's no pulling or use by the target end, pre-calculating metric values is meaningless and wastes computing resources, making them suitable for management as asynchronous metrics."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Type"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Description"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Example"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Int64ObservableCouter"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"int64"})," metrics that only increase."]}),(0,r.jsx)(n.td,{children:"CPU, memory, disk usage"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Int64ObservableUpDownCounter"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"int64"})," metrics that can increase or decrease."]}),(0,r.jsx)(n.td,{children:"CPU, memory, disk usage"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Float64ObservableCouter"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float64"})," metrics that only increase."]}),(0,r.jsx)(n.td,{children:"CPU, memory, disk usage"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Float64ObservableUpDownCounter"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float64"})," metrics that can increase or decrease."]}),(0,r.jsx)(n.td,{children:"Current active requests, execution queue size"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Int64ObservableGauge"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"int64"})," metrics that can increase or decrease."]}),(0,r.jsx)(n.td,{children:"CPU, memory, disk usage"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Float64ObservableGauge"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float64"})," metrics that can dynamically increase or decrease."]}),(0,r.jsx)(n.td,{children:"CPU, memory, disk usage"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"framework-monitoring-components",children:"Framework Monitoring Components"}),"\n",(0,r.jsx)(n.h3,{id:"component-abstraction",children:"Component Abstraction"}),"\n",(0,r.jsxs)(n.p,{children:["The framework achieves monitoring capabilities through the ",(0,r.jsx)(n.code,{children:"gmetric"})," component, with its internal component hierarchy design similar to ",(0,r.jsx)(n.code,{children:"OpenTelemetry Metrics"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(108710).Z+"",width:"2264",height:"1188"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"gmetric"})," component employs an ",(0,r.jsx)(n.strong,{children:"abstract decoupling design"}),", partly because the framework aims to reduce external dependencies and partly to achieve automatic switching of monitoring capabilities. By default, the component uses an implementation object of ",(0,r.jsx)(n.code,{children:"NoopPerform"}),", where monitoring capabilities are disabled; they automatically enable once a monitoring interface implementation is introduced."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(627200).Z+"",width:"2188",height:"1158"})}),"\n",(0,r.jsx)(n.h3,{id:"metric-types",children:"Metric Types"}),"\n",(0,r.jsxs)(n.p,{children:["The metric types provided by the framework simplify by removing the ",(0,r.jsx)(n.code,{children:"int64"})," numerical type in contrast to ",(0,r.jsx)(n.code,{children:"OpenTelemetry"}),", using a unified ",(0,r.jsx)(n.code,{children:"float64"})," numerical type. However, it is crucial for developers to ",(0,r.jsx)(n.strong,{children:"avoid designing values as decimals to prevent precision issues"}),". This is particularly vital in ",(0,r.jsx)(n.code,{children:"Histogram"})," type ",(0,r.jsx)(n.code,{children:"Buckets"})," design, where using decimals is not recommended."]}),"\n",(0,r.jsx)(n.h4,{id:"synchronous-types-1",children:"Synchronous Types"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Type"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Description"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Example"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Counter"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float64"})," metrics that only increase."]}),(0,r.jsx)(n.td,{children:"Total request count, total request byte size"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"UpDownCounter"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float64"})," metrics that can increase or decrease."]}),(0,r.jsx)(n.td,{children:"Total request count, total request byte size"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Histogram"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float64"})," metrics that can be grouped."]}),(0,r.jsxs)(n.td,{children:["Request execution time ",(0,r.jsx)(n.code,{children:"p99"})]})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"asynchronous-types-1",children:"Asynchronous Types"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Type"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Description"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Example"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ObservableCounter"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float64"})," metrics that only increase."]}),(0,r.jsx)(n.td,{children:"Total request count, total request byte size"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ObservableUpDownCounter"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float64"})," metrics that can increase or decrease."]}),(0,r.jsx)(n.td,{children:"Total request count, total request byte size"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ObservableGauge"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float64"})," metric that can dynamically increase or decrease."]}),(0,r.jsx)(n.td,{children:"CPU, memory, disk usage"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"reference-materials",children:"Reference Materials"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/prometheus/client_golang%20%22https://github.com/prometheus/client_golang%22",children:"https://github.com/prometheus/client_golang"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/open-telemetry/opentelemetry-go-contrib%20%22https://github.com/open-telemetry/opentelemetry-go-contrib%22",children:"https://github.com/open-telemetry/opentelemetry-go-contrib"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://opentelemetry.io/docs/specs/otel/metrics/api/%20%22https://opentelemetry.io/docs/specs/otel/metrics/api/%22",children:"https://opentelemetry.io/docs/specs/otel/metrics/api/"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://opentelemetry.io/docs/specs/otel/metrics/data-model%20%22https://opentelemetry.io/docs/specs/otel/metrics/data-model%22",children:"https://opentelemetry.io/docs/specs/otel/metrics/data-model"})}),"\n"]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},243383:function(e,n,t){t.d(n,{Z:function(){return s}});let s=t.p+"assets/images/5d476c4969a41f996ac8c39a6d841f81-5e8613efc6f4ff59360078ee3f424969.png"},627200:function(e,n,t){t.d(n,{Z:function(){return s}});let s=t.p+"assets/images/99374a3d9b7e4805c5c7c0bd3fefb221-da167af957d080c46339738b2e27375f.png"},108710:function(e,n,t){t.d(n,{Z:function(){return s}});let s=t.p+"assets/images/a1f33528941fcf91e87b87aa8c0219cd-ae41f69a59c0dc0e1c004f5b69e60fc5.png"},427772:function(e,n,t){t.d(n,{Z:function(){return s}});let s=t.p+"assets/images/f7c048b9050aa8d6c17f85e1dc1c0540-d6f63afe045891686e20a550f648cda4.png"},250065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return c}});var s=t(667294);let r={},i=s.createContext(r);function c(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);