"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["78210"],{950051:function(e,n,i){i.r(n),i.d(n,{metadata:()=>t,contentTitle:()=>d,default:()=>l,assets:()=>r,toc:()=>o,frontMatter:()=>a});var t=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u7F13\u5B58\u7BA1\u7406/\u7F13\u5B58\u7BA1\u7406-Redis\u7F13\u5B58","title":"Caching - Redis","description":"The cache management module in the GoFrame framework focuses on the implementation and usage of the Redis cache adapter. It provides examples on ensuring data consistency in multi-node environments. Detailed steps on setting up Redis clients and using Redis cache adapters are given, and the operation notes for Clear and Size methods in multi-object connections are discussed. It is also recommended to configure independent Redis DBs for different business scenarios.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u7F13\u5B58\u7BA1\u7406/\u7F13\u5B58\u7BA1\u7406-Redis\u7F13\u5B58.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u7F13\u5B58\u7BA1\u7406","slug":"/docs/core/gcache-redis","permalink":"/en/docs/core/gcache-redis","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u7F13\u5B58\u7BA1\u7406/\u7F13\u5B58\u7BA1\u7406-Redis\u7F13\u5B58.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":2,"frontMatter":{"slug":"/docs/core/gcache-redis","title":"Caching - Redis","sidebar_position":2,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","Cache Management","Redis Cache","gcache","Redis Adapter","Session Sharing","Database Query Cache","Redis DB","Cache Object"],"description":"The cache management module in the GoFrame framework focuses on the implementation and usage of the Redis cache adapter. It provides examples on ensuring data consistency in multi-node environments. Detailed steps on setting up Redis clients and using Redis cache adapters are given, and the operation notes for Clear and Size methods in multi-object connections are discussed. It is also recommended to configure independent Redis DBs for different business scenarios."},"sidebar":"mainSidebar","previous":{"title":"Caching - In-Memory","permalink":"/en/docs/core/gcache-memory"},"next":{"title":"Caching - Methods","permalink":"/en/docs/core/gcache-funcs"}}'),s=i("785893"),c=i("250065");let a={slug:"/docs/core/gcache-redis",title:"Caching - Redis",sidebar_position:2,hide_title:!0,keywords:["GoFrame","GoFrame Framework","Cache Management","Redis Cache","gcache","Redis Adapter","Session Sharing","Database Query Cache","Redis DB","Cache Object"],description:"The cache management module in the GoFrame framework focuses on the implementation and usage of the Redis cache adapter. It provides examples on ensuring data consistency in multi-node environments. Detailed steps on setting up Redis clients and using Redis cache adapters are given, and the operation notes for Clear and Size methods in multi-object connections are discussed. It is also recommended to configure independent Redis DBs for different business scenarios."},d=void 0,r={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Notes",id:"notes",level:2},{value:"On <code>Clear/Size</code> Methods",id:"on-clearsize-methods",level:3},{value:"It is recommended to use different <code>redis db</code> to differentiate business cache types",id:"it-is-recommended-to-use-different-redis-db-to-differentiate-business-cache-types",level:3}];function h(e){let n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.p,{children:["The cache component provides a ",(0,s.jsx)(n.code,{children:"Redis"})," cache adapter implementation for ",(0,s.jsx)(n.code,{children:"gcache"}),". ",(0,s.jsx)(n.code,{children:"Redis"})," cache is very useful in ensuring data consistency in multi-node environments, especially in scenarios such as ",(0,s.jsx)(n.code,{children:"Session"})," sharing and database query caching."]}),"\n",(0,s.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'func ExampleCache_SetAdapter() {\n    var (\n        err         error\n        ctx         = gctx.New()\n        cache       = gcache.New()\n        redisConfig = &gredis.Config{\n            Address: "127.0.0.1:6379",\n            Db:      9,\n        }\n        cacheKey   = `key`\n        cacheValue = `value`\n    )\n    // Create redis client object.\n    redis, err := gredis.New(redisConfig)\n    if err != nil {\n        panic(err)\n    }\n    // Create redis cache adapter and set it to cache object.\n    cache.SetAdapter(gcache.NewAdapterRedis(redis))\n\n    // Set and Get using cache object.\n    err = cache.Set(ctx, cacheKey, cacheValue, time.Second)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(cache.MustGet(ctx, cacheKey).String())\n\n    // Get using redis client.\n    fmt.Println(redis.MustDo(ctx, "GET", cacheKey).String())\n\n    // Output:\n    // value\n    // value\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,s.jsxs)(n.h3,{id:"on-clearsize-methods",children:["On ",(0,s.jsx)(n.code,{children:"Clear/Size"})," Methods"]}),"\n",(0,s.jsxs)(n.p,{children:["First, the same ",(0,s.jsx)(n.code,{children:"gredis.Config"})," will always connect to the same ",(0,s.jsx)(n.code,{children:"redis db"}),", and since ",(0,s.jsx)(n.code,{children:"Redis"})," itself doesn't have data grouping features, when multiple ",(0,s.jsx)(n.code,{children:"gcache.Cache"})," objects connect to the same ",(0,s.jsx)(n.code,{children:"redis db"}),", they will share the entire ",(0,s.jsx)(n.code,{children:"redis db"})," rather than having a separate group to store the current ",(0,s.jsx)(n.code,{children:"gcache.Cache"})," object's content. Therefore, operations like ",(0,s.jsx)(n.code,{children:"Clear"})," and ",(0,s.jsx)(n.code,{children:"Size"})," will act on the entire ",(0,s.jsx)(n.code,{children:"redis db"})," instead of just the content in the current ",(0,s.jsx)(n.code,{children:"gcache.Cache"})," object as with in-memory caches, which can be counterintuitive, so please use with caution."]}),"\n",(0,s.jsxs)(n.h3,{id:"it-is-recommended-to-use-different-redis-db-to-differentiate-business-cache-types",children:["It is recommended to use different ",(0,s.jsx)(n.code,{children:"redis db"})," to differentiate business cache types"]}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, it is recommended to configure different ",(0,s.jsx)(n.code,{children:"db"})," for usage when using ",(0,s.jsx)(n.code,{children:"Redis"})," cache, rather than sharing a ",(0,s.jsx)(n.code,{children:"db"})," with other business data."]})]})}function l(e={}){let{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},250065:function(e,n,i){i.d(n,{Z:function(){return d},a:function(){return a}});var t=i(667294);let s={},c=t.createContext(s);function a(e){let n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);