"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["71933"],{324866:function(e,n,t){t.r(n),t.d(n,{metadata:()=>s,contentTitle:()=>i,default:()=>l,assets:()=>c,toc:()=>d,frontMatter:()=>o});var s=JSON.parse('{"id":"docs/WEB\u670D\u52A1\u5F00\u53D1/\u9AD8\u7EA7\u7279\u6027/\u81EA\u5B9A\u4E49\u72B6\u6001\u7801\u5904\u7406","title":"Status Code Handling","description":"Implement custom status code handling in the GoFrame framework. By using the BindStatusHandler method, developers can customize handling for specified status codes such as 404, 403, 500 for a WebServer, including displaying custom error messages or page content, and implementing error page redirection. Sample code demonstrates basic settings and batch status code handling.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/WEB\u670D\u52A1\u5F00\u53D1/\u9AD8\u7EA7\u7279\u6027/\u81EA\u5B9A\u4E49\u72B6\u6001\u7801\u5904\u7406.md","sourceDirName":"docs/WEB\u670D\u52A1\u5F00\u53D1/\u9AD8\u7EA7\u7279\u6027","slug":"/docs/web/senior-status-handler","permalink":"/en/docs/web/senior-status-handler","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/WEB\u670D\u52A1\u5F00\u53D1/\u9AD8\u7EA7\u7279\u6027/\u81EA\u5B9A\u4E49\u72B6\u6001\u7801\u5904\u7406.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732451468000,"sidebarPosition":8,"frontMatter":{"slug":"/docs/web/senior-status-handler","title":"Status Code Handling","sidebar_position":8,"hide_title":true,"keywords":["GoFrame","GoFrame framework","status code handling","custom status codes","WebServer","error page","page redirect","status code callback","r.RedirectTo","BindStatusHandler"],"description":"Implement custom status code handling in the GoFrame framework. By using the BindStatusHandler method, developers can customize handling for specified status codes such as 404, 403, 500 for a WebServer, including displaying custom error messages or page content, and implementing error page redirection. Sample code demonstrates basic settings and batch status code handling."},"sidebar":"mainSidebar","previous":{"title":"WebSocket","permalink":"/en/docs/web/senior-websocket"},"next":{"title":"PProf Performance Analysis","permalink":"/en/docs/web/senior-pprof"}}'),r=t("785893"),a=t("250065");let o={slug:"/docs/web/senior-status-handler",title:"Status Code Handling",sidebar_position:8,hide_title:!0,keywords:["GoFrame","GoFrame framework","status code handling","custom status codes","WebServer","error page","page redirect","status code callback","r.RedirectTo","BindStatusHandler"],description:"Implement custom status code handling in the GoFrame framework. By using the BindStatusHandler method, developers can customize handling for specified status codes such as 404, 403, 500 for a WebServer, including displaying custom error messages or page content, and implementing error page redirection. Sample code demonstrates basic settings and batch status code handling."},i=void 0,c={},d=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Batch Settings",id:"batch-settings",level:2},{value:"Precautions",id:"precautions",level:2}];function u(e){let n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["We can customize the handling of status codes specified by WebServer, for example, for common errors like ",(0,r.jsx)(n.code,{children:"404/403/500"}),", we can display custom error messages, page content, or redirect to a specific page."]}),"\n",(0,r.jsx)(n.p,{children:"The related methods are as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (s *Server) BindStatusHandler(status int, handler HandlerFunc)\nfunc (s *Server) BindStatusHandlerByMap(handlerMap map[int]HandlerFunc)\n\nfunc (d *Domain) BindStatusHandler(status int, handler HandlerFunc)\nfunc (d *Domain) BindStatusHandlerByMap(handlerMap map[int]HandlerFunc)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["As we can see, we can use ",(0,r.jsx)(n.code,{children:"BindStatusHandler"})," or ",(0,r.jsx)(n.code,{children:"BindStatusHandlerByMap"})," to implement custom callback handling for specified status codes, and this feature also supports binding to specific domain names. Let's look at a few simple examples."]}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\nfunc main() {\n    s := g.Server()\n    s.BindHandler("/", func(r *ghttp.Request){\n        r.Response.Writeln("halo world!")\n    })\n    s.BindStatusHandler(404, func(r *ghttp.Request){\n        r.Response.Writeln("This is customized 404 page")\n    })\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["After execution, when we visit an unbound route page, such as ",(0,r.jsx)(n.a,{href:"http://127.0.0.1:8199/test",children:"http://127.0.0.1:8199/test"}),", we can see the page shows our expected return result: ",(0,r.jsx)(n.code,{children:"This is customized 404 page"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Moreover, the common way of handling web page request error status codes is to guide users to a specific error page. Therefore, in the status code callback handling function, we can use the ",(0,r.jsx)(n.code,{children:"r.RedirectTo"})," method to perform page redirection, as shown in the following example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\nfunc main() {\n    s := g.Server()\n    s.BindHandler("/status/:status", func(r *ghttp.Request) {\n        r.Response.Write("woops, status ", r.Get("status"), " found")\n    })\n    s.BindStatusHandler(404, func(r *ghttp.Request){\n        r.Response.RedirectTo("/status/404")\n    })\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["After execution, when we manually access a non-existent page through the browser, such as ",(0,r.jsx)(n.a,{href:"http://127.0.0.1:8199/test",children:"http://127.0.0.1:8199/test"}),", we can see the page is redirected to ",(0,r.jsx)(n.a,{href:"http://127.0.0.1:8199/status/404",children:"http://127.0.0.1:8199/status/404"}),", and the page returns the content: ",(0,r.jsx)(n.code,{children:"woops, status 404 found"})]}),"\n",(0,r.jsx)(n.h2,{id:"batch-settings",children:"Batch Settings"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\nfunc main() {\n    s := g.Server()\n    s.BindStatusHandlerByMap(map[int]ghttp.HandlerFunc {\n        403 : func(r *ghttp.Request){r.Response.Writeln("403")},\n        404 : func(r *ghttp.Request){r.Response.Writeln("404")},\n        500 : func(r *ghttp.Request){r.Response.Writeln("500")},\n    })\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["As we can see, we can use the ",(0,r.jsx)(n.code,{children:"BindStatusHandlerByMap"})," method for batch settings of custom status codes. After the example program is executed, when the service API returns status codes ",(0,r.jsx)(n.code,{children:"403/404/500"}),", the API will return the corresponding status code number."]}),"\n",(0,r.jsx)(n.h2,{id:"precautions",children:"Precautions"}),"\n",(0,r.jsxs)(n.p,{children:["If content output is involved in custom status code handling methods, it's often necessary to use ",(0,r.jsx)(n.code,{children:"r.Response.ClearBuffer()"})," to clear the original buffered output content."]})]})}function l(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return i},a:function(){return o}});var s=t(667294);let r={},a=s.createContext(r);function o(e){let n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);