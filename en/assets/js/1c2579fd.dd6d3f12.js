"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["83935"],{612645:function(e,n,t){t.r(n),t.d(n,{metadata:()=>o,contentTitle:()=>r,default:()=>m,assets:()=>l,toc:()=>c,frontMatter:()=>a});var o=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6A21\u677F\u5F15\u64CE/\u6A21\u677F\u5F15\u64CE-\u6A21\u677F\u51FD\u6570/\u6A21\u677F\u51FD\u6570-\u81EA\u5B9A\u4E49\u51FD\u6570","title":"Template Funcs - Custom","description":"In the GoFrame framework, developers can define custom template functions and globally bind them to specified view objects. Additionally, custom objects can be assigned to templates, allowing method calls on these objects. The sample code demonstrates how to define and bind template functions, and how to pass parameters for template parsing in both regular and pipeline ways.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6A21\u677F\u5F15\u64CE/\u6A21\u677F\u5F15\u64CE-\u6A21\u677F\u51FD\u6570/\u6A21\u677F\u51FD\u6570-\u81EA\u5B9A\u4E49\u51FD\u6570.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6A21\u677F\u5F15\u64CE/\u6A21\u677F\u5F15\u64CE-\u6A21\u677F\u51FD\u6570","slug":"/docs/core/gview-funcs-custom","permalink":"/en/docs/core/gview-funcs-custom","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6A21\u677F\u5F15\u64CE/\u6A21\u677F\u5F15\u64CE-\u6A21\u677F\u51FD\u6570/\u6A21\u677F\u51FD\u6570-\u81EA\u5B9A\u4E49\u51FD\u6570.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":2,"frontMatter":{"slug":"/docs/core/gview-funcs-custom","title":"Template Funcs - Custom","sidebar_position":2,"hide_title":true,"keywords":["GoFrame","GoFrame framework","template functions","custom functions","view object","global binding","object assignment","method invocation","pipeline argument passing","template parsing"],"description":"In the GoFrame framework, developers can define custom template functions and globally bind them to specified view objects. Additionally, custom objects can be assigned to templates, allowing method calls on these objects. The sample code demonstrates how to define and bind template functions, and how to pass parameters for template parsing in both regular and pipeline ways."},"sidebar":"mainSidebar","previous":{"title":"Template Funcs - Built-In","permalink":"/en/docs/core/gview-funcs-builtin"},"next":{"title":"I18N","permalink":"/en/docs/core/gi18n"}}'),i=t("785893"),s=t("250065");let a={slug:"/docs/core/gview-funcs-custom",title:"Template Funcs - Custom",sidebar_position:2,hide_title:!0,keywords:["GoFrame","GoFrame framework","template functions","custom functions","view object","global binding","object assignment","method invocation","pipeline argument passing","template parsing"],description:"In the GoFrame framework, developers can define custom template functions and globally bind them to specified view objects. Additionally, custom objects can be assigned to templates, allowing method calls on these objects. The sample code demonstrates how to define and bind template functions, and how to pass parameters for template parsing in both regular and pipeline ways."},r=void 0,l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Example",id:"example",level:2}];function d(e){let n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Developers can define custom template functions and globally bind them to specified view objects."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Custom objects can also be assigned to templates, allowing method calls on those objects."})}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\n// Test built-in function with parameters\nfunc funcHello(name string) string {\n    return fmt.Sprintf(`Hello %s`, name)\n}\n\nfunc main() {\n    // Bind global template function\n    g.View().BindFunc("hello", funcHello)\n\n    // Pass parameters in a regular way\n    parsed1, err := g.View().ParseContent(context.TODO(), `{{hello "GoFrame"}}`, nil)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(parsed1))\n\n    // Pass parameters through a pipeline\n    parsed2, err := g.View().ParseContent(context.TODO(), `{{"GoFrame" | hello}}`, nil)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(parsed2))\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"After execution, the output is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Hello GoFrame\nHello GoFrame\n"})})]})}function m(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return r},a:function(){return a}});var o=t(667294);let i={},s=o.createContext(i);function a(e){let n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);