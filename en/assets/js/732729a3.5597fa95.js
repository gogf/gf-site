"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["8213"],{598665:function(e,n,i){i.r(n),i.d(n,{metadata:()=>r,contentTitle:()=>l,default:()=>c,assets:()=>d,toc:()=>o,frontMatter:()=>s});var r=JSON.parse('{"id":"course/starbook/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u6CE8\u518C/2.4.\u4E1A\u52A1\u4F18\u5316","title":"2.4 Business Optimization","description":"Problems and optimization solutions in the registration process, including interface parameter validation, prohibiting duplicate usernames, password encryption methods, and function parameter optimization. Use the GoFrame framework for parameter validation, including basic username and password verification, and implement multilingual support with i18n. By setting unique database indexes, ensure user uniqueness and use MD5 encryption to protect password security, enhancing system security and usability.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/course/starbook/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u6CE8\u518C/2.4.\u4E1A\u52A1\u4F18\u5316.md","sourceDirName":"course/starbook/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u6CE8\u518C","slug":"/course/starbook/register-optimization","permalink":"/en/course/starbook/register-optimization","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/course/starbook/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u6CE8\u518C/2.4.\u4E1A\u52A1\u4F18\u5316.md","tags":[],"version":"current","lastUpdatedBy":"oldme","lastUpdatedAt":1735822233000,"frontMatter":{"title":"2.4 Business Optimization","hide_title":true,"slug":"/course/starbook/register-optimization","keywords":["registration process optimization","interface parameter validation","username validation","password encryption","GoFrame framework","i18n multilingual","data uniqueness","structure optimization","validation rules","password security"],"description":"Problems and optimization solutions in the registration process, including interface parameter validation, prohibiting duplicate usernames, password encryption methods, and function parameter optimization. Use the GoFrame framework for parameter validation, including basic username and password verification, and implement multilingual support with i18n. By setting unique database indexes, ensure user uniqueness and use MD5 encryption to protect password security, enhancing system security and usability."},"sidebar":"courseStarBookSidebar","previous":{"title":"2.3 Registration API","permalink":"/en/course/starbook/register-general"},"next":{"title":"2.5 API Documentation","permalink":"/en/course/starbook/register-api-doc"}}'),a=i("785893"),t=i("250065");let s={title:"2.4 Business Optimization",hide_title:!0,slug:"/course/starbook/register-optimization",keywords:["registration process optimization","interface parameter validation","username validation","password encryption","GoFrame framework","i18n multilingual","data uniqueness","structure optimization","validation rules","password security"],description:"Problems and optimization solutions in the registration process, including interface parameter validation, prohibiting duplicate usernames, password encryption methods, and function parameter optimization. Use the GoFrame framework for parameter validation, including basic username and password verification, and implement multilingual support with i18n. By setting unique database indexes, ensure user uniqueness and use MD5 encryption to protect password security, enhancing system security and usability."},l=void 0,d={},o=[{value:"Parameter Validation",id:"parameter-validation",level:2},{value:"Parameter Validation i18n",id:"parameter-validation-i18n",level:3},{value:"Prevent Duplicate Usernames",id:"prevent-duplicate-usernames",level:2},{value:"Password Encryption",id:"password-encryption",level:2},{value:"Register Function Optimization",id:"register-function-optimization",level:2}];function u(e){let n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"There are several significant issues that need to be optimized in the current registration process:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Interface parameters are not validated, meaning entries with empty or random values can be successfully stored. Therefore, username, password, and email should be required, with a certain level of security verification. For example, passwords should be between ",(0,a.jsx)(n.code,{children:"6-12"})," characters, and emails should follow the ",(0,a.jsx)(n.code,{children:"xx@xx.xx"})," format;"]}),"\n",(0,a.jsx)(n.li,{children:"Prohibiting the registration of identical users;"}),"\n",(0,a.jsx)(n.li,{children:"Passwords should not be stored in plain text but should be encrypted before storage;"}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"logic/Register"})," function has too many parameters, which is neither elegant nor maintainable. User information should be defined in a structure and used as a function parameter."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"parameter-validation",children:"Parameter Validation"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"GoFrame"})," has built-in powerful interface parameter validation features, which can be enabled by adding ",(0,a.jsx)(n.code,{children:"v"})," to the ",(0,a.jsx)(n.code,{children:"g.Meta"})," tag."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"api/users/v1/users.go"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package v1  \n  \nimport "github.com/gogf/gf/v2/frame/g"  \n  \ntype RegisterReq struct {  \n    g.Meta   `path:"users/register" method:"post"`  \n    Username string `json:"username" v:"required|length:3,12"`  \n    Password string `json:"password" v:"required|length:6,16"`  \n    Email    string `json:"email" v:"required|email"`  \n}  \n  \ntype RegisterRes struct {  \n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Multiple validation rules are separated by ",(0,a.jsx)(n.code,{children:"|"}),", ",(0,a.jsx)(n.code,{children:"required"})," indicates the field is mandatory, ",(0,a.jsx)(n.code,{children:"length"})," indicates the length is between ",(0,a.jsx)(n.code,{children:"3-12"}),", and ",(0,a.jsx)(n.code,{children:"email"})," indicates only valid email addresses are accepted. Available validation rules can be found in the ",(0,a.jsx)(n.a,{href:"/en/docs/core/gvalid-rules",children:"Developer's Manual"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Testing with an empty username request:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'$ curl -X POST http://127.0.0.1:8000/v1/users/register -H "Content-Type: application/json" -d "{\\"password\\":\\"123456\\", \\"email\\":\\"tyyn1022@gmail.com\\"}"\n\n{\n    "code":51,\n    "message":"The Username field is required",\n    "data":null\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"The Username field is required"})," indicates that the username cannot be empty."]}),"\n",(0,a.jsx)(n.p,{children:"If you are not satisfied with the English prompt, you can use the i18n component provided by the framework to change it to a Chinese prompt."}),"\n",(0,a.jsx)(n.h3,{id:"parameter-validation-i18n",children:"Parameter Validation i18n"}),"\n",(0,a.jsxs)(n.p,{children:["Download the file from ",(0,a.jsx)(n.a,{href:"https://github.com/gogf/gf/blob/master/util/gvalid/testdata/i18n/cn/validation.toml",children:"Github"})," and store it in the ",(0,a.jsx)(n.code,{children:"manifest/i18n"})," directory, or simply copy it from below."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"manifest/i18n/zh-CN/validation.toml"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'"gf.gvalid.rule.required"             = "{field} field cannot be empty"\n"gf.gvalid.rule.required-if"          = "{field} field cannot be empty"\n"gf.gvalid.rule.required-unless"      = "{field} field cannot be empty"\n"gf.gvalid.rule.required-with"        = "{field} field cannot be empty"\n"gf.gvalid.rule.required-with-all"    = "{field} field cannot be empty"\n"gf.gvalid.rule.required-without"     = "{field} field cannot be empty"\n"gf.gvalid.rule.required-without-all" = "{field} field cannot be empty"\n"gf.gvalid.rule.date"                 = "{field} field value `{value}` does not match date format Y-m-d, e.g.: 2001-02-03"\n"gf.gvalid.rule.datetime"             = "{field} field value `{value}` does not match datetime format Y-m-d H:i:s, e.g.: 2001-02-03 12:00:00"\n"gf.gvalid.rule.date-format"          = "{field} field value `{value}` does not match the specified format {format}"\n"gf.gvalid.rule.email"                = "{field} field value `{value}` is not a valid email address format"\n"gf.gvalid.rule.phone"                = "{field} field value `{value}` is not a valid phone number format"\n"gf.gvalid.rule.phone-loose"          = "{field} field value `{value}` is not a valid phone number format"\n"gf.gvalid.rule.telephone"            = "{field} field value `{value}` is not a valid telephone number format"\n"gf.gvalid.rule.passport"             = "{field} field value `{value}` is not a valid account format, must start with a letter and can only contain letters, numbers, and underscores, with a length of 6~18"\n"gf.gvalid.rule.password"             = "{field} field value `{value}` is not a valid password format, must be any visible character of length 6-18"\n"gf.gvalid.rule.password2"            = "{field} field value `{value}` is not a valid password format, must be any visible character of length 6-18, containing uppercase and lowercase letters and numbers"\n"gf.gvalid.rule.password3"            = "{field} field value `{value}` is not a valid password format, must be any visible character of length 6-18, containing uppercase and lowercase letters, numbers, and special characters"\n"gf.gvalid.rule.postcode"             = "{field} field value `{value}` is not a valid postal code"\n"gf.gvalid.rule.resident-id"          = "{field} field value `{value}` is not a valid resident ID number format"\n"gf.gvalid.rule.bank-card"            = "{field} field value `{value}` is not a valid bank card number format"\n"gf.gvalid.rule.qq"                   = "{field} field value `{value}` is not a valid QQ number format"\n"gf.gvalid.rule.ip"                   = "{field} field value `{value}` is not a valid IP address format"\n"gf.gvalid.rule.ipv4"                 = "{field} field value `{value}` is not a valid IPv4 address format"\n"gf.gvalid.rule.ipv6"                 = "{field} field value `{value}` is not a valid IPv6 address format"\n"gf.gvalid.rule.mac"                  = "{field} field value `{value}` is not a valid MAC address format"\n"gf.gvalid.rule.url"                  = "{field} field value `{value}` is not a valid URL format"\n"gf.gvalid.rule.domain"               = "{field} field value `{value}` is not a valid domain format"\n"gf.gvalid.rule.length"               = "{field} field value `{value}` length should be between {min} and {max} characters"\n"gf.gvalid.rule.min-length"           = "{field} field value `{value}` minimum length should be {min}"\n"gf.gvalid.rule.max-length"           = "{field} field value `{value}` maximum length should be {max}"\n"gf.gvalid.rule.size"                 = "{field} field value `{value}` length must be {size}"\n"gf.gvalid.rule.between"              = "{field} field value `{value}` size should be between {min} and {max}"\n"gf.gvalid.rule.min"                  = "{field} field value `{value}` minimum value should be {min}"\n"gf.gvalid.rule.max"                  = "{field} field value `{value}` maximum value should be {max}"\n"gf.gvalid.rule.json"                 = "{field} field value `{value}` should be in JSON format"\n"gf.gvalid.rule.xml"                  = "{field} field value `{value}` should be in XML format"\n"gf.gvalid.rule.array"                = "{field} field value `{value}` should be an array"\n"gf.gvalid.rule.integer"              = "{field} field value `{value}` should be an integer"\n"gf.gvalid.rule.float"                = "{field} field value `{value}` should be a float"\n"gf.gvalid.rule.boolean"              = "{field} field value `{value}` should be a boolean"\n"gf.gvalid.rule.same"                 = "{field} field value `{value}` must be the same as {field}"\n"gf.gvalid.rule.different"            = "{field} field value `{value}` cannot be the same as {field}"\n"gf.gvalid.rule.in"                   = "{field} field value `{value}` should be within the range: {pattern}"\n"gf.gvalid.rule.not-in"               = "{field} field value `{value}` should not be within the range: {pattern}"\n"gf.gvalid.rule.regex"                = "{field} field value `{value}` does not match the rule: {pattern}"\n"gf.gvalid.rule.__default__"          = "{field} field value `{value}` is not valid"\n"CustomMessage"                       = "Custom Error"\n"project id must between {min}, {max}"  = "Project ID must be greater than or equal to {min} and less than or equal to {max}"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Modify the main function to enable ",(0,a.jsx)(n.code,{children:"i18n"}),":"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"main.go"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main  \n  \n\xb7\xb7\xb7\n\nfunc main() {  \n    var err error  \n  \n    // Globally set i18n  \n    g.I18n().SetLanguage("zh-CN")  \n  \n    // Check if the database can be connected  \n    err = connDb()  \n    if err != nil {  \n       panic(err)  \n    }  \n  \n    cmd.Main.Run(gctx.GetInitCtx())  \n}  \n\n\xb7\xb7\xb7\n'})}),"\n",(0,a.jsx)(n.p,{children:"Make another request:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'$ curl -X POST http://127.0.0.1:8000/v1/users/register -H "Content-Type: application/json" -d "{\\"password\\":\\"123456\\", \\"email\\":\\"tyyn1022@gmail.com\\"}"\n\n{\n    "code":51,\n    "message":"Username field cannot be empty",\n    "data":null\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can see that the ",(0,a.jsx)(n.code,{children:"message"})," has been changed to a Chinese prompt."]}),"\n",(0,a.jsx)(n.h2,{id:"prevent-duplicate-usernames",children:"Prevent Duplicate Usernames"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"Usernames are an important basis for login. If there are two users with the same name in the system, it will cause major logical confusion. Therefore, we need to check if the user exists before data is stored. If it exists, return an error message indicating that the user already exists."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"internal/logic/users/register.go"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package users  \n  \n...\n  \nfunc (u *Users) Register(ctx context.Context, username, password, email string) error {  \n    if err := u.checkUser(ctx, username); err != nil {  \n       return err  \n    }  \n  \n    _, err := dao.Users.Ctx(ctx).Data(do.Users{  \n       Username: username,  \n       Password: password,  \n       Email:    email,  \n    }).Insert()  \n    if err != nil {  \n       return err  \n    }  \n    return nil  \n}  \n  \nfunc (u *Users) checkUser(ctx context.Context, username string) error {  \n    count, err := dao.Users.Ctx(ctx).Where("username", username).Count()  \n    if err != nil {  \n       return err  \n    }  \n    if count > 0 {  \n       return gerror.New("User already exists")  \n    }  \n    return nil  \n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Test the request result:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'$ curl -X POST http://127.0.0.1:8000/v1/users/register -H "Content-Type: application/json" -d "{\\"username\\":\\"oldme\\", \\"password\\":\\"123456\\", \\"email\\":\\"tyyn1022@gmail.com\\"}"\n\n{\n    "code":50,\n    "message":"User already exists",\n    "data":null\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Code detection alone is not sufficient for security. We can add a unique index in the data table to enforce user uniqueness."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE users ADD UNIQUE (username);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"password-encryption",children:"Password Encryption"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:["Saving passwords in plain text is very insecure. A common practice is to perform a ",(0,a.jsx)(n.code,{children:"hash"})," calculation before saving to the database, such as ",(0,a.jsx)(n.code,{children:"md5"})," or ",(0,a.jsx)(n.code,{children:"SHA-1"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Add a new function ",(0,a.jsx)(n.code,{children:"encryptPassword"})," to implement password encryption functionality."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"internal/logic/users/utility.go"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package users  \n  \nimport "github.com/gogf/gf/v2/crypto/gmd5"  \n  \nfunc encryptPassword(password string) string {  \n    return gmd5.MustEncryptString(password)  \n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"gmd5"})," component helps us quickly implement ",(0,a.jsx)(n.code,{children:"md5"})," encryption functionality. Write registration logic code and introduce password encryption."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"internal/logic/users/register.go"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"package users  \n  \n...\n  \nfunc (u *Users) Register(ctx context.Context, username, password, email string) error {  \n    ...\n  \n    _, err := dao.Users.Ctx(ctx).Data(do.Users{  \n       Username: username,  \n       Password: encryptPassword(password),  \n       Email:    email,  \n    }).Insert()  \n    if err != nil {  \n       return err  \n    }  \n    return nil  \n}  \n\n...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Delete the original user:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"DELETE FROM users WHERE id = 1;\n"})}),"\n",(0,a.jsx)(n.p,{children:"Request the interface again to see if the password is successfully encrypted:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://127.0.0.1:8000/v1/users/register -H "Content-Type: application/json" -d "{\\"username\\":\\"oldme\\", \\"password\\":\\"123456\\", \\"email\\":\\"tyyn1022@gmail.com\\"}"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Result:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"ID"}),(0,a.jsx)(n.th,{children:"Username"}),(0,a.jsx)(n.th,{children:"Password"}),(0,a.jsx)(n.th,{children:"Email"}),(0,a.jsx)(n.th,{children:"Created_At"}),(0,a.jsx)(n.th,{children:"Updated_At"})]})}),(0,a.jsx)(n.tbody,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"1"}),(0,a.jsx)(n.td,{children:"oldme"}),(0,a.jsx)(n.td,{children:"e10adc3949ba59abbe56e057f20f883e"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"mailto:tyyn1022@gmail.com",children:"tyyn1022@gmail.com"})}),(0,a.jsx)(n.td,{children:"2024-11-08 10:36:48"}),(0,a.jsx)(n.td,{children:"2024-11-08 10:36:48"})]})})]}),"\n",(0,a.jsx)(n.h2,{id:"register-function-optimization",children:"Register Function Optimization"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:["Customize a data model in the ",(0,a.jsx)(n.code,{children:"model"})," layer for use as input parameters in the ",(0,a.jsx)(n.code,{children:"Logic"})," layer."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"internal/model/users.go"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"package model  \n  \ntype RegisterInput struct {  \n    Username string  \n    Password string  \n    Email    string  \n}\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"internal/logic/users/register.go"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package users  \n  \nimport (\n    "star/internal/model"\n    ...\n)\n\nfunc (u *Users) Register(ctx context.Context, in *model.RegisterInput) error {  \n    if err := u.checkUser(ctx, in.Username); err != nil {  \n       return err  \n    }  \n  \n    _, err := dao.Users.Ctx(ctx).Data(do.Users{  \n       Username: in.Username,  \n       Password: encryptPassword(in.Password),  \n       Email:    in.Email,  \n    }).Insert()  \n    if err != nil {  \n       return err  \n    }  \n    return nil  \n}\n\n...\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Change the ",(0,a.jsx)(n.code,{children:"Controller"})," layer to pass in ",(0,a.jsx)(n.code,{children:"RegisterInput"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"internal/controller/users/users_v1_register.go"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package users  \n\nimport (\n    "star/internal/model"\n    ...\n)\n  \nfunc (c *ControllerV1) Register(ctx context.Context, req *v1.RegisterReq) (res *v1.RegisterRes, err error) {  \n    err = c.users.Register(ctx, &model.RegisterInput{  \n       Username: req.Username,  \n       Password: req.Password,  \n       Email:    req.Email,  \n    })  \n    return nil, err  \n}\n'})})]})}function c(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},250065:function(e,n,i){i.d(n,{Z:function(){return l},a:function(){return s}});var r=i(667294);let a={},t=r.createContext(a);function s(e){let n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);