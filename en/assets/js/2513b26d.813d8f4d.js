"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["3775"],{259113:function(e,o,n){n.r(o),n.d(o,{metadata:()=>t,contentTitle:()=>s,default:()=>d,assets:()=>a,toc:()=>c,frontMatter:()=>r});var t=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6-\u914D\u7F6E\u7BA1\u7406","title":"Logging - Configuration","description":"Configuration management functionality of the log component in the GoFrame framework, including how to manage Logger objects through configuration files and configuration methods. The log component supports multiple configuration formats, and its modular design allows independent log output configuration. Configuration items cover log paths, output levels, and terminal displays, with log levels supporting multiple modes to ensure flexible recording of information at each level.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6-\u914D\u7F6E\u7BA1\u7406.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6","slug":"/docs/core/glog-config","permalink":"/en/docs/core/glog-config","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6-\u914D\u7F6E\u7BA1\u7406.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732541616000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/core/glog-config","title":"Logging - Configuration","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","log component","configuration management","log output","log levels","configuration files","Logger","modular","log splitting","log format"],"description":"Configuration management functionality of the log component in the GoFrame framework, including how to manage Logger objects through configuration files and configuration methods. The log component supports multiple configuration formats, and its modular design allows independent log output configuration. Configuration items cover log paths, output levels, and terminal displays, with log levels supporting multiple modes to ensure flexible recording of information at each level."},"sidebar":"mainSidebar","previous":{"title":"Logging","permalink":"/en/docs/core/glog"},"next":{"title":"Logging - Log Level","permalink":"/en/docs/core/glog-level"}}'),i=n("785893"),l=n("250065");let r={slug:"/docs/core/glog-config",title:"Logging - Configuration",sidebar_position:0,hide_title:!0,keywords:["GoFrame","log component","configuration management","log output","log levels","configuration files","Logger","modular","log splitting","log format"],description:"Configuration management functionality of the log component in the GoFrame framework, including how to manage Logger objects through configuration files and configuration methods. The log component supports multiple configuration formats, and its modular design allows independent log output configuration. Configuration items cover log paths, output levels, and terminal displays, with log levels supporting multiple modes to ensure flexible recording of information at each level."},s=void 0,a={},c=[{value:"Configuration File (Recommended)",id:"configuration-file-recommended",level:2},{value:"Example 1, Default Configuration Items",id:"example-1-default-configuration-items",level:3},{value:"Example 2, Multiple Configuration Items",id:"example-2-multiple-configuration-items",level:3},{value:"Configuration Method (Advanced)",id:"configuration-method-advanced",level:2},{value:"Precautions",id:"precautions",level:2}];function g(e){let o={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(o.p,{children:["The log component is one of the core components of the ",(0,i.jsx)(o.code,{children:"GoFrame"})," framework, supporting convenient configuration management capabilities."]}),"\n",(0,i.jsx)(o.h2,{id:"configuration-file-recommended",children:"Configuration File (Recommended)"}),"\n",(0,i.jsx)(o.admonition,{type:"tip",children:(0,i.jsxs)(o.p,{children:["The log configuration uses the unified configuration component of the framework, supporting multiple file formats, as well as configuration centers and interface-based extensions. For more details, please refer to the section: ",(0,i.jsx)(o.a,{href:"/en/docs/core/gcfg",children:"Configuration"})]})}),"\n",(0,i.jsxs)(o.p,{children:["The log component supports configuration files. When using ",(0,i.jsx)(o.code,{children:"g.Log(instance name)"})," to obtain the ",(0,i.jsx)(o.code,{children:"Logger"})," instance object, it will automatically obtain the corresponding ",(0,i.jsx)(o.code,{children:"Logger"})," configuration through the default configuration management object. By default, it will read the ",(0,i.jsx)(o.code,{children:"logger.instance name"})," configuration item. If this configuration item does not exist, it will read the default ",(0,i.jsx)(o.code,{children:"logger"})," configuration item. Please refer to the configuration object structure definition for configuration items: ",(0,i.jsx)(o.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/os/glog#Config",children:"https://pkg.go.dev/github.com/gogf/gf/v2/os/glog#Config"})]}),"\n",(0,i.jsx)(o.p,{children:"The complete configuration file configuration items and descriptions are as follows, with configuration item names being case-insensitive:"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-yaml",children:'logger:\n  path:                  "/var/log/"           # Log file path. Default is empty, indicating closed, only output to terminal\n  file:                  "{Y-m-d}.log"         # Log file format. Default is "{Y-m-d}.log"\n  prefix:                ""                    # Prefix for log content output. Default is empty\n  level:                 "all"                 # Log output level\n  timeFormat:            "2006-01-02T15:04:05" # Custom log output time format, configured using Golang\'s standard time format\n  ctxKeys:               []                    # Custom Context variable names, automatically print Context variables to the log. Default is empty\n  header:                true                  # Whether to print the header information of the log. Default is true\n  stdout:                true                  # Whether the log is also output to the terminal. Default is true\n  rotateSize:            0                     # Rotate files based on log file size. Default is 0, indicating that the rotation feature is turned off\n  rotateExpire:          0                     # Rotate files based on log file time interval. Default is 0, indicating that the rotation feature is turned off\n  rotateBackupLimit:     0                     # Clean up split files according to the number of split files, effective when the rotation feature is turned on. Default is 0, meaning no backup, delete when split\n  rotateBackupExpire:    0                     # Clean up split files according to the validity period of split files, effective when the rotation feature is turned on. Default is 0, meaning no backup, delete when split\n  rotateBackupCompress:  0                     # Compression ratio of rotated split files (0-9). Default is 0, meaning no compression\n  rotateCheckInterval:   "1h"                  # Time detection interval for rotation splitting, generally does not need to be set. Default is 1 hour\n  stdoutColorDisabled:   false                 # Disable color printing on the terminal. Default is enabled\n  writerColorEnable:     false                 # Whether the log file is colored. Default is false, indicating no color\n'})}),"\n",(0,i.jsxs)(o.p,{children:["Among them, the ",(0,i.jsx)(o.code,{children:"level"})," configuration item is configured using a string and supports the following configurations according to log levels: ",(0,i.jsx)(o.code,{children:"DEBU"})," < ",(0,i.jsx)(o.code,{children:"INFO"})," < ",(0,i.jsx)(o.code,{children:"NOTI"})," < ",(0,i.jsx)(o.code,{children:"WARN"})," < ",(0,i.jsx)(o.code,{children:"ERRO"})," < ",(0,i.jsx)(o.code,{children:"CRIT"}),", and also supports common deployment mode configuration names such as ",(0,i.jsx)(o.code,{children:"ALL"}),", ",(0,i.jsx)(o.code,{children:"DEV"}),", ",(0,i.jsx)(o.code,{children:"PROD"}),". The ",(0,i.jsx)(o.code,{children:"level"})," configuration item string is not case-sensitive. For a detailed introduction to log levels, please refer to the section ",(0,i.jsx)(o.a,{href:"/en/docs/core/glog-level",children:"Logging - Log Level"}),"."]}),"\n",(0,i.jsx)(o.h3,{id:"example-1-default-configuration-items",children:"Example 1, Default Configuration Items"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-yaml",children:'logger:\n  path:    "/var/log"\n  level:   "all"\n  stdout:  false\n'})}),"\n",(0,i.jsxs)(o.p,{children:["Then you can use ",(0,i.jsx)(o.code,{children:"g.Log()"})," to automatically obtain and set this configuration when getting the default instance object."]}),"\n",(0,i.jsx)(o.h3,{id:"example-2-multiple-configuration-items",children:"Example 2, Multiple Configuration Items"}),"\n",(0,i.jsxs)(o.p,{children:["An example of configuration for multiple ",(0,i.jsx)(o.code,{children:"Logger"}),":"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-yaml",children:'logger:\n  path:    "/var/log"\n  level:   "all"\n  stdout:  false\n  logger1:\n    path:    "/var/log/logger1"\n    level:   "dev"\n    stdout:  false\n  logger2:\n    path:    "/var/log/logger2"\n    level:   "prod"\n    stdout:  true\n'})}),"\n",(0,i.jsxs)(o.p,{children:["We can obtain the corresponding configured ",(0,i.jsx)(o.code,{children:"Logger"})," instance objects by the instance object name:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-go",children:'// Corresponding to logger.logger1 configuration item\nl1 := g.Log("logger1")\n// Corresponding to logger.logger2 configuration item\nl2 := g.Log("logger2")\n// Corresponding to default configuration item logger\nl3 := g.Log("none")\n// Corresponding to default configuration item logger\nl4 := g.Log()\n'})}),"\n",(0,i.jsx)(o.h2,{id:"configuration-method-advanced",children:"Configuration Method (Advanced)"}),"\n",(0,i.jsxs)(o.p,{children:["The configuration method is used for developers to perform configuration management themselves when using ",(0,i.jsx)(o.code,{children:"glog"})," modularly."]}),"\n",(0,i.jsx)(o.p,{children:"List of methods:"}),"\n",(0,i.jsx)(o.p,{children:"Brief explanation:"}),"\n",(0,i.jsxs)(o.ol,{children:["\n",(0,i.jsxs)(o.li,{children:["You can set using ",(0,i.jsx)(o.code,{children:"SetConfig"})," and ",(0,i.jsx)(o.code,{children:"SetConfigWithMap"}),"."]}),"\n",(0,i.jsxs)(o.li,{children:["You can also use the ",(0,i.jsx)(o.code,{children:"Set*"})," methods of the ",(0,i.jsx)(o.code,{children:"Logger"})," object for specific configurations."]}),"\n",(0,i.jsxs)(o.li,{children:["It should be noted that configuration items should be set before the ",(0,i.jsx)(o.code,{children:"Logger"})," object executes log output to avoid concurrent safety issues."]}),"\n"]}),"\n",(0,i.jsxs)(o.p,{children:["We can use the ",(0,i.jsx)(o.code,{children:"SetConfigWithMap"})," method to set/modify specific configurations of the ",(0,i.jsx)(o.code,{children:"Logger"})," through ",(0,i.jsx)(o.code,{children:"Key-Value"})," pairs, while other configurations use the default configuration. The name of the ",(0,i.jsx)(o.code,{children:"Key"})," is the attribute name in the ",(0,i.jsx)(o.code,{children:"Config"})," ",(0,i.jsx)(o.code,{children:"struct"}),", and it is case-insensitive, supporting ",(0,i.jsx)(o.code,{children:"-"}),"/ ",(0,i.jsx)(o.code,{children:"_"}),"/ space symbols between words. For details, please refer to the conversion rules in the section ",(0,i.jsx)(o.a,{href:"/en/docs/core/gconv-struct",children:"Type Conversion - Struct"}),"."]}),"\n",(0,i.jsx)(o.p,{children:"Simple example:"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-go",children:'logger := glog.New()\nlogger.SetConfigWithMap(g.Map{\n    "path":     "/var/log",\n    "level":    "all",\n    "stdout":   false,\n    "StStatus": 0,\n})\nlogger.Print("test")\n'})}),"\n",(0,i.jsxs)(o.p,{children:["Here ",(0,i.jsx)(o.code,{children:"StStatus"})," indicates whether stack printing is enabled, set to ",(0,i.jsx)(o.code,{children:"0"})," to disable. The key name can also be ",(0,i.jsx)(o.code,{children:"stStatus"}),", ",(0,i.jsx)(o.code,{children:"st-status"}),", ",(0,i.jsx)(o.code,{children:"st_status"}),", ",(0,i.jsx)(o.code,{children:"St Status"}),", and other configuration attributes are analogous."]}),"\n",(0,i.jsx)(o.h2,{id:"precautions",children:"Precautions"}),"\n",(0,i.jsxs)(o.p,{children:["Common issues: such as why the log component configuration does not take effect for logs printed by ",(0,i.jsx)(o.code,{children:"HTTP Server"}),", ",(0,i.jsx)(o.code,{children:"GRPC Server"}),", ",(0,i.jsx)(o.code,{children:"ORM"})," components."]}),"\n",(0,i.jsxs)(o.p,{children:["The ",(0,i.jsx)(o.code,{children:"GoFrame"})," framework adopts a modular design, and the log component is an independent component of the framework. The configurations introduced in this chapter only take effect for independently using the log component, such as using ",(0,i.jsx)(o.code,{children:"g.Log()"})," or ",(0,i.jsx)(o.code,{children:"glog.New()"}),". The log configuration of other components has their own configuration items or log object setting methods to achieve log configuration. Please refer specifically to the corresponding component documentation and ",(0,i.jsx)(o.code,{children:"API"}),"."]})]})}function d(e={}){let{wrapper:o}={...(0,l.a)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},250065:function(e,o,n){n.d(o,{Z:function(){return s},a:function(){return r}});var t=n(667294);let i={},l=t.createContext(i);function r(e){let o=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(l.Provider,{value:o},e.children)}}}]);