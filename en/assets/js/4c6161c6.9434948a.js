"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["69440"],{435732:function(e,n,t){t.r(n),t.d(n,{metadata:()=>r,contentTitle:()=>d,default:()=>u,assets:()=>o,toc:()=>l,frontMatter:()=>s});var r=JSON.parse('{"id":"docs/WEB\u670D\u52A1\u5F00\u53D1/\u8DEF\u7531\u7BA1\u7406/\u8DEF\u7531\u7BA1\u7406-\u4E2D\u95F4\u4EF6\u62E6\u622A\u5668/\u4E2D\u95F4\u4EF6\u62E6\u622A\u5668-\u4F7F\u7528\u793A\u4F8B","title":"Middleware - Examples","description":"Documentation developed with the GoFrame framework showcasing middleware and interceptor features. Demonstrates cross-origin requests, middleware authentication, error and log handling, routing management, and service method binding through examples, providing flexible web request management.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/WEB\u670D\u52A1\u5F00\u53D1/\u8DEF\u7531\u7BA1\u7406/\u8DEF\u7531\u7BA1\u7406-\u4E2D\u95F4\u4EF6\u62E6\u622A\u5668/\u4E2D\u95F4\u4EF6\u62E6\u622A\u5668-\u4F7F\u7528\u793A\u4F8B.md","sourceDirName":"docs/WEB\u670D\u52A1\u5F00\u53D1/\u8DEF\u7531\u7BA1\u7406/\u8DEF\u7531\u7BA1\u7406-\u4E2D\u95F4\u4EF6\u62E6\u622A\u5668","slug":"/docs/web/router-middleware-example","permalink":"/en/docs/web/router-middleware-example","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/WEB\u670D\u52A1\u5F00\u53D1/\u8DEF\u7531\u7BA1\u7406/\u8DEF\u7531\u7BA1\u7406-\u4E2D\u95F4\u4EF6\u62E6\u622A\u5668/\u4E2D\u95F4\u4EF6\u62E6\u622A\u5668-\u4F7F\u7528\u793A\u4F8B.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732538474000,"sidebarPosition":1,"frontMatter":{"slug":"/docs/web/router-middleware-example","title":"Middleware - Examples","sidebar_position":1,"hide_title":true,"keywords":["GoFrame","GoFrame framework","middleware","CORS","authentication","routing","example","error handling","logging","network requests"],"description":"Documentation developed with the GoFrame framework showcasing middleware and interceptor features. Demonstrates cross-origin requests, middleware authentication, error and log handling, routing management, and service method binding through examples, providing flexible web request management."},"sidebar":"mainSidebar","previous":{"title":"Middleware - Intro","permalink":"/en/docs/web/router-middleware-intro"},"next":{"title":"Middleware - FAQ","permalink":"/en/docs/web/router-middleware-faq"}}'),i=t("785893"),a=t("250065");let s={slug:"/docs/web/router-middleware-example",title:"Middleware - Examples",sidebar_position:1,hide_title:!0,keywords:["GoFrame","GoFrame framework","middleware","CORS","authentication","routing","example","error handling","logging","network requests"],description:"Documentation developed with the GoFrame framework showcasing middleware and interceptor features. Demonstrates cross-origin requests, middleware authentication, error and log handling, routing management, and service method binding through examples, providing flexible web request management."},d=void 0,o={},l=[{value:"Allowing Cross-Origin Requests",id:"allowing-cross-origin-requests",level:2},{value:"Request Authentication Handling",id:"request-authentication-handling",level:2},{value:"Handling Authentication Exceptions",id:"handling-authentication-exceptions",level:2},{value:"Unified Error Handling",id:"unified-error-handling",level:2},{value:"Custom Log Handling",id:"custom-log-handling",level:2}];function c(e){let n={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"allowing-cross-origin-requests",children:"Allowing Cross-Origin Requests"}),"\n",(0,i.jsx)(n.p,{children:"The first example is a common functional requirement."}),"\n",(0,i.jsxs)(n.p,{children:["We need to add a response ",(0,i.jsx)(n.code,{children:"Header"})," to allow cross-origin requests before all API requests. This can be achieved through middleware:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\nfunc MiddlewareCORS(r *ghttp.Request) {\n    r.Response.CORSDefault()\n    r.Middleware.Next()\n}\n\nfunc main() {\n    s := g.Server()\n    s.Group("/api.v2", func(group *ghttp.RouterGroup) {\n        group.Middleware(MiddlewareCORS)\n        group.ALL("/user/list", func(r *ghttp.Request) {\n            r.Response.Writeln("list")\n        })\n    })\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"After execution, the terminal prints the routing table information as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"SERVER | DOMAIN  | ADDRESS | METHOD |       ROUTE       |      HANDLER      |     MIDDLEWARE\n|---------|---------|---------|--------|-------------------|-------------------|---------------------|\n  default | default | :8199   | ALL    | /api.v2/user/list | main.main.func1.1 | main.MiddlewareCORS\n|---------|---------|---------|--------|-------------------|-------------------|---------------------|\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here, we use ",(0,i.jsx)(n.code,{children:"group.Middleware(MiddlewareCORS)"})," to register the cross-origin middleware to all service functions under the ",(0,i.jsx)(n.code,{children:"/api.v2"})," route in a grouped routing manner. We can then request ",(0,i.jsx)(n.a,{href:"http://127.0.0.1:8199/api.v2/user/list",children:"http://127.0.0.1:8199/api.v2/user/list"})," to see if the ",(0,i.jsx)(n.code,{children:"Header"})," information allowing cross-origin requests is returned."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(948649).Z+"",width:"2270",height:"1514"})}),"\n",(0,i.jsx)(n.h2,{id:"request-authentication-handling",children:"Request Authentication Handling"}),"\n",(0,i.jsx)(n.p,{children:"We add an authentication middleware on top of the cross-origin middleware."}),"\n",(0,i.jsxs)(n.p,{children:["To simplify the example, in this demonstration, authentication is passed if the request contains a ",(0,i.jsx)(n.code,{children:"token"})," parameter with the value ",(0,i.jsx)(n.code,{children:"123456"}),"; otherwise, a ",(0,i.jsx)(n.code,{children:"403 Forbidden"})," status code is returned."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "net/http"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\nfunc MiddlewareAuth(r *ghttp.Request) {\n    token := r.Get("token")\n    if token.String() == "123456" {\n        r.Response.Writeln("auth")\n        r.Middleware.Next()\n    } else {\n        r.Response.WriteStatus(http.StatusForbidden)\n    }\n}\n\nfunc MiddlewareCORS(r *ghttp.Request) {\n    r.Response.Writeln("cors")\n    r.Response.CORSDefault()\n    r.Middleware.Next()\n}\n\nfunc main() {\n    s := g.Server()\n    s.Group("/api.v2", func(group *ghttp.RouterGroup) {\n        group.Middleware(MiddlewareCORS, MiddlewareAuth)\n        group.ALL("/user/list", func(r *ghttp.Request) {\n            r.Response.Writeln("list")\n        })\n    })\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"After execution, the terminal prints the routing table information as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"SERVER | DOMAIN  | ADDRESS | METHOD |       ROUTE       |      HANDLER      |               MIDDLEWARE\n|---------|---------|---------|--------|-------------------|-------------------|-----------------------------------------|\n  default | default | :8199   | ALL    | /api.v2/user/list | main.main.func1.1 | main.MiddlewareCORS,main.MiddlewareAuth\n|---------|---------|---------|--------|-------------------|-------------------|-----------------------------------------|\n"})}),"\n",(0,i.jsxs)(n.p,{children:["As you can see, our service method is bound with two middlewares, a cross-origin middleware and an authentication middleware. Requests will execute the ",(0,i.jsx)(n.code,{children:"MiddlewareCORS"})," global middleware first, followed by the ",(0,i.jsx)(n.code,{children:"MiddlewareAuth"})," group middleware, according to their registered order. We can then request ",(0,i.jsx)(n.a,{href:"http://127.0.0.1:8199/api.v2/user/list",children:"http://127.0.0.1:8199/api.v2/user/list"})," and ",(0,i.jsx)(n.a,{href:"http://127.0.0.1:8199/api.v2/user/list?token=123456",children:"http://127.0.0.1:8199/api.v2/user/list?token=123456"})," to compare the effects."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(249973).Z+"",width:"2242",height:"1482"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(960682).Z+"",width:"2198",height:"1490"})}),"\n",(0,i.jsx)(n.h2,{id:"handling-authentication-exceptions",children:"Handling Authentication Exceptions"}),"\n",(0,i.jsx)(n.p,{children:"Group routing middleware makes it convenient to add authentication exceptions, as only service methods registered under the current group route will bind and execute the authentication middleware; otherwise, the authentication middleware will not be executed."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "net/http"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\nfunc MiddlewareAuth(r *ghttp.Request) {\n    token := r.Get("token")\n    if token.String() == "123456" {\n        r.Middleware.Next()\n    } else {\n        r.Response.WriteStatus(http.StatusForbidden)\n    }\n}\n\nfunc main() {\n    s := g.Server()\n    s.Group("/admin", func(group *ghttp.RouterGroup) {\n        group.ALL("/login", func(r *ghttp.Request) {\n            r.Response.Writeln("login")\n        })\n        group.Group("/", func(group *ghttp.RouterGroup) {\n            group.Middleware(MiddlewareAuth)\n            group.ALL("/dashboard", func(r *ghttp.Request) {\n                r.Response.Writeln("dashboard")\n            })\n        })\n    })\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"After execution, the terminal prints the routing table information as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"SERVER | ADDRESS | DOMAIN  | METHOD | P |      ROUTE       |       HANDLER       |     MIDDLEWARE\n|---------|---------|---------|--------|---|------------------|---------------------|---------------------|\n  default |  :8199  | default |  ALL   | 2 | /admin/dashboard | main.main.func1.2.1 | main.MiddlewareAuth\n|---------|---------|---------|--------|---|------------------|---------------------|---------------------|\n  default |  :8199  | default |  ALL   | 2 | /admin/login     | main.main.func1.1   |\n|---------|---------|---------|--------|---|------------------|---------------------|---------------------|\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We can see that only the service method of the ",(0,i.jsx)(n.code,{children:"/admin/dashboard"})," route is bound with the authentication middleware ",(0,i.jsx)(n.code,{children:"main.MiddlewareAuth"}),", whereas the service method of the ",(0,i.jsx)(n.code,{children:"/admin/login"})," route does not have authentication processing added. We can then visit the following URLs to see the effect:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"http://127.0.0.1:8199/admin/login",children:"http://127.0.0.1:8199/admin/login"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"http://127.0.0.1:8199/admin/dashboard",children:"http://127.0.0.1:8199/admin/dashboard"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"http://127.0.0.1:8199/admin/dashboard?token=123456",children:"http://127.0.0.1:8199/admin/dashboard?token=123456"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(22919).Z+"",width:"1586",height:"1308"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(382705).Z+"",width:"1472",height:"1300"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(182399).Z+"",width:"1542",height:"1268"})}),"\n",(0,i.jsx)(n.h2,{id:"unified-error-handling",children:"Unified Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"Based on middleware, we can perform some posterior judgments after the service function has been executed, especially for unified data format return, result processing, error judgment, etc. These requirements can be implemented using posterior middleware types. We use a simple example to demonstrate how to use middleware to do posterior judgment processing for all API requests, serving as an inspiration."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "net/http"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\nfunc MiddlewareAuth(r *ghttp.Request) {\n    token := r.Get("token")\n    if token.String() == "123456" {\n        r.Middleware.Next()\n    } else {\n        r.Response.WriteStatus(http.StatusForbidden)\n    }\n}\n\nfunc MiddlewareCORS(r *ghttp.Request) {\n    r.Response.CORSDefault()\n    r.Middleware.Next()\n}\n\nfunc MiddlewareErrorHandler(r *ghttp.Request) {\n    r.Middleware.Next()\n    if r.Response.Status >= http.StatusInternalServerError {\n        r.Response.ClearBuffer()\n        r.Response.Writeln("Oops, the server is taking a break, please try again later!")\n    }\n}\n\nfunc main() {\n    s := g.Server()\n    s.Use(MiddlewareCORS)\n    s.Group("/api.v2", func(group *ghttp.RouterGroup) {\n        group.Middleware(MiddlewareAuth, MiddlewareErrorHandler)\n        group.ALL("/user/list", func(r *ghttp.Request) {\n            panic("db error: sql is xxxxxxx")\n        })\n    })\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"After execution, the terminal prints the routing table information as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"SERVER | DOMAIN  | ADDRESS | METHOD |       ROUTE       |       HANDLER       |                   MIDDLEWARE\n|---------|---------|---------|--------|-------------------|---------------------|-------------------------------------------------|\n  default | default | :8199   | ALL    | /*                | main.MiddlewareCORS | GLOBAL MIDDLEWARE\n|---------|---------|---------|--------|-------------------|---------------------|-------------------------------------------------|\n  default | default | :8199   | ALL    | /api.v2/user/list | main.main.func1.1   | main.MiddlewareAuth,main.MiddlewareErrorHandler\n|---------|---------|---------|--------|-------------------|---------------------|-------------------------------------------------|\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, we determine whether there is a system error in the posterior middleware, and if there is, we return a fixed prompt message instead of displaying sensitive error messages to the user. Of course, in real project scenarios, it is often necessary to parse data in the return buffer, such as ",(0,i.jsx)(n.code,{children:"JSON"})," data, and encapsulate it based on the current execution result to return a fixed data format, etc."]}),"\n",(0,i.jsxs)(n.p,{children:["After executing this example, visit ",(0,i.jsx)(n.a,{href:"http://127.0.0.1:8199/api.v2/user/list?token=123456",children:"http://127.0.0.1:8199/api.v2/user/list?token=123456"})," to see the effect."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(533375).Z+"",width:"2188",height:"1516"})}),"\n",(0,i.jsx)(n.h2,{id:"custom-log-handling",children:"Custom Log Handling"}),"\n",(0,i.jsxs)(n.p,{children:['Let\'s further refine the above example by outputting request logs, including status codes, to the terminal. Here we must use "global middleware" to intercept and handle all service requests, even ',(0,i.jsx)(n.code,{children:"404"})," requests."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "net/http"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\nfunc MiddlewareAuth(r *ghttp.Request) {\n    token := r.Get("token")\n    if token.String() == "123456" {\n        r.Middleware.Next()\n    } else {\n        r.Response.WriteStatus(http.StatusForbidden)\n    }\n}\n\nfunc MiddlewareCORS(r *ghttp.Request) {\n    r.Response.CORSDefault()\n    r.Middleware.Next()\n}\n\nfunc MiddlewareLog(r *ghttp.Request) {\n    r.Middleware.Next()\n    errStr := ""\n    if err := r.GetError(); err != nil {\n        errStr = err.Error()\n    }\n    g.Log().Println(r.Response.Status, r.URL.Path, errStr)\n}\n\nfunc main() {\n    s := g.Server()\n    s.SetConfigWithMap(g.Map{\n        "AccessLogEnabled": false,\n        "ErrorLogEnabled":  false,\n    })\n    s.Use(MiddlewareLog, MiddlewareCORS)\n    s.Group("/api.v2", func(group *ghttp.RouterGroup) {\n        group.Middleware(MiddlewareAuth)\n        group.ALL("/user/list", func(r *ghttp.Request) {\n            panic("Oops, I made a mistake!")\n        })\n    })\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(719882).Z+"",width:"2208",height:"1510"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(379707).Z+"",width:"1860",height:"1376"})}),"\n",(0,i.jsxs)(n.p,{children:["As you can see, we registered a global log handling middleware and cross-origin middleware, while the authentication middleware is registered under the ",(0,i.jsx)(n.code,{children:"/api.v2"})," route."]}),"\n",(0,i.jsxs)(n.p,{children:["After execution, we can request ",(0,i.jsx)(n.a,{href:"http://127.0.0.1:8199/api.v2/user/list",children:"http://127.0.0.1:8199/api.v2/user/list"})," and ",(0,i.jsx)(n.a,{href:"http://127.0.0.1:8199/api.v2/user/list?token=123456",children:"http://127.0.0.1:8199/api.v2/user/list?token=123456"})," to compare the effects and check the log output in the terminal."]})]})}function u(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},249973:function(e,n,t){t.d(n,{Z:function(){return r}});let r=t.p+"assets/images/00c0b75461f935577e10442bb62099eb-9afa9147402b381df2ffca35839374d6.png"},960682:function(e,n,t){t.d(n,{Z:function(){return r}});let r=t.p+"assets/images/23adc202964c3f977e53699794534b34-f1fc775c54a4dafed569bd719291ab2c.png"},379707:function(e,n,t){t.d(n,{Z:function(){return r}});let r=t.p+"assets/images/5cacae4a358831a37b056d198e72ff31-7418e773803def7e8f4bca0601fecea1.png"},382705:function(e,n,t){t.d(n,{Z:function(){return r}});let r=t.p+"assets/images/8d4acf43a15d00ce0f121dc432f8dc58-436c1304166e828af25c3b478ddeacc4.png"},533375:function(e,n,t){t.d(n,{Z:function(){return r}});let r=t.p+"assets/images/929f899c7b52e210c7cf4d302ff484ff-b9a0626f7168f37d098dc78392bc4a87.png"},22919:function(e,n,t){t.d(n,{Z:function(){return r}});let r=t.p+"assets/images/c4bfa5bcd20456cb5051b17454cc8797-0eee78902e1a831005324fbf90b82218.png"},182399:function(e,n,t){t.d(n,{Z:function(){return r}});let r=t.p+"assets/images/cc948d41ee2152eb2ea909b2108365ed-e314f0239f7b07486177669f0e42d57b.png"},719882:function(e,n,t){t.d(n,{Z:function(){return r}});let r=t.p+"assets/images/d743fcfd45b71ebdfa2b7522ac31a1a2-1ef322100b1d9fa3c869c680ebc3239b.png"},948649:function(e,n,t){t.d(n,{Z:function(){return r}});let r=t.p+"assets/images/e53264a11dd2824843ca58165b3aa5f6-c1233d7b48a0eb1303c7394243a9f482.png"},250065:function(e,n,t){t.d(n,{Z:function(){return d},a:function(){return s}});var r=t(667294);let i={},a=r.createContext(i);function s(e){let n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);