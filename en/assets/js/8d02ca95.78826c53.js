"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["89915"],{317543:function(n,e,t){t.r(e),t.d(e,{metadata:()=>i,contentTitle:()=>a,default:()=>d,assets:()=>s,toc:()=>c,frontMatter:()=>l});var i=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u94FE\u8868\u7C7B\u578B-glist/\u94FE\u8868\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528","title":"List - Usage","description":"Use the glist container in the GoFrame framework to perform linked list operations, including basic usage, list traversal, element push and pop, insertion and movement, concatenation and removal operations, and JSON serialization and deserialization. The example code demonstrates different operations in non-concurrent and concurrent safe scenarios to help understand the application of linked lists in Go language.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u94FE\u8868\u7C7B\u578B-glist/\u94FE\u8868\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u94FE\u8868\u7C7B\u578B-glist","slug":"/docs/components/container-glist-example","permalink":"/en/docs/components/container-glist-example","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u94FE\u8868\u7C7B\u578B-glist/\u94FE\u8868\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/components/container-glist-example","title":"List - Usage","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","Linked List","glist","Concurrent Safety","Data Structure","JSON Serialization","Go Language","Container Operations","Programming Example"],"description":"Use the glist container in the GoFrame framework to perform linked list operations, including basic usage, list traversal, element push and pop, insertion and movement, concatenation and removal operations, and JSON serialization and deserialization. The example code demonstrates different operations in non-concurrent and concurrent safe scenarios to help understand the application of linked lists in Go language."},"sidebar":"mainSidebar","previous":{"title":"List","permalink":"/en/docs/components/container-glist"},"next":{"title":"List - Performance","permalink":"/en/docs/components/container-glist-benchmark"}}'),o=t("785893"),r=t("250065");let l={slug:"/docs/components/container-glist-example",title:"List - Usage",sidebar_position:0,hide_title:!0,keywords:["GoFrame","GoFrame Framework","Linked List","glist","Concurrent Safety","Data Structure","JSON Serialization","Go Language","Container Operations","Programming Example"],description:"Use the glist container in the GoFrame framework to perform linked list operations, including basic usage, list traversal, element push and pop, insertion and movement, concatenation and removal operations, and JSON serialization and deserialization. The example code demonstrates different operations in non-concurrent and concurrent safe scenarios to help understand the application of linked lists in Go language."},a=void 0,s={},c=[{value:"Basic Usage",id:"basic-usage",level:3},{value:"Linked List Traversal",id:"linked-list-traversal",level:3},{value:"<code>Push*</code> Element Push",id:"push-element-push",level:3},{value:"<code>Pop*</code> Element Pop",id:"pop-element-pop",level:3},{value:"<code>Move*/Insert*</code> Element Movement and Insertion",id:"moveinsert-element-movement-and-insertion",level:3},{value:"<code>Join</code> Element Concatenation",id:"join-element-concatenation",level:3},{value:"<code>Remove*</code> Element Removal",id:"remove-element-removal",level:3},{value:"<code>JSON</code> Serialization/Deserialization",id:"json-serializationdeserialization",level:3}];function m(n){let e={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/glist"\n)\n\nfunc main() {\n    // Not concurrent-safe in default.\n    l := glist.New()\n\n    // Push\n    l.PushBack(1) // insert value from the back\n    l.PushBack(2) // insert value from the back\n    e := l.PushFront(0) // insert value from the front\n\n    // Insert\n    l.InsertBefore(e, -1) // insert value before 0\n    l.InsertAfter(e, "a") // insert value after 0\n    fmt.Println(l)\n\n    // Pop After popping, remove from list\n    fmt.Println(l.PopFront()) // pop from the front, return the popped value\n    fmt.Println(l.PopBack()) // pop from the back\n    fmt.Println(l)\n\n    // All\n    fmt.Println(l.FrontAll()) // return a copy in order\n    fmt.Println(l.BackAll())  // return a copy in reverse order\n\n    // Output:\n    // [-1,0,"a",1,2]\n    // -1\n    // 2\n    // [0,"a",1]\n    // [0 "a" 1]\n    // [1 "a" 0]\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"linked-list-traversal",children:"Linked List Traversal"}),"\n",(0,o.jsxs)(e.p,{children:["In this example, we will traverse a concurrent-safe linked list using read lock and write lock, implemented by ",(0,o.jsx)(e.code,{children:"RLockFunc"})," and ",(0,o.jsx)(e.code,{children:"LockFunc"})," respectively. After execution, the output is:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "container/list"\n    "fmt"\n    "github.com/gogf/gf/v2/container/garray"\n    "github.com/gogf/gf/v2/container/glist"\n)\n\nfunc main() {\n    // concurrent-safe list.\n    l := glist.NewFrom(garray.NewArrayRange(1, 9, 1).Slice(), true)\n    fmt.Println(l)\n    // iterate reading from head.\n    l.RLockFunc(func(list *list.List) {\n        length := list.Len()\n        if length > 0 {\n            for i, e := 0, list.Front(); i < length; i, e = i+1, e.Next() {\n                fmt.Print(e.Value)\n            }\n        }\n    })\n    fmt.Println()\n    // iterate reading from tail.\n    l.RLockFunc(func(list *list.List) {\n        length := list.Len()\n        if length > 0 {\n            for i, e := 0, list.Back(); i < length; i, e = i+1, e.Prev() {\n                fmt.Print(e.Value)\n            }\n        }\n    })\n\n    fmt.Println()\n\n    // iterate reading from head using IteratorAsc.\n    l.IteratorAsc(func(e *glist.Element) bool {\n        fmt.Print(e.Value)\n        return true\n    })\n    fmt.Println()\n    // iterate reading from tail using IteratorDesc.\n    l.IteratorDesc(func(e *glist.Element) bool {\n        fmt.Print(e.Value)\n        return true\n    })\n\n    fmt.Println()\n\n    // iterate writing from head.\n    l.LockFunc(func(list *list.List) {\n        length := list.Len()\n        if length > 0 {\n            for i, e := 0, list.Front(); i < length; i, e = i+1, e.Next() {\n                if e.Value == 6 {\n                    e.Value = "M"\n                    break\n                }\n            }\n        }\n    })\n    fmt.Println(l)\n\n    // Output:\n    // [1,2,3,4,5,6,7,8,9]\n    // 123456789\n    // 987654321\n    // 123456789\n    // 987654321\n    // [1,2,3,4,5,M,7,8,9]\n'})}),"\n",(0,o.jsxs)(e.h3,{id:"push-element-push",children:[(0,o.jsx)(e.code,{children:"Push*"})," Element Push"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/glist"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    l := glist.NewFrom(g.Slice{1, 2, 3, 4, 5})\n\n    l.PushBack(6)\n    fmt.Println(l)\n\n    l.PushFront(0)\n    fmt.Println(l)\n\n    // Positive numbers push from the right\n    l.PushBacks(g.Slice{7, 8})\n    fmt.Println(l)\n\n    // Negative numbers push from the left\n    l.PushFronts(g.Slice{-1, -2})\n    fmt.Println(l)\n\n    l.PushFrontList(glist.NewFrom(g.Slice{"a", "b", "c"}))\n    l.PushBackList(glist.NewFrom(g.Slice{"d", "e", "f"}))\n    fmt.Println(l)\n\n    // Output:\n    // [1,2,3,4,5,6]\n    // [0,1,2,3,4,5,6]\n    // [0,1,2,3,4,5,6,7,8]\n    // [-2,-1,0,1,2,3,4,5,6,7,8]\n    // ["a","b","c",-2,-1,0,1,2,3,4,5,6,7,8,"d","e","f"]\n\n}\n'})}),"\n",(0,o.jsxs)(e.h3,{id:"pop-element-pop",children:[(0,o.jsx)(e.code,{children:"Pop*"})," Element Pop"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/glist"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    l := glist.NewFrom(g.Slice{1, 2, 3, 4, 5, 6, 7, 8, 9})\n\n    fmt.Println(l.PopBack())\n    fmt.Println(l.PopBacks(2))\n    fmt.Println(l.PopFront())\n    fmt.Println(l.PopFronts(2))\n\n    fmt.Println(glist.NewFrom(g.Slice{"a", "b", "c", "d"}).PopFrontAll())\n    fmt.Println(glist.NewFrom(g.Slice{"a", "b", "c", "d"}).PopBackAll())\n\n    // Output:\n    // 9\n    // [8 7]\n    // 1\n    // [2 3]\n    // [4,5,6]\n    // [a b c d]\n    // [d c b a]\n}\n'})}),"\n",(0,o.jsxs)(e.h3,{id:"moveinsert-element-movement-and-insertion",children:[(0,o.jsx)(e.code,{children:"Move*/Insert*"})," Element Movement and Insertion"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/glist"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    l := glist.NewFrom(g.Slice{1, 2, 3, 4, 5, 6, 7, 8, 9})\n\n    l.MoveToBack(l.Front()) // move the first element (1) to the most right [2,3,4,5,6,7,8,9,1]\n    l.MoveToFront(l.Back().Prev()) // move the element before the last (9) to the most left [9,2,3,4,5,6,7,8,1]\n    fmt.Println(l)\n\n    // Move 2 before the first element of the stack\n    l.MoveBefore(l.Front().Next(), l.Front())\n    // Move 8 after the last element of the stack\n    l.MoveAfter(l.Back().Prev(), l.Back())\n    fmt.Println(l)\n\n    // Insert new element before the last element of the stack\n    l.InsertBefore(l.Back(), "a")\n    // Insert new element after the first element of the stack\n    l.InsertAfter(l.Front(), "b")\n\n    // Output:\n    // [9,2,3,4,5,6,7,8,1]\n    // [2,9,3,4,5,6,7,1,8]\n    // [2,"b",9,3,4,5,6,7,1,"a",8]\n}\n'})}),"\n",(0,o.jsxs)(e.h3,{id:"join-element-concatenation",children:[(0,o.jsx)(e.code,{children:"Join"})," Element Concatenation"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/glist"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    var l glist.List\n    l.PushBacks(g.Slice{"a", "b", "c", "d"})\n\n    fmt.Println(l.Join(","))\n\n    // Output:\n    // a,b,c,d\n}\n'})}),"\n",(0,o.jsxs)(e.h3,{id:"remove-element-removal",children:[(0,o.jsx)(e.code,{children:"Remove*"})," Element Removal"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/glist"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    l := glist.NewFrom(g.Slice{0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    fmt.Println(l)\n\n    fmt.Println(l.Remove(l.Front()))\n    fmt.Println(l)\n\n    l.Removes([]*glist.Element{l.Front(), l.Front().Next()})\n    fmt.Println(l)\n\n    l.RemoveAll()\n    fmt.Println(l)\n\n    // Output:\n    // [0,1,2,3,4,5,6,7,8,9]\n    // 0\n    // [1,2,3,4,5,6,7,8,9]\n    // [3,4,5,6,7,8,9]\n    // []\n}\n'})}),"\n",(0,o.jsxs)(e.h3,{id:"json-serializationdeserialization",children:[(0,o.jsx)(e.code,{children:"JSON"})," Serialization/Deserialization"]}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"glist"})," container implements the standard library ",(0,o.jsx)(e.code,{children:"json"})," data format's serialization/deserialization interface."]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"Marshal"})}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n      "encoding/json"\n      "fmt"\n      "github.com/gogf/gf/v2/container/glist"\n      "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n      type Student struct {\n          Id     int\n          Name   string\n          Scores *glist.List\n      }\n      s := Student{\n          Id:     1,\n          Name:   "john",\n          Scores: glist.NewFrom(g.Slice{100, 99, 98}),\n      }\n      b, _ := json.Marshal(s)\n      fmt.Println(string(b))\n\n      // Output:\n      // {"Id":1,"Name":"john","Scores":[100,99,98]}\n}\n'})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"Unmarshal"})}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:'package main\n\n\nimport (\n      "encoding/json"\n      "fmt"\n      "github.com/gogf/gf/v2/container/glist"\n)\n\n\nfunc main() {\n      b := []byte(`{"Id":1,"Name":"john","Scores":[100,99,98]}`)\n      type Student struct {\n          Id     int\n          Name   string\n          Scores *glist.List\n      }\n      s := Student{}\n      json.Unmarshal(b, &s)\n      fmt.Println(s)\n\n      // Output:\n      // {1 john [100,99,98]}\n}\n'})})]})}function d(n={}){let{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(m,{...n})}):m(n)}},250065:function(n,e,t){t.d(e,{Z:function(){return a},a:function(){return l}});var i=t(667294);let o={},r=i.createContext(o);function l(n){let e=i.useContext(r);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:l(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);