"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["49099"],{526910:function(e,r,i){i.r(r),i.d(r,{metadata:()=>n,contentTitle:()=>c,default:()=>g,assets:()=>a,toc:()=>d,frontMatter:()=>s});var n=JSON.parse('{"id":"course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1/2.6.\u670D\u52A1\u6CE8\u518C","title":"2.6 Service Registration","description":"A guide on registering the user microservice with etcd service registry, including configuration file setup, registration logic implementation, and service discovery mechanism configuration.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1/2.6.\u670D\u52A1\u6CE8\u518C.md","sourceDirName":"course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1","slug":"/course/proxima-book/user-etcd-register","permalink":"/en/course/proxima-book/user-etcd-register","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1/2.6.\u670D\u52A1\u6CE8\u518C.md","tags":[],"version":"current","lastUpdatedBy":"oldme","lastUpdatedAt":1734398801000,"frontMatter":{"title":"2.6 Service Registration","hide_title":true,"slug":"/course/proxima-book/user-etcd-register","keywords":["GoFrame","etcd","service registration","service discovery","microservices registry","configuration management"],"description":"A guide on registering the user microservice with etcd service registry, including configuration file setup, registration logic implementation, and service discovery mechanism configuration."},"sidebar":"courseProximaBookSidebar","previous":{"title":"2.5 Service Startup","permalink":"/en/course/proxima-book/user-run"},"next":{"title":"Chapter 3 - Word Service","permalink":"/en/course/proxima-book/word"}}'),t=i("785893"),o=i("250065");let s={title:"2.6 Service Registration",hide_title:!0,slug:"/course/proxima-book/user-etcd-register",keywords:["GoFrame","etcd","service registration","service discovery","microservices registry","configuration management"],description:"A guide on registering the user microservice with etcd service registry, including configuration file setup, registration logic implementation, and service discovery mechanism configuration."},c=void 0,a={},d=[];function l(e){let r={blockquote:"blockquote",code:"code",em:"em",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["Next, we'll register the user microservice with ",(0,t.jsx)(r.code,{children:"etcd"})," to make it available for other services to call."]}),"\n",(0,t.jsxs)(r.p,{children:["Add a configuration file with the ",(0,t.jsx)(r.code,{children:"etcd"})," access address."]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.em,{children:"app/user/manifest/config/etcd.yaml"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-yaml",children:'etcd:  \n  address: "srv.com:2379"\n'})}),"\n",(0,t.jsx)(r.p,{children:"Add the registration logic in the entry file:"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.em,{children:"app/user/main.go"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'package main  \n  \nimport (  \n    _ "github.com/gogf/gf/contrib/drivers/mysql/v2"  \n    \n    "github.com/gogf/gf/contrib/registry/etcd/v2"  \n    "github.com/gogf/gf/contrib/rpc/grpcx/v2"  \n    "github.com/gogf/gf/v2/frame/g"  \n    "github.com/gogf/gf/v2/os/gctx"  \n      \n    "proxima/app/user/internal/cmd"\n)\n  \nfunc main() {  \n    var ctx = gctx.New()  \n    conf, err := g.Cfg("etcd").Get(ctx, "etcd.address")  \n    if err != nil {  \n       panic(err)  \n    }  \n  \n    var address = conf.String()  \n    grpcx.Resolver.Register(etcd.New(address))  \n  \n    cmd.Main.Run(ctx)  \n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"In fact, the key code for service registration is just one line, while the rest is code for reading the configuration file:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:"grpcx.Resolver.Register(etcd.New(address))\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Restart the project to apply the changes. Then enter the ",(0,t.jsx)(r.code,{children:"etcd"})," container and execute the following command to verify the registration:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:'$ etcdctl get "" --prefix --keys-only\n'})}),"\n",(0,t.jsxs)(r.p,{children:["This command shows all existing ",(0,t.jsx)(r.code,{children:"keys"})," in ",(0,t.jsx)(r.code,{children:"etcd"}),", where we should see our registered service:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-text",children:"/service/default/default/user/latest/{IP}:32001\n"})}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["Service registration can be understood as similar to DNS name resolution. The service name ",(0,t.jsx)(r.code,{children:"grpc.name"})," in the configuration file can be thought of as analogous to a domain name."]}),"\n"]})]})}function g(e={}){let{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},250065:function(e,r,i){i.d(r,{Z:function(){return c},a:function(){return s}});var n=i(667294);let t={},o=n.createContext(t);function s(e){let r=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);