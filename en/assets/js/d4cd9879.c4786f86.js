"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["15905"],{989361:function(e,i,n){n.r(i),n.d(i,{metadata:()=>o,contentTitle:()=>a,default:()=>m,assets:()=>c,toc:()=>d,frontMatter:()=>t});var o=JSON.parse('{"id":"docs/\u6846\u67B6\u8BBE\u8BA1/\u5DE5\u7A0B\u5F00\u53D1\u8BBE\u8BA1/\u5FAE\u670D\u52A1\u5927\u4ED3\u7BA1\u7406\u6A21\u5F0F","title":"Mono-Repo Management","description":"GoFrame framework\'s support for microservices-mono-repo management mode, detailing how to conduct code development and service collaboration in this mode. Discusses the pros and cons of mono-repo management and how to optimize microservice collaboration by dividing repository responsibilities, managing code visibility, unifying image repositories, and more. Also, provides relevant framework commands to help developers efficiently manage and deploy microservice projects.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6846\u67B6\u8BBE\u8BA1/\u5DE5\u7A0B\u5F00\u53D1\u8BBE\u8BA1/\u5FAE\u670D\u52A1\u5927\u4ED3\u7BA1\u7406\u6A21\u5F0F.md","sourceDirName":"docs/\u6846\u67B6\u8BBE\u8BA1/\u5DE5\u7A0B\u5F00\u53D1\u8BBE\u8BA1","slug":"/docs/design/project-mono-repo","permalink":"/en/docs/design/project-mono-repo","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6846\u67B6\u8BBE\u8BA1/\u5DE5\u7A0B\u5F00\u53D1\u8BBE\u8BA1/\u5FAE\u670D\u52A1\u5927\u4ED3\u7BA1\u7406\u6A21\u5F0F.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1740724083000,"sidebarPosition":5,"frontMatter":{"slug":"/docs/design/project-mono-repo","title":"Mono-Repo Management","sidebar_position":5,"hide_title":true,"keywords":["GoFrame","Microservices","Single Repo Management","Code Development","Permission Management","Service Collaboration","Large Repo Management","Code Repository","Containerization Support","Framework Commands"],"description":"GoFrame framework\'s support for microservices-mono-repo management mode, detailing how to conduct code development and service collaboration in this mode. Discusses the pros and cons of mono-repo management and how to optimize microservice collaboration by dividing repository responsibilities, managing code visibility, unifying image repositories, and more. Also, provides relevant framework commands to help developers efficiently manage and deploy microservice projects."},"sidebar":"mainSidebar","previous":{"title":"Data and Business Models","permalink":"/en/docs/design/project-models"},"next":{"title":"OpenTelemetry Tracing","permalink":"/en/docs/design/tracing"}}'),r=n("785893"),s=n("250065");let t={slug:"/docs/design/project-mono-repo",title:"Mono-Repo Management",sidebar_position:5,hide_title:!0,keywords:["GoFrame","Microservices","Single Repo Management","Code Development","Permission Management","Service Collaboration","Large Repo Management","Code Repository","Containerization Support","Framework Commands"],description:"GoFrame framework's support for microservices-mono-repo management mode, detailing how to conduct code development and service collaboration in this mode. Discusses the pros and cons of mono-repo management and how to optimize microservice collaboration by dividing repository responsibilities, managing code visibility, unifying image repositories, and more. Also, provides relevant framework commands to help developers efficiently manage and deploy microservice projects."},a=void 0,c={},d=[{value:"1. Pre-reading",id:"1-pre-reading",level:2},{value:"2. Large Repo Management",id:"2-large-repo-management",level:2},{value:"1. Division of Repository Responsibilities",id:"1-division-of-repository-responsibilities",level:3},{value:"1) When intra-team cooperation frequency is higher than inter-team",id:"1-when-intra-team-cooperation-frequency-is-higher-than-inter-team",level:4},{value:"2) When cooperation frequency is high between multiple teams",id:"2-when-cooperation-frequency-is-high-between-multiple-teams",level:4},{value:"2. How Microservices Collaborate in a Large Repo",id:"2-how-microservices-collaborate-in-a-large-repo",level:3},{value:"1) Management of Code Visibility",id:"1-management-of-code-visibility",level:4},{value:"2) Service Interface Invocation",id:"2-service-interface-invocation",level:4},{value:"3) Strict Compatibility Requirements",id:"3-strict-compatibility-requirements",level:4},{value:"3. Microservice Containerization Support under Large Repos",id:"3-microservice-containerization-support-under-large-repos",level:3},{value:"1) Unified Image Repository Management",id:"1-unified-image-repository-management",level:4},{value:"2) Unified Compile, Submit Commands",id:"2-unified-compile-submit-commands",level:4},{value:"3) Unified Deployment, Debugging Commands",id:"3-unified-deployment-debugging-commands",level:4},{value:"4. Other Framework Commands under Large Repos",id:"4-other-framework-commands-under-large-repos",level:3},{value:"1) <code>make cli</code>",id:"1-make-cli",level:4},{value:"2) <code>make up</code>",id:"2-make-up",level:4},{value:"3) <code>make dao</code>",id:"3-make-dao",level:4},{value:"4) <code>make service</code>",id:"4-make-service",level:4},{value:"5) <code>make enums</code>",id:"5-make-enums",level:4},{value:"6) More Commands",id:"6-more-commands",level:4}];function l(e){let i={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.p,{children:["This article aims to introduce ",(0,r.jsx)(i.code,{children:"GoFrame"})," framework's support for microservices-mono-repo management mode, guiding developers on how to conduct code development and collaboration in a microservices-mono-repo management mode."]}),"\n",(0,r.jsx)(i.h2,{id:"1-pre-reading",children:"1. Pre-reading"}),"\n",(0,r.jsxs)(i.p,{children:["Before starting this chapter, it is recommended to first understand the basic concepts and respective pros and cons of monolith repositories (",(0,r.jsx)(i.code,{children:"monolith"}),"), microservices-multi-repo management (",(0,r.jsx)(i.code,{children:"multi-repo"}),"), and microservices-mono-repo management (",(0,r.jsx)(i.code,{children:"mono-repo"}),"): ",(0,r.jsx)(i.a,{href:"https://johng.cn/management/monorepo-vs-multirepo",children:"What are the advantages and disadvantages of monolith and multi-repo, and which solution is better for microservices?"})]}),"\n",(0,r.jsxs)(i.p,{children:["Management constraints of code repositories do not belong to the framework\u2019s responsibilities. The ",(0,r.jsx)(i.code,{children:"GoFrame"})," framework's scaffold itself also supports commands to initialize two kinds of repository projects - single repository (",(0,r.jsx)(i.code,{children:"mono-repo"}),") and multiple repositories (",(0,r.jsx)(i.code,{children:"monolith/multi-repo"}),"), to meet the needs of different teams. The specific choice of code repository management mode is decided by the development team based on their own needs, scenarios, and habits."]}),"\n",(0,r.jsx)(i.admonition,{type:"tip",children:(0,r.jsxs)(i.p,{children:["To simplify and clarify the description of microservices-mono-repo management (",(0,r.jsx)(i.code,{children:"mono-repo"}),"), we will refer to it as ",(0,r.jsx)(i.strong,{children:"large repo management"})," moving forward."]})}),"\n",(0,r.jsx)(i.h2,{id:"2-large-repo-management",children:"2. Large Repo Management"}),"\n",(0,r.jsx)(i.h3,{id:"1-division-of-repository-responsibilities",children:"1. Division of Repository Responsibilities"}),"\n",(0,r.jsxs)(i.p,{children:["As noted in the pre-reading article, there's no silver bullet in the world, and large repos have both advantages and disadvantages. The most apparent drawbacks are ",(0,r.jsx)(i.strong,{children:"permission control"})," and ",(0,r.jsx)(i.strong,{children:"repository bloating"}),". To better manage the code repository and avoid the higher costs associated with these two drawbacks, we recommend minimizing the scope of microservices in a large repository as much as possible. The decision of which microservices need to be maintained in the repository depends on the frequency of cooperation between services."]}),"\n",(0,r.jsx)(i.h4,{id:"1-when-intra-team-cooperation-frequency-is-higher-than-inter-team",children:"1) When intra-team cooperation frequency is higher than inter-team"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["A typical scenario is for ",(0,r.jsx)(i.strong,{children:"non-microservice architecture products"}),", where service management responsibilities can be divided according to each business team. This way, the team can maintain scattered services in a unified code repository, fully utilizing the advantages of large repo management to improve intra-team development and maintenance efficiency."]}),"\n",(0,r.jsxs)(i.li,{children:["Another scenario is when the number of business microservices is not high (for example, within ",(0,r.jsx)(i.code,{children:"50"}),"), merging them into a large repository for management is feasible. Note that the number of services in large repo management is not determined by the number of people in the organizational structure."]}),"\n"]}),"\n",(0,r.jsx)(i.h4,{id:"2-when-cooperation-frequency-is-high-between-multiple-teams",children:"2) When cooperation frequency is high between multiple teams"}),"\n",(0,r.jsx)(i.p,{children:"If the number of business microservices is high, and interactions and collaborations between services are frequent, merging these services into a large repository for management can significantly improve collaboration efficiency. This typically occurs when microservices are within the same product line, across teams but not across centers or departments. Since this involves collaboration across multiple teams, it requires certain managerial authorization to drive."}),"\n",(0,r.jsx)(i.admonition,{type:"tip",children:(0,r.jsx)(i.p,{children:"Microservice management is not only about code organization but also about organizational management."})}),"\n",(0,r.jsx)(i.h3,{id:"2-how-microservices-collaborate-in-a-large-repo",children:"2. How Microservices Collaborate in a Large Repo"}),"\n",(0,r.jsx)(i.h4,{id:"1-management-of-code-visibility",children:"1) Management of Code Visibility"}),"\n",(0,r.jsxs)(i.p,{children:["The only thing that can be exposed between services is the interface, namely the ",(0,r.jsx)(i.code,{children:"API"}),". The internal logic of each service should not be visible externally. Go language has a beneficial ",(0,r.jsx)(i.code,{children:"internal"})," feature which can satisfy visibility management requirements. As shown in the large repo code example below, several services are managed under the ",(0,r.jsx)(i.code,{children:"app"})," directory, each exposing its own ",(0,r.jsx)(i.code,{children:"api"})," directory for direct reference by other services (enhancing collaboration efficiency), but the internal business logic is contained in the ",(0,r.jsx)(i.code,{children:"internal"})," directory, not visible (and therefore inaccessible) to other services."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:n(175456).Z+"",width:"1014",height:"1832"})}),"\n",(0,r.jsx)(i.h4,{id:"2-service-interface-invocation",children:"2) Service Interface Invocation"}),"\n",(0,r.jsxs)(i.p,{children:["Protocol files should be maintained separately in each service's directory. If the protocol file requires compilation, the compiled file should also be stored in its own service directory. The caller does not need to recompile and manage the target service's protocol files separately. For instance, with ",(0,r.jsx)(i.code,{children:"HTTP API"})," interface definitions, the caller can directly reference the target service's ",(0,r.jsx)(i.code,{children:"API"})," interface definition (in the following screenshot, ",(0,r.jsx)(i.code,{children:"khaos-shark"})," is the caller, ",(0,r.jsx)(i.code,{children:"khaos-oss"})," is the service provider)."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:n(789738).Z+"",width:"3072",height:"1750"})}),"\n",(0,r.jsxs)(i.p,{children:["The same logic applies to ",(0,r.jsx)(i.code,{children:"RPC"})," interface calls between microservices (in the following screenshot, ",(0,r.jsx)(i.code,{children:"user-api"})," is the caller, ",(0,r.jsx)(i.code,{children:"user-rpc"})," is the service provider)."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:n(809466).Z+"",width:"3840",height:"2110"})}),"\n",(0,r.jsx)(i.h4,{id:"3-strict-compatibility-requirements",children:"3) Strict Compatibility Requirements"}),"\n",(0,r.jsxs)(i.p,{children:["As introduced above, through large repo code management, all services within the large repo maintain consistent versions. When the service ",(0,r.jsx)(i.code,{children:"API"})," relied upon is updated, the caller's service (using the ",(0,r.jsx)(i.code,{children:"SDK"}),") will also automatically get updated. This requires all services within the repository to ",(0,r.jsx)(i.strong,{children:"strictly ensure interface compatibility"}),", otherwise, there may be issues with interface invocation: at best, the caller's service compilation fails requiring code adjustments, at worst, it compiles successfully but throws runtime errors affecting the business. Publicly shared large repo base components will also be affected by compatibility issues."]}),"\n",(0,r.jsx)(i.p,{children:"Key points for ensuring compatibility in code design:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.strong,{children:"Do not arbitrarily delete or modify interface parameters, parameter names, types, or validation logic."})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsxs)(i.strong,{children:["When an interface must undergo non-compatible updates, use interface versioning management (such as ",(0,r.jsx)(i.code,{children:"v1, v2, v3..."}),")."]})}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Public components should rely on stable and mature external components as much as possible. If a custom component is necessary, ensure the compatibility of exposed methods."})," ",(0,r.jsxs)(i.em,{children:["For example: basic functions like ",(0,r.jsx)(i.code,{children:"json.Marshal&Unmarshal"})," may be wrapped by some libraries/functions, but later users may not know or trust this function, leading to redundant rewrites. Over time, these libraries/functions become unmaintained."]})]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"3-microservice-containerization-support-under-large-repos",children:"3. Microservice Containerization Support under Large Repos"}),"\n",(0,r.jsx)(i.h4,{id:"1-unified-image-repository-management",children:"1) Unified Image Repository Management"}),"\n",(0,r.jsx)(i.p,{children:"Scattered image repositories can reduce efficiency in service containerization management and maintenance. To facilitate unified service containerization management, we recommend using a unified image repository for services under a large repo. The image repository address is maintained in the tool configuration files for each service:"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:n(811153).Z+"",width:"3072",height:"1748"})}),"\n",(0,r.jsx)(i.h4,{id:"2-unified-compile-submit-commands",children:"2) Unified Compile, Submit Commands"}),"\n",(0,r.jsx)(i.p,{children:"The framework provides commonly used commands to compile programs, build images, and submit images."}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"make build"})}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"Compiles the program to generate binary files."}),"\n",(0,r.jsxs)(i.p,{children:["For more information, please refer to the documentation: ",(0,r.jsx)(i.a,{href:"/en/docs/cli/build",children:"Cross-Compiling"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"make image"})}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["Compiles the program and builds the image, generating a ",(0,r.jsx)(i.code,{children:"Docker"})," image."]}),"\n",(0,r.jsxs)(i.p,{children:["Use ",(0,r.jsx)(i.code,{children:"make image TAG=xxx"})," to specify the tag name of the compiled image."]}),"\n",(0,r.jsxs)(i.p,{children:["For more information, please refer to the documentation: ",(0,r.jsx)(i.a,{href:"/en/docs/cli/docker",children:"Image Building"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"make image.push"})}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"Compiles the program, builds the image, and pushes it to the configured image repository."}),"\n",(0,r.jsxs)(i.p,{children:["Use ",(0,r.jsx)(i.code,{children:"make image.push TAG=xxx"})," to specify the tag name of the compiled image."]}),"\n",(0,r.jsx)(i.h4,{id:"3-unified-deployment-debugging-commands",children:"3) Unified Deployment, Debugging Commands"}),"\n",(0,r.jsxs)(i.p,{children:["The framework offers common commands for containerized deployment of ",(0,r.jsx)(i.code,{children:"Kubernetes"})," clusters, as well as integrated compile-deploy development commands."]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"make deploy TAG=xxx"})}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["Deploys the current service to a ",(0,r.jsx)(i.code,{children:"kubernetes"})," cluster connected via local ",(0,r.jsx)(i.code,{children:"kubeconfig"}),", where ",(0,r.jsx)(i.code,{children:"TAG"})," is used to specify the ",(0,r.jsx)(i.code,{children:"overlays"})," directory under the ",(0,r.jsx)(i.code,{children:"deploy"})," directory. Deployment ",(0,r.jsx)(i.code,{children:"yaml"})," file management uses the industry-standard ",(0,r.jsx)(i.code,{children:"kustomize"})," tool. For detailed documentation, please refer to: ",(0,r.jsx)(i.a,{href:"https://kubernetes.io/zh-cn/docs/tasks/manage-kubernetes-objects/kustomization/",children:"https://kubernetes.io/zh-cn/docs/tasks/manage-kubernetes-objects/kustomization/"})]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:n(636739).Z+"",width:"3072",height:"1750"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"make image.push deploy TAG=xxx"})}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["This command is a development debugging directive used for compiling binaries, building and pushing ",(0,r.jsx)(i.code,{children:"Docker"})," images, deploying ",(0,r.jsx)(i.code,{children:"Kubernetes"})," applications, and restarting the application with a single command."]}),"\n",(0,r.jsx)(i.h3,{id:"4-other-framework-commands-under-large-repos",children:"4. Other Framework Commands under Large Repos"}),"\n",(0,r.jsxs)(i.p,{children:["The framework provides a wealth of tool command support for project engineering management. These commands often need to be executed in specific service directories, such as ",(0,r.jsx)(i.code,{children:"./app/service-name"})]}),"\n",(0,r.jsxs)(i.h4,{id:"1-make-cli",children:["1) ",(0,r.jsx)(i.code,{children:"make cli"})]}),"\n",(0,r.jsxs)(i.p,{children:["Used to upgrade the local framework ",(0,r.jsx)(i.code,{children:"CLI"})," to the latest stable version."]}),"\n",(0,r.jsxs)(i.h4,{id:"2-make-up",children:["2) ",(0,r.jsx)(i.code,{children:"make up"})]}),"\n",(0,r.jsx)(i.p,{children:"Used to upgrade the local framework to the latest stable version in the community."}),"\n",(0,r.jsxs)(i.p,{children:["For more information, please refer to the documentation: ",(0,r.jsx)(i.a,{href:"/en/docs/cli/up",children:"Version Upgrade"})]}),"\n",(0,r.jsxs)(i.h4,{id:"3-make-dao",children:["3) ",(0,r.jsx)(i.code,{children:"make dao"})]}),"\n",(0,r.jsxs)(i.p,{children:["Used to generate ",(0,r.jsx)(i.code,{children:"DAO/Entity/DO"})," code files."]}),"\n",(0,r.jsxs)(i.p,{children:["For more information, please refer to the documentation: ",(0,r.jsx)(i.a,{href:"/en/docs/cli/gen-dao",children:"Dao/Do/Entity Generating"})]}),"\n",(0,r.jsxs)(i.h4,{id:"4-make-service",children:["4) ",(0,r.jsx)(i.code,{children:"make service"})]}),"\n",(0,r.jsxs)(i.p,{children:["Parses the ",(0,r.jsx)(i.code,{children:"logic"})," directory and automatically generates internal call interfaces. In ",(0,r.jsx)(i.code,{children:"Goland IDE"}),", this command is often used in conjunction with an automated ",(0,r.jsx)(i.code,{children:"Watcher"})," file change to auto-generate content; see the official documentation for details."]}),"\n",(0,r.jsxs)(i.p,{children:["For more information, please refer to the documentation: ",(0,r.jsx)(i.a,{href:"/en/docs/cli/gen-service",children:"Service Generating"})]}),"\n",(0,r.jsxs)(i.h4,{id:"5-make-enums",children:["5) ",(0,r.jsx)(i.code,{children:"make enums"})]}),"\n",(0,r.jsxs)(i.p,{children:["Used to parse specified code directories (default is ",(0,r.jsx)(i.code,{children:"api"})," directory) and auto-generate ",(0,r.jsx)(i.code,{children:"enums"})," load code."]}),"\n",(0,r.jsxs)(i.p,{children:["For more information, please refer to the documentation: ",(0,r.jsx)(i.a,{href:"/en/docs/cli/gen-enums",children:"Enums Maintenance"})]}),"\n",(0,r.jsx)(i.h4,{id:"6-more-commands",children:"6) More Commands"}),"\n",(0,r.jsxs)(i.p,{children:["For more command support, please refer to the framework's official tools introduction section: ",(0,r.jsx)(i.a,{href:"/en/docs/cli",children:"CLI Tool"})]})]})}function m(e={}){let{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},636739:function(e,i,n){n.d(i,{Z:function(){return o}});let o=n.p+"assets/images/353b86069be6e3cb8834aab4aad32e84-3b27bb6bd46ad3b6a67d0a65245b3487.png"},811153:function(e,i,n){n.d(i,{Z:function(){return o}});let o=n.p+"assets/images/424878f3a64d0cca7899c6fd13a8b9c7-2150624de20d43a359ff6a06e92b9377.png"},789738:function(e,i,n){n.d(i,{Z:function(){return o}});let o=n.p+"assets/images/b0035d25d52202b3f1b38d18980bf3ff-5db9af58149b3a773ea029236a8f80e0.png"},809466:function(e,i,n){n.d(i,{Z:function(){return o}});let o=n.p+"assets/images/f02efd1e4c03b3cb111cb7b9015290ee-492f73639f5718b6bd81e7487275cddc.png"},175456:function(e,i,n){n.d(i,{Z:function(){return o}});let o=n.p+"assets/images/f9028ffb7bc51e7496f1d55b79091f73-2aaf25707e67167e56683b5474ab72dd.png"},250065:function(e,i,n){n.d(i,{Z:function(){return a},a:function(){return t}});var o=n(667294);let r={},s=o.createContext(r);function t(e){let i=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(s.Provider,{value:i},e.children)}}}]);