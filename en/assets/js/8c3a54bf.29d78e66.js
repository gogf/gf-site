"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["57619"],{444859:function(e,n,o){o.r(n),o.d(n,{metadata:()=>a,contentTitle:()=>p,default:()=>l,assets:()=>c,toc:()=>i,frontMatter:()=>s});var a=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5B57\u5178\u7C7B\u578B-gmap/\u5B57\u5178\u7C7B\u578B-\u6027\u80FD\u6D4B\u8BD5","title":"Map - Performance","description":"Detailed testing and analysis of the performance of dictionary types. By comparing the performance of gmap in the GoFrame framework with the standard library\'s sync.Map, the efficiency in different scenarios of concurrent safety and non-concurrent safety is revealed. Includes performance benchmarking of different types of maps such as HashMap, ListMap, and TreeMap, providing developers with real-time reference for optimizing applications.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5B57\u5178\u7C7B\u578B-gmap/\u5B57\u5178\u7C7B\u578B-\u6027\u80FD\u6D4B\u8BD5.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5B57\u5178\u7C7B\u578B-gmap","slug":"/docs/components/container-gmap-benchmark","permalink":"/en/docs/components/container-gmap-benchmark","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5B57\u5178\u7C7B\u578B-gmap/\u5B57\u5178\u7C7B\u578B-\u6027\u80FD\u6D4B\u8BD5.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1740621099000,"sidebarPosition":1,"frontMatter":{"slug":"/docs/components/container-gmap-benchmark","title":"Map - Performance","sidebar_position":1,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","Dictionary Type","Performance Testing","Concurrent Safe","Non-Concurrent Safe","map performance","gmap","sync.Map","Benchmarking"],"description":"Detailed testing and analysis of the performance of dictionary types. By comparing the performance of gmap in the GoFrame framework with the standard library\'s sync.Map, the efficiency in different scenarios of concurrent safety and non-concurrent safety is revealed. Includes performance benchmarking of different types of maps such as HashMap, ListMap, and TreeMap, providing developers with real-time reference for optimizing applications."},"sidebar":"mainSidebar","previous":{"title":"Map - Usage","permalink":"/en/docs/components/container-gmap-example"},"next":{"title":"Map - Methods","permalink":"/en/docs/components/container-gmap-funcs"}}'),r=o("785893"),t=o("250065");let s={slug:"/docs/components/container-gmap-benchmark",title:"Map - Performance",sidebar_position:1,hide_title:!0,keywords:["GoFrame","GoFrame Framework","Dictionary Type","Performance Testing","Concurrent Safe","Non-Concurrent Safe","map performance","gmap","sync.Map","Benchmarking"],description:"Detailed testing and analysis of the performance of dictionary types. By comparing the performance of gmap in the GoFrame framework with the standard library's sync.Map, the efficiency in different scenarios of concurrent safety and non-concurrent safety is revealed. Includes performance benchmarking of different types of maps such as HashMap, ListMap, and TreeMap, providing developers with real-time reference for optimizing applications."},p=void 0,c={},i=[{value:"Performance Testing",id:"performance-testing",level:2},{value:"Concurrent Safety",id:"concurrent-safety",level:3},{value:"Non-Concurrent Safety",id:"non-concurrent-safety",level:3},{value:"Performance of Different Types of Maps",id:"performance-of-different-types-of-maps",level:3},{value:"Performance Comparison of <code>gmap</code> and <code>sync.Map</code>",id:"performance-comparison-of-gmap-and-syncmap",level:3}];function m(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,r.jsx)(n.h3,{id:"concurrent-safety",children:"Concurrent Safety"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/gogf/gf/blob/master/container/gmap/gmap_z_bench_safe_test.go",children:"https://github.com/gogf/gf/blob/master/container/gmap/gmap_z_bench_safe_test.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"goos: linux\ngoarch: amd64\nBenchmark_IntIntMap_Set-4               10000000               202 ns/op              15 B/op          0 allocs/op\nBenchmark_IntAnyMap_Set-4               10000000               262 ns/op              29 B/op          1 allocs/op\nBenchmark_IntStrMap_Set-4               10000000               241 ns/op              22 B/op          0 allocs/op\nBenchmark_AnyAnyMap_Set-4                5000000               359 ns/op              40 B/op          2 allocs/op\nBenchmark_StrIntMap_Set-4                5000000               305 ns/op              26 B/op          1 allocs/op\nBenchmark_StrAnyMap_Set-4                5000000               354 ns/op              40 B/op          2 allocs/op\nBenchmark_StrStrMap_Set-4                5000000               338 ns/op              32 B/op          1 allocs/op\nBenchmark_IntIntMap_Get-4               20000000              86.6 ns/op               0 B/op          0 allocs/op\nBenchmark_IntAnyMap_Get-4               30000000              69.7 ns/op               0 B/op          0 allocs/op\nBenchmark_IntStrMap_Get-4               30000000              69.6 ns/op               0 B/op          0 allocs/op\nBenchmark_AnyAnyMap_Get-4               20000000              74.4 ns/op               0 B/op          0 allocs/op\nBenchmark_StrIntMap_Get-4               20000000               116 ns/op               7 B/op          0 allocs/op\nBenchmark_StrAnyMap_Get-4               20000000              92.3 ns/op               7 B/op          0 allocs/op\nBenchmark_StrStrMap_Get-4               20000000              91.9 ns/op               7 B/op          0 allocs/op\n"})}),"\n",(0,r.jsx)(n.h3,{id:"non-concurrent-safety",children:"Non-Concurrent Safety"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/gogf/gf/blob/master/container/gmap/gmap_z_bench_unsafe_test.go",children:"https://github.com/gogf/gf/blob/master/container/gmap/gmap_z_bench_unsafe_test.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"goos: linux\ngoarch: amd64\nBenchmark_Unsafe_IntIntMap_Set-4        10000000               318 ns/op              62 B/op          0 allocs/op\nBenchmark_Unsafe_IntAnyMap_Set-4         5000000               282 ns/op              57 B/op          1 allocs/op\nBenchmark_Unsafe_IntStrMap_Set-4         5000000               332 ns/op              82 B/op          1 allocs/op\nBenchmark_Unsafe_AnyAnyMap_Set-4         3000000               471 ns/op              73 B/op          2 allocs/op\nBenchmark_Unsafe_StrIntMap_Set-4         5000000               429 ns/op              82 B/op          1 allocs/op\nBenchmark_Unsafe_StrAnyMap_Set-4         3000000               424 ns/op              73 B/op          2 allocs/op\nBenchmark_Unsafe_StrStrMap_Set-4         2000000               515 ns/op              96 B/op          2 allocs/op\nBenchmark_Unsafe_IntIntMap_Get-4        10000000               133 ns/op               0 B/op          0 allocs/op\nBenchmark_Unsafe_IntAnyMap_Get-4        20000000               134 ns/op               0 B/op          0 allocs/op\nBenchmark_Unsafe_IntStrMap_Get-4        10000000               126 ns/op               0 B/op          0 allocs/op\nBenchmark_Unsafe_AnyAnyMap_Get-4        10000000               166 ns/op               0 B/op          0 allocs/op\nBenchmark_Unsafe_StrIntMap_Get-4         5000000               246 ns/op               7 B/op          0 allocs/op\nBenchmark_Unsafe_StrAnyMap_Get-4        10000000               238 ns/op               7 B/op          0 allocs/op\nBenchmark_Unsafe_StrStrMap_Get-4         5000000               229 ns/op               7 B/op          0 allocs/op\n"})}),"\n",(0,r.jsx)(n.h3,{id:"performance-of-different-types-of-maps",children:"Performance of Different Types of Maps"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/gogf/gf/blob/master/container/gmap/gmap_z_bench_maps_test.go",children:"https://github.com/gogf/gf/blob/master/container/gmap/gmap_z_bench_maps_test.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"goos: linux\ngoarch: amd64\nBenchmark_HashMap_Set-4                  5000000               349 ns/op              40 B/op          2 allocs/op\nBenchmark_ListMap_Set-4                  3000000               455 ns/op              87 B/op          3 allocs/op\nBenchmark_TreeMap_Set-4                  3000000               481 ns/op              28 B/op          2 allocs/op\nBenchmark_HashMap_Get-4                 30000000              67.8 ns/op               0 B/op          0 allocs/op\nBenchmark_ListMap_Get-4                 20000000              74.5 ns/op               0 B/op          0 allocs/op\nBenchmark_TreeMap_Get-4                 20000000               189 ns/op               8 B/op          1 allocs/op\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"performance-comparison-of-gmap-and-syncmap",children:["Performance Comparison of ",(0,r.jsx)(n.code,{children:"gmap"})," and ",(0,r.jsx)(n.code,{children:"sync.Map"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"sync.Map"})," was introduced in Go language from version ",(0,r.jsx)(n.code,{children:"1.9"})," as a concurrent-safe map, but ",(0,r.jsx)(n.code,{children:"gmap"})," offers better performance compared to the standard library's ",(0,r.jsx)(n.code,{children:"sync.Map"}),", and has richer functionalities."]}),"\n",(0,r.jsxs)(n.p,{children:["Let's take a look at the benchmark comparison results: ",(0,r.jsx)(n.a,{href:"https://github.com/gogf/gf/blob/master/container/gmap/gmap_z_bench_syncmap_test.go",children:"https://github.com/gogf/gf/blob/master/container/gmap/gmap_z_bench_syncmap_test.go"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"goos: linux\ngoarch: amd64\nBenchmark_GMapSet-4                     10000000               209 ns/op              15 B/op          0 allocs/op\nBenchmark_SyncMapSet-4                   3000000               451 ns/op              67 B/op          3 allocs/op\nBenchmark_GMapGet-4                     30000000              66.4 ns/op               0 B/op          0 allocs/op\nBenchmark_SyncMapGet-4                  30000000              36.0 ns/op               0 B/op          0 allocs/op\nBenchmark_GMapRemove-4                  10000000               207 ns/op               0 B/op          0 allocs/op\nBenchmark_SyncMapRmove-4                30000000              42.4 ns/op               0 B/op          0 allocs/op\n"})})]})}function l(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},250065:function(e,n,o){o.d(n,{Z:function(){return p},a:function(){return s}});var a=o(667294);let r={},t=a.createContext(r);function s(e){let n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);