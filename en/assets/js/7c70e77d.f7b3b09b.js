"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["38600"],{889588:function(e,n,l){l.r(n),l.d(n,{metadata:()=>o,contentTitle:()=>r,default:()=>d,assets:()=>c,toc:()=>L,frontMatter:()=>i});var o=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6-\u65E5\u5FD7\u7EA7\u522B","title":"Logging - Log Level","description":"Using the log component in the GoFrame framework to manage and set log levels, including specific usage examples of SetLevel, SetLevelStr, and SetLevelPrint methods. We also discuss how to filter and display log content through different log level names for flexible log management.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6-\u65E5\u5FD7\u7EA7\u522B.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6","slug":"/docs/core/glog-level","permalink":"/en/docs/core/glog-level","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6-\u65E5\u5FD7\u7EA7\u522B.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":1,"frontMatter":{"slug":"/docs/core/glog-level","title":"Logging - Log Level","sidebar_position":1,"hide_title":true,"keywords":["GoFrame","Log Component","Log Level","GoFrame Framework","SetLevel","SetLevelStr","SetLevelPrint","Level Name","glog","Log Output"],"description":"Using the log component in the GoFrame framework to manage and set log levels, including specific usage examples of SetLevel, SetLevelStr, and SetLevelPrint methods. We also discuss how to filter and display log content through different log level names for flexible log management."},"sidebar":"mainSidebar","previous":{"title":"Logging - Configuration","permalink":"/en/docs/core/glog-config"},"next":{"title":"Logging - File Directory","permalink":"/en/docs/core/glog-file-folder"}}'),t=l("785893"),s=l("250065");let i={slug:"/docs/core/glog-level",title:"Logging - Log Level",sidebar_position:1,hide_title:!0,keywords:["GoFrame","Log Component","Log Level","GoFrame Framework","SetLevel","SetLevelStr","SetLevelPrint","Level Name","glog","Log Output"],description:"Using the log component in the GoFrame framework to manage and set log levels, including specific usage examples of SetLevel, SetLevelStr, and SetLevelPrint methods. We also discuss how to filter and display log content through different log level names for flexible log management."},r=void 0,c={},L=[{value:"Log Level",id:"log-level",level:2},{value:"<code>SetLevel</code> Method",id:"setlevel-method",level:3},{value:"<code>SetLevelStr</code> Method",id:"setlevelstr-method",level:3},{value:"<code>SetLevelPrint</code> Method",id:"setlevelprint-method",level:3},{value:"Level Name",id:"level-name",level:2}];function a(e){let n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"log-level",children:"Log Level"}),"\n",(0,t.jsx)(n.p,{children:"Log levels are used to manage the output of logs, allowing us to enable or disable specific log content by setting particular levels. The log level can be set using two methods:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func (l *Logger) SetLevel(level int)\nfunc (l *Logger) SetLevelStr(levelStr string) error\nfunc (l *Logger) SetLevelPrint(enabled bool)\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"setlevel-method",children:[(0,t.jsx)(n.code,{children:"SetLevel"})," Method"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"SetLevel"})," method allows you to set the log level, and the ",(0,t.jsx)(n.code,{children:"glog"})," module supports the following log level constants:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"LEVEL_ALL\nLEVEL_DEV\nLEVEL_PROD\nLEVEL_DEBU\nLEVEL_INFO\nLEVEL_NOTI\nLEVEL_WARN\nLEVEL_ERRO\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can combine these levels using ",(0,t.jsx)(n.code,{children:"bitwise operations"}),", for example, ",(0,t.jsx)(n.code,{children:"LEVEL_ALL"})," is equivalent to ",(0,t.jsx)(n.code,{children:"LEVEL_DEBU | LEVEL_INFO | LEVEL_NOTI | LEVEL_WARN | LEVEL_ERRO | LEVEL_CRIT"}),". You can also filter out ",(0,t.jsx)(n.code,{children:"LEVEL_DEBU/LEVEL_INFO/LEVEL_NOTI"})," log content with ",(0,t.jsx)(n.code,{children:"LEVEL_ALL & ^LEVEL_DEBU & ^LEVEL_INFO & ^LEVEL_NOTI"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["There are other levels in the log module, such as ",(0,t.jsx)(n.code,{children:"CRIT/PANI/FATA"}),", but these levels represent very serious errors and cannot be masked by the developer in the log level. For example, during serious errors, ",(0,t.jsx)(n.code,{children:"PANI/FATA"})," error levels will trigger additional system actions: ",(0,t.jsx)(n.code,{children:"panic"}),"/",(0,t.jsx)(n.code,{children:"exit"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"Example of use:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "github.com/gogf/gf/v2/os/glog"\n)\n\nfunc main() {\n    ctx := context.TODO()\n    l := glog.New()\n    l.Info(ctx, "info1")\n    l.SetLevel(glog.LEVEL_ALL ^ glog.LEVEL_INFO)\n    l.Info(ctx, "info2")\n}\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"After execution, the output result is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"2021-12-31 11:16:57.272 [INFO] info1\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"setlevelstr-method",children:[(0,t.jsx)(n.code,{children:"SetLevelStr"})," Method"]}),"\n",(0,t.jsxs)(n.p,{children:["In most scenarios, you can set the log level using strings with the ",(0,t.jsx)(n.code,{children:"SetLevelStr"})," method. The ",(0,t.jsx)(n.code,{children:"level"})," configuration item in the configuration file is also set using strings. The supported log level strings, which are case-insensitive, are as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'"ALL":      LEVEL_DEBU | LEVEL_INFO | LEVEL_NOTI | LEVEL_WARN | LEVEL_ERRO | LEVEL_CRIT,\n"DEV":      LEVEL_DEBU | LEVEL_INFO | LEVEL_NOTI | LEVEL_WARN | LEVEL_ERRO | LEVEL_CRIT,\n"DEVELOP":  LEVEL_DEBU | LEVEL_INFO | LEVEL_NOTI | LEVEL_WARN | LEVEL_ERRO | LEVEL_CRIT,\n"PROD":     LEVEL_WARN | LEVEL_ERRO | LEVEL_CRIT,\n"PRODUCT":  LEVEL_WARN | LEVEL_ERRO | LEVEL_CRIT,\n"DEBU":     LEVEL_DEBU | LEVEL_INFO | LEVEL_NOTI | LEVEL_WARN | LEVEL_ERRO | LEVEL_CRIT,\n"DEBUG":    LEVEL_DEBU | LEVEL_INFO | LEVEL_NOTI | LEVEL_WARN | LEVEL_ERRO | LEVEL_CRIT,\n"INFO":     LEVEL_INFO | LEVEL_NOTI | LEVEL_WARN | LEVEL_ERRO | LEVEL_CRIT,\n"NOTI":     LEVEL_NOTI | LEVEL_WARN | LEVEL_ERRO | LEVEL_CRIT,\n"NOTICE":   LEVEL_NOTI | LEVEL_WARN | LEVEL_ERRO | LEVEL_CRIT,\n"WARN":     LEVEL_WARN | LEVEL_ERRO | LEVEL_CRIT,\n"WARNING":  LEVEL_WARN | LEVEL_ERRO | LEVEL_CRIT,\n"ERRO":     LEVEL_ERRO | LEVEL_CRIT,\n"ERROR":    LEVEL_ERRO | LEVEL_CRIT,\n"CRIT":     LEVEL_CRIT,\n"CRITICAL": LEVEL_CRIT,\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can see that the log levels set by the level names are filtered according to their severity: ",(0,t.jsx)(n.code,{children:"DEBU < INFO < NOTI < WARN < ERRO < CRIT"}),". It also supports common deployment mode configuration names such as ",(0,t.jsx)(n.code,{children:"ALL"}),", ",(0,t.jsx)(n.code,{children:"DEV"}),", ",(0,t.jsx)(n.code,{children:"PROD"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example of use:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "github.com/gogf/gf/v2/os/glog"\n)\n\nfunc main() {\n    ctx := context.TODO()\n    l := glog.New()\n    l.Info(ctx, "info1")\n    l.SetLevelStr("notice")\n    l.Info(ctx, "info2")\n}\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"After execution, the output result is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"2021-12-31 11:20:15.019 [INFO] info1\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"setlevelprint-method",children:[(0,t.jsx)(n.code,{children:"SetLevelPrint"})," Method"]}),"\n",(0,t.jsx)(n.p,{children:"This method controls whether the default log output prints the log level indicator. By default, it prints the log level indicator."}),"\n",(0,t.jsx)(n.p,{children:"Example of use:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "github.com/gogf/gf/v2/os/glog"\n)\n\nfunc main() {\n    ctx := context.TODO()\n    l := glog.New()\n    l.Info(ctx, "info1")\n    l.SetLevelPrint(false)\n    l.Info(ctx, "info2")\n}\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"After execution, the output result is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"2023-03-14 10:28:18.598 [INFO] info1\n2023-03-14 10:28:18.631 info1\n"})}),"\n",(0,t.jsx)(n.h2,{id:"level-name",children:"Level Name"}),"\n",(0,t.jsx)(n.p,{children:"In logs, you will see content with various log levels printed in front, each with different level names. The default log level names are:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'LEVEL_DEBU: "DEBU",\nLEVEL_INFO: "INFO",\nLEVEL_NOTI: "NOTI",\nLEVEL_WARN: "WARN",\nLEVEL_ERRO: "ERRO",\nLEVEL_CRIT: "CRIT",\nLEVEL_PANI: "PANI",\nLEVEL_FATA: "FATA",\n'})}),"\n",(0,t.jsx)(n.p,{children:"To maintain a unified log format and ensure an elegant layout, the names of log levels use the first four characters of the English words. If you have special requirements to change the log level names, you can set them using the following methods:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func (l *Logger) SetLevelPrefix(level int, prefix string)\nfunc (l *Logger) SetLevelPrefixes(prefixes map[int]string)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example of use:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "github.com/gogf/gf/v2/os/glog"\n)\n\nfunc main() {\n    ctx := context.TODO()\n    l := glog.New()\n    l.SetLevelPrefix(glog.LEVEL_DEBU, "debug")\n    l.Debug(ctx, "test")\n}\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"After execution, the console output is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"2021-12-31 11:21:45.754 [debug] test\n"})})]})}function d(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},250065:function(e,n,l){l.d(n,{Z:function(){return r},a:function(){return i}});var o=l(667294);let t={},s=o.createContext(t);function i(e){let n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);