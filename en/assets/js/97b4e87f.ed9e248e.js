"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["42116"],{933527:function(e,n,r){r.r(n),r.d(n,{metadata:()=>o,contentTitle:()=>l,default:()=>m,assets:()=>a,toc:()=>d,frontMatter:()=>s});var o=JSON.parse('{"id":"docs/\u5FAE\u670D\u52A1\u5F00\u53D1/\u5FAE\u670D\u52A1\u5F00\u53D1","title":"Microservice Development","description":"The microservice development features of the GoFrame framework, including microservice components supporting HTTP and GRPC protocols, low coupling design, use of service registration and discovery components, and traceability capabilities with example tutorials, helping teams quickly implement microservice development and transformation. Examples cover how to use GoFrame for microservice architecture setup and communication.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u5FAE\u670D\u52A1\u5F00\u53D1/\u5FAE\u670D\u52A1\u5F00\u53D1.md","sourceDirName":"docs/\u5FAE\u670D\u52A1\u5F00\u53D1","slug":"/docs/micro-service","permalink":"/en/docs/micro-service","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u5FAE\u670D\u52A1\u5F00\u53D1/\u5FAE\u670D\u52A1\u5F00\u53D1.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732716970000,"sidebarPosition":6,"frontMatter":{"slug":"/docs/micro-service","title":"Microservice Development","sidebar_position":6,"hide_title":true,"keywords":["GoFrame","Microservice","HTTP Protocol","GRPC Protocol","Componentization","Service Discovery","Registration Component","Traceability","protobuf","Development Tutorial"],"description":"The microservice development features of the GoFrame framework, including microservice components supporting HTTP and GRPC protocols, low coupling design, use of service registration and discovery components, and traceability capabilities with example tutorials, helping teams quickly implement microservice development and transformation. Examples cover how to use GoFrame for microservice architecture setup and communication."},"sidebar":"mainSidebar","previous":{"title":"FAQ","permalink":"/en/docs/web/faq"},"next":{"title":"Preparation","permalink":"/en/docs/micro-service/prepare-environment"}}'),i=r("785893"),t=r("250065"),c=r("203105");let s={slug:"/docs/micro-service",title:"Microservice Development",sidebar_position:6,hide_title:!0,keywords:["GoFrame","Microservice","HTTP Protocol","GRPC Protocol","Componentization","Service Discovery","Registration Component","Traceability","protobuf","Development Tutorial"],description:"The microservice development features of the GoFrame framework, including microservice components supporting HTTP and GRPC protocols, low coupling design, use of service registration and discovery components, and traceability capabilities with example tutorials, helping teams quickly implement microservice development and transformation. Examples cover how to use GoFrame for microservice architecture setup and communication."},l=void 0,a={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Simple Example",id:"simple-example",level:2},{value:"<code>HTTP</code> Microservice Example",id:"http-microservice-example",level:3},{value:"<code>server.go</code>",id:"servergo",level:4},{value:"<code>client.go</code>",id:"clientgo",level:4},{value:"Execution Results",id:"execution-results",level:4},{value:"<code>GRPC</code> Microservice Example",id:"grpc-microservice-example",level:3},{value:"<code>helloworld.proto</code>",id:"helloworldproto",level:4},{value:"<code>controller.go</code>",id:"controllergo",level:4},{value:"<code>config.yaml</code>",id:"configyaml",level:4},{value:"<code>server.go</code>",id:"servergo-1",level:4},{value:"<code>client.go</code>",id:"clientgo-1",level:4},{value:"Execution Results",id:"execution-results-1",level:4},{value:"Documentation",id:"documentation",level:2}];function h(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["The complete microservice features and related components are provided starting from version ",(0,i.jsx)(n.code,{children:"v2.4"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GoFrame"})," framework supports microservice mode development, providing commonly used microservice components, development tools, and development tutorials to help teams quickly transition to microservices."]}),"\n",(0,i.jsx)(n.h2,{id:"simple-example",children:"Simple Example"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GoFrame"})," microservice components feature low coupling and generic design, supporting most microservice communication protocols. In the official documentation, we use examples of ",(0,i.jsx)(n.code,{children:"HTTP"})," and ",(0,i.jsx)(n.code,{children:"GRPC"})," protocols to introduce microservice development and the use of component tools. Since ",(0,i.jsx)(n.code,{children:"HTTP Web"})," development has a relatively rich and comprehensive independent chapter introduction, most of the microservice chapter is introduced with a focus on ",(0,i.jsx)(n.code,{children:"GRPC"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"http-microservice-example",children:[(0,i.jsx)(n.code,{children:"HTTP"})," Microservice Example"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/gogf/gf/tree/master/example/registry/file",children:"https://github.com/gogf/gf/tree/master/example/registry/file"})}),"\n",(0,i.jsx)(n.h4,{id:"servergo",children:(0,i.jsx)(n.code,{children:"server.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/contrib/registry/file/v2"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n    "github.com/gogf/gf/v2/net/gsvc"\n    "github.com/gogf/gf/v2/os/gfile"\n)\n\nfunc main() {\n    gsvc.SetRegistry(file.New(gfile.Temp("gsvc")))\n\n    s := g.Server(`hello.svc`)\n    s.BindHandler("/", func(r *ghttp.Request) {\n        g.Log().Info(r.Context(), `request received`)\n        r.Response.Write(`Hello world`)\n    })\n    s.Run()\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["As you can see, an ",(0,i.jsx)(n.code,{children:"HTTP"})," microservice end and a regular ",(0,i.jsx)(n.code,{children:"Web Server"})," end have no significant differences, but there is an additional line of code at the top:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'gsvc.SetRegistry(file.New(gfile.Temp("gsvc")))\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This line of code is used to enable and register the registration and discovery component used by the current service. In this example, ",(0,i.jsx)(n.code,{children:'file.New(gfile.Temp("gsvc"))'})," is a service registration and discovery component based on local system files, where ",(0,i.jsx)(n.code,{children:'gfile.Temp("gsvc")'})," specifies the path to store service files, for example, in ",(0,i.jsx)(n.code,{children:"Linux/MacOS"})," systems, it points to the ",(0,i.jsx)(n.code,{children:"/tmp/gsvc"})," directory. File system-based registration discovery is only used for local microservice examples and cannot be used for cross-node communication. In production environments, we often use other service registration and discovery components, such as ",(0,i.jsx)(n.code,{children:"etcd, polaris, zookeeper"}),", etc. The community components of the framework already provide implementations of commonly used service registration and discovery components."]}),"\n",(0,i.jsxs)(n.p,{children:["Secondly, in this example, we set a name ",(0,i.jsx)(n.code,{children:"hello.svc"})," for the ",(0,i.jsx)(n.code,{children:"Server"}),", which represents the name of the microservice bound by this ",(0,i.jsx)(n.code,{children:"Server"}),". The service name serves as a unique identifier for microservices, used for identification communication between services. When the service registration component registration is enabled, the ",(0,i.jsx)(n.code,{children:"HTTP Server"})," will register its access address to the service registration component at runtime, making it easier for other services to access it through the same component by service name."]}),"\n",(0,i.jsx)(n.h4,{id:"clientgo",children:(0,i.jsx)(n.code,{children:"client.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "time"\n\n    "github.com/gogf/gf/contrib/registry/file/v2"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/gsvc"\n    "github.com/gogf/gf/v2/os/gctx"\n    "github.com/gogf/gf/v2/os/gfile"\n)\n\nfunc main() {\n    gsvc.SetRegistry(file.New(gfile.Temp("gsvc")))\n\n    client := g.Client()\n    for i := 0; i < 10; i++ {\n        ctx := gctx.New()\n        res, err := client.Get(ctx, `http://hello.svc/`)\n        if err != nil {\n            panic(err)\n        }\n        g.Log().Debug(ctx, res.ReadAllString())\n        res.Close()\n        time.Sleep(time.Second)\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The client creates an ",(0,i.jsx)(n.code,{children:"HTTP Client"})," through ",(0,i.jsx)(n.code,{children:"g.Client()"})," and accesses the server through the address ",(0,i.jsx)(n.code,{children:"http://hello.svc/"}),", where ",(0,i.jsx)(n.code,{children:"hello.svc"})," is the microservice name bound by the ",(0,i.jsx)(n.code,{children:"Server"})," end previously. When the client accesses through the microservice name, the service registration and discovery component will perform retrieval at the underlying level and find the corresponding server address for communication."]}),"\n",(0,i.jsx)(n.h4,{id:"execution-results",children:"Execution Results"}),"\n",(0,i.jsxs)(n.p,{children:["First, run the ",(0,i.jsx)(n.code,{children:"server.go"})," server to run a simple service, and then execute ",(0,i.jsx)(n.code,{children:"client.go"})," to request the service by service name."]}),"\n",(0,i.jsx)(n.p,{children:"After execution, the client outputs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ go run client.go\n2023-03-14 20:22:10.006 [DEBU] {8054f3a48c484c1760fb416bb3df20a4} Hello world\n2023-03-14 20:22:11.007 [DEBU] {6831cae08c484c1761fb416b9d4df851} Hello world\n2023-03-14 20:22:12.008 [DEBU] {9035761c8d484c1762fb416b1e648b81} Hello world\n2023-03-14 20:22:13.011 [DEBU] {a05a32588d484c1763fb416bc19ff667} Hello world\n2023-03-14 20:22:14.012 [DEBU] {40fdea938d484c1764fb416b8459fc43} Hello world\n2023-03-14 20:22:15.014 [DEBU] {686c9acf8d484c1765fb416b3697d369} Hello world\n2023-03-14 20:22:16.015 [DEBU] {906a470b8e484c1766fb416b85b9867e} Hello world\n2023-03-14 20:22:17.017 [DEBU] {28c7fd468e484c1767fb416b86e5557f} Hello world\n2023-03-14 20:22:18.018 [DEBU] {90d2ad828e484c1768fb416bfcde738f} Hello world\n2023-03-14 20:22:19.019 [DEBU] {d05559be8e484c1769fb416baad06f23} Hello world\n"})}),"\n",(0,i.jsx)(n.p,{children:"The server outputs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ go run server.go\n2023-03-14 20:20:06.364 [INFO] pid[96421]: http server started listening on [:61589]\n2023-03-14 20:20:06.364 [INFO] openapi specification is disabled\n2023-03-14 20:20:06.364 [DEBU] service register: &{Head: Deployment: Namespace: Name:hello.svc Version: Endpoints:10.35.12.81:61589 Metadata:map[insecure:true protocol:http]}\n\n   SERVER   | DOMAIN  | ADDRESS | METHOD | ROUTE |                             HANDLER                             |    MIDDLEWARE\n------------|---------|---------|--------|-------|-----------------------------------------------------------------|--------------------\n  hello.svc | default | :61589  | ALL    | /     | main.main.func1                                                 |\n------------|---------|---------|--------|-------|-----------------------------------------------------------------|--------------------\n  hello.svc | default | :61589  | ALL    | /*    | github.com/gogf/gf/v2/net/ghttp.internalMiddlewareServerTracing | GLOBAL MIDDLEWARE\n------------|---------|---------|--------|-------|-----------------------------------------------------------------|--------------------\n\n2023-03-14 20:22:10.006 [INFO] {8054f3a48c484c1760fb416bb3df20a4} request received\n2023-03-14 20:22:11.007 [INFO] {6831cae08c484c1761fb416b9d4df851} request received\n2023-03-14 20:22:12.008 [INFO] {9035761c8d484c1762fb416b1e648b81} request received\n2023-03-14 20:22:13.010 [INFO] {a05a32588d484c1763fb416bc19ff667} request received\n2023-03-14 20:22:14.012 [INFO] {40fdea938d484c1764fb416b8459fc43} request received\n2023-03-14 20:22:15.013 [INFO] {686c9acf8d484c1765fb416b3697d369} request received\n2023-03-14 20:22:16.015 [INFO] {906a470b8e484c1766fb416b85b9867e} request received\n2023-03-14 20:22:17.016 [INFO] {28c7fd468e484c1767fb416b86e5557f} request received\n2023-03-14 20:22:18.017 [INFO] {90d2ad828e484c1768fb416bfcde738f} request received\n2023-03-14 20:22:19.019 [INFO] {d05559be8e484c1769fb416baad06f23} request received\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"grpc-microservice-example",children:[(0,i.jsx)(n.code,{children:"GRPC"})," Microservice Example"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/gogf/gf/tree/master/example/rpc/grpcx/basic",children:"https://github.com/gogf/gf/tree/master/example/rpc/grpcx/basic"})}),"\n",(0,i.jsx)(n.h4,{id:"helloworldproto",children:(0,i.jsx)(n.code,{children:"helloworld.proto"})}),"\n",(0,i.jsxs)(n.p,{children:["The main difference between ",(0,i.jsx)(n.code,{children:"grpc"})," and ",(0,i.jsx)(n.code,{children:"http"})," protocols is that ",(0,i.jsx)(n.code,{children:"grpc"})," requires ",(0,i.jsx)(n.code,{children:"protobuf"})," to define ",(0,i.jsx)(n.code,{children:"API"})," interfaces and data structures."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'syntax = "proto3";\n\npackage protobuf;\n\noption go_package = "github.com/gogf/gf/grpc/example/helloworld/protobuf";\n\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user\'s name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The above ",(0,i.jsx)(n.code,{children:"protobuf"})," file is compiled with the following command (please install the ",(0,i.jsx)(n.code,{children:"protoc"})," tool in advance):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"gf gen pb\n"})}),"\n",(0,i.jsxs)(n.p,{children:["It will generate the corresponding ",(0,i.jsx)(n.code,{children:"proto go"})," data structure file and ",(0,i.jsx)(n.code,{children:"grpc"})," interface file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"helloworld.pb.go\nhelloworld_grpc.pb.go\n"})}),"\n",(0,i.jsx)(n.h4,{id:"controllergo",children:(0,i.jsx)(n.code,{children:"controller.go"})}),"\n",(0,i.jsxs)(n.p,{children:["The controller is used to implement the interface methods defined in ",(0,i.jsx)(n.code,{children:"proto"})," (if using the framework's standardized engineering directory structure, this controller code file is also automatically generated by the framework's ",(0,i.jsx)(n.code,{children:"gf gen pb"})," tool, and developers only need to fill in the corresponding method's specific implementation):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type Controller struct {\n    protobuf.UnimplementedGreeterServer\n}\n\nfunc Register(s *grpcx.GrpcServer) {\n    protobuf.RegisterGreeterServer(s.Server, &Controller{})\n}\n\n// SayHello implements helloworld.GreeterServer\nfunc (s *Controller) SayHello(ctx context.Context, in *protobuf.HelloRequest) (*protobuf.HelloReply, error) {\n    return &protobuf.HelloReply{Message: "Hello " + in.GetName()}, nil\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"configyaml",children:(0,i.jsx)(n.code,{children:"config.yaml"})}),"\n",(0,i.jsxs)(n.p,{children:["The server configuration file specifies that the service's name is ",(0,i.jsx)(n.code,{children:"demo"}),". The microservice name is used as the unique identification mark for service communication. When the server's listening port is not explicitly specified, the server will randomly listen on an available local port. In microservice mode, since communication is conducted using the service name, the server port often does not need to be explicitly specified, and random listening is sufficient."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'grpc:\n  name:            "demo"\n  logPath:          "./log"\n  logStdout:        true\n  errorLogEnabled:  true\n  accessLogEnabled: true\n  errorStack:       true\n'})}),"\n",(0,i.jsx)(n.h4,{id:"servergo-1",children:(0,i.jsx)(n.code,{children:"server.go"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"grpc"})," server does not explicitly specify the service registration and discovery component used by the server by default uses the system file registration discovery component, which is only used for single-machine testing. The ",(0,i.jsx)(n.code,{children:"controller.Register"})," call registers the specific interface implementation into the server via the controller registration method generated by our tool."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/contrib/rpc/grpcx/v2"\n    "github.com/gogf/gf/example/rpc/grpcx/basic/controller"\n)\n\nfunc main() {\n    s := grpcx.Server.New()\n    controller.Register(s)\n    s.Run()\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"clientgo-1",children:(0,i.jsx)(n.code,{children:"client.go"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"grpc"})," client needs to specify the specific name of the server service when creating the connection. Here, the server service name is ",(0,i.jsx)(n.code,{children:"demo"}),", which is the microservice name mentioned above. When the client does not explicitly specify the service registration and discovery component used, it defaults to the system file registration discovery component for single-machine testing."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/contrib/rpc/grpcx/v2"\n    "github.com/gogf/gf/example/rpc/grpcx/basic/protobuf"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nfunc main() {\n    var (\n        ctx    = gctx.New()\n        conn   = grpcx.Client.MustNewGrpcClientConn("demo")\n        client = protobuf.NewGreeterClient(conn)\n    )\n    res, err := client.SayHello(ctx, &protobuf.HelloRequest{Name: "World"})\n    if err != nil {\n        g.Log().Error(ctx, err)\n        return\n    }\n    g.Log().Debug(ctx, "Response:", res.Message)\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"execution-results-1",children:"Execution Results"}),"\n",(0,i.jsxs)(n.p,{children:["The server output: You can see the server output some ",(0,i.jsx)(n.code,{children:"DEBU"})," debug information to indicate some details of the service registration. At the same time, because the server's listening port was not explicitly specified, a local port ",(0,i.jsx)(n.code,{children:"64517"})," was randomly listened on here."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'$ go run server.go\n2023-03-14 20:50:58.465 [DEBU] set default registry using file registry as no custom registry set\n2023-03-14 20:50:58.466 [DEBU] service register: &{Head: Deployment: Namespace: Name:demo Version: Endpoints:10.35.12.81:64517 Metadata:map[protocol:grpc]}\n2023-03-14 20:50:58.466 [INFO] pid[98982]: grpc server started listening on [:64517]\n2023-03-14 20:52:37.059 {9898c809364a4c17da79e47f3e6c3b8f} /protobuf.Greeter/SayHello, 0.003ms, name:"World", message:"Hello World"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The client output: The client accessed through the microservice name and received a return from the server. Note that in the client's log and the server's log, the chain tracing ",(0,i.jsx)(n.code,{children:"TraceID"})," is the same (",(0,i.jsx)(n.code,{children:"9898c809364a4c17da79e47f3e6c3b8f"}),"), indicating logs generated from the same request. The ",(0,i.jsx)(n.code,{children:"GoFrame"})," microservice feature enables traceability capabilities by default."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ go run client.go\n2023-03-14 20:52:37.060 [DEBU] {9898c809364a4c17da79e47f3e6c3b8f} Response: Hello World\n"})}),"\n",(0,i.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n","\n",(0,i.jsx)(c.Z,{})]})}function m(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},203105:function(e,n,r){r.d(n,{Z:()=>x});var o=r("785893");r("667294");var i=r("467026"),t=r("96693"),c=r("531183"),s=r("633876"),l=r("266026"),a=r("434751"),d=r("58608");let h={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function m(e){let{href:n,children:r}=e;return(0,o.jsx)(c.Z,{href:n,className:(0,i.Z)("card padding--lg",h.cardContainer),children:r})}function p(e){let{href:n,icon:r,title:t,description:c}=e;return(0,o.jsxs)(m,{href:n,children:[(0,o.jsxs)(d.Z,{as:"h2",className:(0,i.Z)("text--truncate",h.cardTitle),title:t,children:[r," ",t]}),c&&(0,o.jsx)("p",{className:(0,i.Z)("text--truncate",h.cardDescription),title:c,children:c})]})}function g(e){let{item:n}=e,r=(0,t.LM)(n),i=function(){let{selectMessage:e}=(0,s.c)();return n=>e(n,(0,a.I)({message:"1 item|{count} items",id:"theme.docs.DocCard.categoryDescription.plurals",description:"The default description for a category card in the generated index about how many items this category includes"},{count:n}))}();return r?(0,o.jsx)(p,{href:r,icon:"\uD83D\uDDC3\uFE0F",title:n.label,description:n.description??i(n.items.length)}):null}function u(e){let{item:n}=e,r=(0,l.Z)(n.href)?"\uD83D\uDCC4\uFE0F":"\uD83D\uDD17",i=(0,t.xz)(n.docId??void 0);return(0,o.jsx)(p,{href:n.href,icon:r,title:n.label,description:n.description??i?.description})}function f(e){let{item:n}=e;switch(n.type){case"link":return(0,o.jsx)(u,{item:n});case"category":return(0,o.jsx)(g,{item:n});default:throw Error(`unknown item type ${JSON.stringify(n)}`)}}function v(e){let{className:n}=e,r=(0,t.jA)();return(0,o.jsx)(x,{items:r.items,className:n})}function x(e){let{items:n,className:r}=e;if(!n)return(0,o.jsx)(v,{...e});let c=(0,t.MN)(n);return(0,o.jsx)("section",{className:(0,i.Z)("row",r),children:c.map((e,n)=>(0,o.jsx)("article",{className:"col col--6 margin-bottom--lg",children:(0,o.jsx)(f,{item:e})},n))})}},633876:function(e,n,r){r.d(n,{c:function(){return l}});var o=r(667294),i=r(49931);let t=["zero","one","two","few","many","other"];function c(e){return t.filter(n=>e.includes(n))}let s={locale:"en",pluralForms:c(["one","other"]),select:e=>1===e?"one":"other"};function l(){let e=function(){let{i18n:{currentLocale:e}}=(0,i.Z)();return(0,o.useMemo)(()=>{try{return function(e){let n=new Intl.PluralRules(e);return{locale:e,pluralForms:c(n.resolvedOptions().pluralCategories),select:e=>n.select(e)}}(e)}catch(n){return console.error(`Failed to use Intl.PluralRules for locale "${e}".
Docusaurus will fallback to the default (English) implementation.
Error: ${n.message}
`),s}},[e])}();return{selectMessage:(n,r)=>(function(e,n,r){let o=e.split("|");if(1===o.length)return o[0];o.length>r.pluralForms.length&&console.error(`For locale=${r.locale}, a maximum of ${r.pluralForms.length} plural forms are expected (${r.pluralForms.join(",")}), but the message contains ${o.length}: ${e}`);let i=r.select(n);return o[Math.min(r.pluralForms.indexOf(i),o.length-1)]})(r,n,e)}}},250065:function(e,n,r){r.d(n,{Z:function(){return s},a:function(){return c}});var o=r(667294);let i={},t=o.createContext(i);function c(e){let n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);