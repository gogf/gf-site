"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["42436"],{378701:function(e,t,n){n.r(t),n.d(t,{metadata:()=>d,contentTitle:()=>o,default:()=>u,assets:()=>r,toc:()=>l,frontMatter:()=>s});var d=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u94FE\u5F0F\u64CD\u4F5C/ORM\u94FE\u5F0F\u64CD\u4F5C-\u65F6\u95F4\u7EF4\u62A4/\u65F6\u95F4\u7EF4\u62A4-\u57FA\u672C\u4F7F\u7528","title":"Time Fields - Intro","description":"This article introduces the basic methods for managing database time fields using the GoFrame framework, including the mechanisms for writing and updating fields like created_at, updated_at, and deleted_at, and the impact of soft delete features on query and update operations. It also demonstrates methods for join queries and ignoring time features with Unscoped. Through these examples, you can effectively manage soft deletion and timestamps, ensuring the accuracy of database records.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u94FE\u5F0F\u64CD\u4F5C/ORM\u94FE\u5F0F\u64CD\u4F5C-\u65F6\u95F4\u7EF4\u62A4/\u65F6\u95F4\u7EF4\u62A4-\u57FA\u672C\u4F7F\u7528.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u94FE\u5F0F\u64CD\u4F5C/ORM\u94FE\u5F0F\u64CD\u4F5C-\u65F6\u95F4\u7EF4\u62A4","slug":"/docs/core/gdb-chaining-soft-time-example","permalink":"/en/docs/core/gdb-chaining-soft-time-example","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u94FE\u5F0F\u64CD\u4F5C/ORM\u94FE\u5F0F\u64CD\u4F5C-\u65F6\u95F4\u7EF4\u62A4/\u65F6\u95F4\u7EF4\u62A4-\u57FA\u672C\u4F7F\u7528.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732541616000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/core/gdb-chaining-soft-time-example","title":"Time Fields - Intro","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","Time Maintenance","Soft Delete","created_at","updated_at","deleted_at","Database Operations","Join Query","Unscoped","Time Fields"],"description":"This article introduces the basic methods for managing database time fields using the GoFrame framework, including the mechanisms for writing and updating fields like created_at, updated_at, and deleted_at, and the impact of soft delete features on query and update operations. It also demonstrates methods for join queries and ignoring time features with Unscoped. Through these examples, you can effectively manage soft deletion and timestamps, ensuring the accuracy of database records."},"sidebar":"mainSidebar","previous":{"title":"ORM Model - Time Fields","permalink":"/en/docs/core/gdb-chaining-soft-time"},"next":{"title":"Time Fields - Integer Fields","permalink":"/en/docs/core/gdb-chaining-soft-time-numeric-fields"}}'),a=n("785893"),i=n("250065");let s={slug:"/docs/core/gdb-chaining-soft-time-example",title:"Time Fields - Intro",sidebar_position:0,hide_title:!0,keywords:["GoFrame","Time Maintenance","Soft Delete","created_at","updated_at","deleted_at","Database Operations","Join Query","Unscoped","Time Fields"],description:"This article introduces the basic methods for managing database time fields using the GoFrame framework, including the mechanisms for writing and updating fields like created_at, updated_at, and deleted_at, and the impact of soft delete features on query and update operations. It also demonstrates methods for join queries and ignoring time features with Unscoped. Through these examples, you can effectively manage soft deletion and timestamps, ensuring the accuracy of database records."},o=void 0,r={},l=[{value:"Example SQL",id:"example-sql",level:2},{value:"<code>created_at</code> Writing Time",id:"created_at-writing-time",level:2},{value:"<code>deleted_at</code> Data Soft Delete",id:"deleted_at-data-soft-delete",level:2},{value:"<code>updated_at</code> Updating Time",id:"updated_at-updating-time",level:2},{value:"Scenarios of Join Query",id:"scenarios-of-join-query",level:2},{value:"<code>Unscoped</code> Ignoring Time Features",id:"unscoped-ignoring-time-features",level:2}];function c(e){let t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["In the following examples, it is assumed that the sample data tables include the fields ",(0,a.jsx)(t.code,{children:"created_at"}),", ",(0,a.jsx)(t.code,{children:"updated_at"}),", and ",(0,a.jsx)(t.code,{children:"deleted_at"}),", and that the field type is ",(0,a.jsx)(t.code,{children:"datetime"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"example-sql",children:"Example SQL"}),"\n",(0,a.jsxs)(t.p,{children:["This is the ",(0,a.jsx)(t.code,{children:"MySQL"})," table structure used in the subsequent example code."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"CREATE TABLE `user` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(45) NOT NULL,\n  `status` tinyint DEFAULT 0,\n  `created_at` datetime DEFAULT NULL,\n  `updated_at` datetime DEFAULT NULL,\n  `deleted_at` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nCREATE TABLE IF NOT EXISTS `user_detail` (\n    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n    `address` varchar(45) NOT NULL,\n    PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["If you choose to use the time field type, you need to set the field to allow ",(0,a.jsx)(t.code,{children:"NULL"}),", so that soft delete can take effect."]}),"\n",(0,a.jsxs)(t.li,{children:["If you try to test and view the ",(0,a.jsx)(t.code,{children:"SQL"})," statements executed by ",(0,a.jsx)(t.code,{children:"ORM"})," operations, it is recommended to enable ",(0,a.jsx)(t.code,{children:"debug"})," mode (related document: ",(0,a.jsx)(t.a,{href:"/en/docs/core/gdb-senior-debugging",children:"ORM Senior - Debug Mode"}),"), and ",(0,a.jsx)(t.code,{children:"SQL"})," statements will be automatically printed to the log output."]}),"\n"]})}),"\n",(0,a.jsxs)(t.h2,{id:"created_at-writing-time",children:[(0,a.jsx)(t.code,{children:"created_at"})," Writing Time"]}),"\n",(0,a.jsxs)(t.p,{children:["This time is automatically written when executing the ",(0,a.jsx)(t.code,{children:"Insert/InsertIgnore/BatchInsert/BatchInsertIgnore"})," methods, and subsequent update/delete operations will not change the content of the ",(0,a.jsx)(t.code,{children:"created_at"})," field."]}),"\n",(0,a.jsx)(t.admonition,{type:"warning",children:(0,a.jsxs)(t.p,{children:["It should be noted that the ",(0,a.jsx)(t.code,{children:"Replace"})," method will also update this field, as this operation is equivalent to deleting the existing old data and writing a new record."]})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-go",children:'// INSERT INTO `user`(`name`,`created_at`,`updated_at`) VALUES(\'john\', `2020-06-06 21:00:00`, `2020-06-06 21:00:00`)\ng.Model("user").Data(g.Map{"name": "john"}).Insert()\n\n// INSERT IGNORE INTO `user`(`id`,`name`,`created_at`,`updated_at`) VALUES(10000,\'john\', `2020-06-06 21:00:00`, `2020-06-06 21:00:00`)\ng.Model("user").Data(g.Map{"id": 10000, "name": "john"}).InsertIgnore()\n\n// REPLACE INTO `user`(`id`,`name`,`created_at`,`updated_at`) VALUES(10000,\'john\', `2020-06-06 21:00:00`, `2020-06-06 21:00:00`)\ng.Model("user").Data(g.Map{"id": 10000, "name": "john"}).Replace()\n\n// INSERT INTO `user`(`id`,`name`,`created_at`,`updated_at`) VALUES(10001,\'john\', `2020-06-06 21:00:00`, `2020-06-06 21:00:00`) ON DUPLICATE KEY UPDATE `id`=VALUES(`id`),`name`=VALUES(`name`),`updated_at`=VALUES(`updated_at`)\ng.Model("user").Data(g.Map{"id": 10001, "name": "john"}).Save()\n'})}),"\n",(0,a.jsxs)(t.h2,{id:"deleted_at-data-soft-delete",children:[(0,a.jsx)(t.code,{children:"deleted_at"})," Data Soft Delete"]}),"\n",(0,a.jsxs)(t.p,{children:["When soft delete exists (i.e., when the ",(0,a.jsx)(t.code,{children:"deleted_at"})," field exists), all query statements will automatically add the ",(0,a.jsx)(t.code,{children:"deleted_at"})," condition."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-go",children:'// UPDATE `user` SET `deleted_at`=\'2020-06-06 21:00:00\' WHERE id=10 AND `deleted_at` IS NULL\ng.Model("user").Where("id", 10).Delete()\n'})}),"\n",(0,a.jsx)(t.p,{children:"Some changes occur during the query, for example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-go",children:'// SELECT * FROM `user` WHERE id>1 AND `deleted_at` IS NULL\ng.Model("user").Where("id>?", 1).All()\n'})}),"\n",(0,a.jsxs)(t.p,{children:["As you can see, when the ",(0,a.jsx)(t.code,{children:"deleted_at"})," field exists in the data table, all query operations involving that table will automatically add the condition ",(0,a.jsx)(t.code,{children:"deleted_at IS NULL"}),"."]}),"\n",(0,a.jsxs)(t.h2,{id:"updated_at-updating-time",children:[(0,a.jsx)(t.code,{children:"updated_at"})," Updating Time"]}),"\n",(0,a.jsxs)(t.p,{children:["This time is automatically written when executing the ",(0,a.jsx)(t.code,{children:"Save/Update"})," methods."]}),"\n",(0,a.jsx)(t.admonition,{type:"warning",children:(0,a.jsxs)(t.p,{children:["It should be noted that the ",(0,a.jsx)(t.code,{children:"Replace"})," method will also update this field, as this operation is equivalent to deleting the existing old data and writing a new record."]})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-go",children:'// UPDATE `user` SET `name`=\'john guo\',`updated_at`=\'2020-06-06 21:00:00\' WHERE name=\'john\' AND `deleted_at` IS NULL\ng.Model("user").Data(g.Map{"name" : "john guo"}).Where("name", "john").Update()\n\n// UPDATE `user` SET `status`=1,`updated_at`=\'2020-06-06 21:00:00\' WHERE `deleted_at` IS NULL ORDER BY `id` ASC LIMIT 10\ng.Model("user").Data("status", 1).OrderAsc("id").Limit(10).Update()\n\n// INSERT INTO `user`(`id`,`name`,`update_at`) VALUES(1,\'john guo\',\'2020-12-29 20:16:14\') ON DUPLICATE KEY UPDATE `id`=VALUES(`id`),`name`=VALUES(`name`),`update_at`=VALUES(`update_at`)\ng.Model("user").Data(g.Map{"id": 1, "name": "john guo"}).Save()\n'})}),"\n",(0,a.jsx)(t.h2,{id:"scenarios-of-join-query",children:"Scenarios of Join Query"}),"\n",(0,a.jsx)(t.p,{children:"If several tables involved in the join query have enabled the soft delete feature, the following situation will occur, that is, the conditional statement will include the soft delete time checks of all related tables."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-go",children:'// SELECT * FROM `user` AS `u` LEFT JOIN `user_detail` AS `ud` ON (ud.id=u.id) WHERE (`u`.`id`=10) AND `u`.`deleted_at` IS NULL LIMIT 1\ng.Model("user", "u").LeftJoin("user_detail", "ud", "ud.id=u.id").Where("u.id", 10).One()\n'})}),"\n",(0,a.jsxs)(t.h2,{id:"unscoped-ignoring-time-features",children:[(0,a.jsx)(t.code,{children:"Unscoped"})," Ignoring Time Features"]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"Unscoped"})," is used to ignore automatic time update features in chained operations. For example, in the above example, after adding the ",(0,a.jsx)(t.code,{children:"Unscoped"})," method:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-go",children:'// SELECT * FROM `user` WHERE id>1\ng.Model("user").Unscoped().Where("id>?", 1).All()\n\n// SELECT * FROM `user` AS `u` LEFT JOIN `user_detail` AS `ud` ON (ud.id=u.id) WHERE u.id=10 LIMIT 1\ng.Model("user", "u").LeftJoin("user_detail", "ud", "ud.id=u.id").Where("u.id", 10).Unscoped().One()\n'})})]})}function u(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},250065:function(e,t,n){n.d(t,{Z:function(){return o},a:function(){return s}});var d=n(667294);let a={},i=d.createContext(a);function s(e){let t=d.useContext(i);return d.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),d.createElement(i.Provider,{value:t},e.children)}}}]);