"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["33361"],{863395:function(e,n,r){r.r(n),r.d(n,{metadata:()=>i,contentTitle:()=>c,default:()=>u,assets:()=>a,toc:()=>d,frontMatter:()=>s});var i=JSON.parse('{"id":"course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1/2.5.\u542F\u52A8\u8FD0\u884C","title":"2.5 Service Startup","description":"A comprehensive guide on starting and running the user microservice, including service registration, gRPC service configuration, etcd integration, and service health checks.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1/2.5.\u542F\u52A8\u8FD0\u884C.md","sourceDirName":"course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1","slug":"/course/proxima-book/user-run","permalink":"/en/course/proxima-book/user-run","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1/2.5.\u542F\u52A8\u8FD0\u884C.md","tags":[],"version":"current","lastUpdatedBy":"oldme","lastUpdatedAt":1734407125000,"frontMatter":{"title":"2.5 Service Startup","hide_title":true,"slug":"/course/proxima-book/user-run","keywords":["GoFrame","gRPC service","service startup","microservices deployment","service registration","etcd integration"],"description":"A comprehensive guide on starting and running the user microservice, including service registration, gRPC service configuration, etcd integration, and service health checks."},"sidebar":"courseProximaBookSidebar","previous":{"title":"2.4 Controllers","permalink":"/en/course/proxima-book/user-controller"},"next":{"title":"2.6 Service Registration","permalink":"/en/course/proxima-book/user-etcd-register"}}'),t=r("785893"),o=r("250065");let s={title:"2.5 Service Startup",hide_title:!0,slug:"/course/proxima-book/user-run",keywords:["GoFrame","gRPC service","service startup","microservices deployment","service registration","etcd integration"],description:"A comprehensive guide on starting and running the user microservice, including service registration, gRPC service configuration, etcd integration, and service health checks."},c=void 0,a={},d=[{value:"Importing Controllers in CMD",id:"importing-controllers-in-cmd",level:2},{value:"Main Entry File",id:"main-entry-file",level:2},{value:"Configuration File",id:"configuration-file",level:2},{value:"Starting the Service",id:"starting-the-service",level:2},{value:"Testing Results",id:"testing-results",level:2}];function l(e){let n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"importing-controllers-in-cmd",children:"Importing Controllers in CMD"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["Like monolithic services, microservices also need to be imported in the ",(0,t.jsx)(n.code,{children:"cmd"}),". The difference is that the service startup changes from ",(0,t.jsx)(n.code,{children:"HTTP"})," to ",(0,t.jsx)(n.code,{children:"gRPC"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"app/user/internal/cmd/cmd.go"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package cmd  \n  \nimport (  \n    "context"  \n  \n    "github.com/gogf/gf/contrib/rpc/grpcx/v2"\n    "github.com/gogf/gf/v2/os/gcmd"\n    "google.golang.org/grpc"\n    "proxima/app/user/internal/controller/account"\n)  \n  \nvar (  \n    Main = gcmd.Command{  \n       Name:  "main",  \n       Usage: "main",  \n       Brief: "user grpc service",  \n       Func: func(ctx context.Context, parser *gcmd.Parser) (err error) {  \n          c := grpcx.Server.NewConfig()  \n          c.Options = append(c.Options, []grpc.ServerOption{  \n             grpcx.Server.ChainUnary(  \n                grpcx.Server.UnaryValidate,  \n             )}...,  \n          )  \n          s := grpcx.Server.New(c)  \n          account.Register(s)  \n          s.Run()  \n          return nil  \n       },  \n    }  \n)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"main-entry-file",children:"Main Entry File"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["Import the database driver and ",(0,t.jsx)(n.code,{children:"cmd"})," in the main entry file."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"app/user/main.go"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main  \n  \nimport (  \n    _ "github.com/gogf/gf/contrib/drivers/mysql/v2"  \n    \n    "github.com/gogf/gf/v2/os/gctx"  \n    \n    "proxima/app/user/internal/cmd"\n)  \n  \nfunc main() {  \n    cmd.Main.Run(gctx.GetInitCtx())  \n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"configuration-file",children:"Configuration File"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"app/user/manifest/config/config.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'grpc:  \n  name:             "user"\n  address:          ":32001"\n  \ndatabase:  \n  default:  \n    link:  "mysql:root:12345678@tcp(srv.com:3306)/user"  \n    debug: true\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"grpc"})," field defines two essential parameters: the microservice name and the listening port. The service name is used for service registration, and the listening port is self-explanatory. These two are mandatory; for other configuration options, refer to the ",(0,t.jsx)(n.a,{href:"/en/docs/micro-service/config",children:"configuration template"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"starting-the-service",children:"Starting the Service"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"Switch to the root directory and ensure all dependencies are properly installed."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ cd ../../\ngo mod tidy\n"})}),"\n",(0,t.jsx)(n.p,{children:"Return to the microservice directory and start the user microservice."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ cd app/user\ngf run .\\main.go\nbuild: .\\main.go\ngo build -o .\\main.exe  .\\main.go\n.\\main.exe \nbuild running pid: 15480\n2024-12-06 15:02:01.246 [DEBU] {d8e6fef56e840e1815d0325bc73eda8f} set default registry using file registry as no custom registry set, path: C:\\Users\\half\\AppData\\Local\\Temp\\gsvc\n2024-12-06 15:02:01.269 [DEBU] {d8e6fef56e840e1815d0325bc73eda8f} service register: &{Head: Deployment: Namespace: Name:user Version: Endpoints:192.168.10.91:32001 Metadata:map[protocol:grpc]}\n2024-12-06 15:02:01.270 [INFO] {d8e6fef56e840e1815d0325bc73eda8f} pid[15480]: grpc server started listening on [:32001]\n"})}),"\n",(0,t.jsx)(n.p,{children:"With this, we've completed the development of the first microservice for Proxima Notebook, which isn't much different from developing a monolithic service."}),"\n",(0,t.jsx)(n.h2,{id:"testing-results",children:"Testing Results"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"When testing gRPC in your testing tool, you'll need to use the proto protocol file. Make sure to specify the correct dependency paths."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'grpc 127.0.0.1:32001.account.v1.Account.UserRegister\n{\n    "username": "oldme",\n    "password": "123456",\n    "email": "tyyn1022@gmail.com"\n}\n{\n    "id": 1\n}\n\ngrpc 127.0.0.1:32001.account.v1.Account.UserLogin\n{\n    "username": "oldme",\n    "password": "123456"\n}\n{\n    "token": "I am token"\n}\n\ngrpc 127.0.0.1:32001.account.v1.Account.UserInfo\n{\n    "token": "I am token"\n}\n{\n    "user": {\n        "Id": 1,\n        "Username": "oldme",\n        "Password": "123456",\n        "Email": "tyyn1022@gmail.com",\n        "CreatedAt": {\n            "seconds": "1733407200",\n            "nanos": 0\n        },\n        "UpdatedAt": {\n            "seconds": "1733407200",\n            "nanos": 0\n        }\n    }\n}\n'})})]})}function u(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return c},a:function(){return s}});var i=r(667294);let t={},o=i.createContext(t);function s(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);