"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["64756"],{115343:function(n,e,o){o.r(e),o.d(e,{metadata:()=>t,contentTitle:()=>r,default:()=>u,assets:()=>a,toc:()=>g,frontMatter:()=>c});var t=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6-\u5F02\u6B65\u8F93\u51FA","title":"Logging - Asynchronous Output","description":"Use the GoFrame framework for asynchronous log output to improve logging efficiency. You can set asynchronous output using SetAsync or chaining methods. Asynchronous output can reduce resource usage, but be aware of potential log disorder issues.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6-\u5F02\u6B65\u8F93\u51FA.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6","slug":"/docs/core/glog-async","permalink":"/en/docs/core/glog-async","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6-\u5F02\u6B65\u8F93\u51FA.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":8,"frontMatter":{"slug":"/docs/core/glog-async","title":"Logging - Asynchronous Output","sidebar_position":8,"hide_title":true,"keywords":["GoFrame","Log Component","Asynchronous Output","glog","goroutine","SetAsync","SetFlags","Chaining","Log Optimization","Resource Usage"],"description":"Use the GoFrame framework for asynchronous log output to improve logging efficiency. You can set asynchronous output using SetAsync or chaining methods. Asynchronous output can reduce resource usage, but be aware of potential log disorder issues."},"sidebar":"mainSidebar","previous":{"title":"Logging - JSON Format","permalink":"/en/docs/core/glog-json"},"next":{"title":"Logging - Stack Printing","permalink":"/en/docs/core/glog-stack"}}'),s=o("785893"),i=o("250065");let c={slug:"/docs/core/glog-async",title:"Logging - Asynchronous Output",sidebar_position:8,hide_title:!0,keywords:["GoFrame","Log Component","Asynchronous Output","glog","goroutine","SetAsync","SetFlags","Chaining","Log Optimization","Resource Usage"],description:"Use the GoFrame framework for asynchronous log output to improve logging efficiency. You can set asynchronous output using SetAsync or chaining methods. Asynchronous output can reduce resource usage, but be aware of potential log disorder issues."},r=void 0,a={},g=[{value:"<code>SetAsync</code>",id:"setasync",level:3},{value:"<code>Async</code> Chaining Operation",id:"async-chaining-operation",level:3}];function l(n){let e={admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:["For log output with low immediacy requirements, you can output logs asynchronously. Asynchronous output allows logging calls to return immediately, thus being more efficient. ",(0,s.jsx)(e.code,{children:"glog"})," certainly supports asynchronous output features and uses a ",(0,s.jsx)(e.code,{children:"goroutine"})," pool internally to manage asynchronous log printing tasks, which can significantly reduce resource usage."]}),"\n",(0,s.jsxs)(e.p,{children:["Asynchronous output can be implemented through the ",(0,s.jsx)(e.code,{children:"SetAsync"}),"/ ",(0,s.jsx)(e.code,{children:"SetFlags"})," methods of the log object or through the chaining operation ",(0,s.jsx)(e.code,{children:"Async"})," method. However, note that if you set asynchronous output through the object setting methods, all subsequent log outputs will be asynchronous; if you output asynchronously through chaining, only the current log output will be asynchronous."]}),"\n",(0,s.jsx)(e.admonition,{type:"warning",children:(0,s.jsx)(e.p,{children:"If both synchronous and asynchronous printing are used for the same file log output, please note the log file content may become disordered, which should be avoided as much as possible."})}),"\n",(0,s.jsx)(e.h3,{id:"setasync",children:(0,s.jsx)(e.code,{children:"SetAsync"})}),"\n",(0,s.jsxs)(e.p,{children:["Let's look at an example of implementing asynchronous printing using the ",(0,s.jsx)(e.code,{children:"SetAsync"})," method."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "time"\n\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    ctx := context.TODO()\n    g.Log().SetAsync(true)\n    for i := 0; i < 10; i++ {\n        g.Log().Print(ctx, "async log", i)\n    }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"After execution, you can find nothing is output to the terminal because the log output is asynchronous, and the example exits before the log content is output. Therefore, we can make a slight improvement as follows:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "time"\n\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    ctx := context.TODO()\n    g.Log().SetAsync(true)\n    for i := 0; i < 10; i++ {\n        g.Log().Print(ctx, "async log", i)\n    }\n    time.Sleep(time.Second)\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"After execution, the terminal output is:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:"2019-06-02 15:44:21.399 async log 0\n2019-06-02 15:44:21.399 async log 1\n2019-06-02 15:44:21.399 async log 2\n2019-06-02 15:44:21.399 async log 3\n2019-06-02 15:44:21.399 async log 4\n2019-06-02 15:44:21.399 async log 5\n2019-06-02 15:44:21.399 async log 6\n2019-06-02 15:44:21.399 async log 7\n2019-06-02 15:44:21.399 async log 8\n2019-06-02 15:44:21.399 async log 9\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"async-chaining-operation",children:[(0,s.jsx)(e.code,{children:"Async"})," Chaining Operation"]}),"\n",(0,s.jsx)(e.p,{children:"The chaining operation is relatively simple."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "time"\n\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    ctx := context.TODO()\n    for i := 0; i < 10; i++ {\n        g.Log().Async().Print(ctx, "async log", i)\n    }\n    g.Log().Print(ctx, "normal log")\n    g.Log().Print(ctx, "normal log")\n    g.Log().Print(ctx, "normal log")\n    time.Sleep(time.Second)\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"After execution, the terminal output is:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:"2022-01-05 15:00:44.101 normal log\n2022-01-05 15:00:44.101 async log 0\n2022-01-05 15:00:44.101 async log 1\n2022-01-05 15:00:44.101 async log 2\n2022-01-05 15:00:44.101 async log 3\n2022-01-05 15:00:44.101 async log 4\n2022-01-05 15:00:44.101 async log 5\n2022-01-05 15:00:44.101 async log 6\n2022-01-05 15:00:44.101 async log 7\n2022-01-05 15:00:44.101 async log 8\n2022-01-05 15:00:44.101 async log 9\n2022-01-05 15:00:44.101 normal log\n2022-01-05 15:00:44.103 normal log\n"})})]})}function u(n={}){let{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},250065:function(n,e,o){o.d(e,{Z:function(){return r},a:function(){return c}});var t=o(667294);let s={},i=t.createContext(s);function c(n){let e=t.useContext(i);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:c(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);