"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["74701"],{537017:function(e,o,c){c.r(o),c.d(o,{metadata:()=>t,contentTitle:()=>a,default:()=>p,assets:()=>s,toc:()=>d,frontMatter:()=>r});var t=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u8D44\u6E90\u7BA1\u7406/\u8D44\u6E90\u7BA1\u7406-\u5DE5\u5177\u6253\u5305","title":"Resource - Packing With Tool","description":"Use the gf command line tool in the GoFrame framework for resource packaging. The gf pack command can package the project\'s config, public, and template directories into Go files, and the generated files are automatically introduced into the project. The packed resource package is preferentially introduced in the boot package, and the packaged resource files are operated through the gres module. The gres.Dump() method can print the resource file list for easy management and debugging.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u8D44\u6E90\u7BA1\u7406/\u8D44\u6E90\u7BA1\u7406-\u5DE5\u5177\u6253\u5305.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u8D44\u6E90\u7BA1\u7406","slug":"/docs/core/gres-pack-using-cli","permalink":"/en/docs/core/gres-pack-using-cli","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u8D44\u6E90\u7BA1\u7406/\u8D44\u6E90\u7BA1\u7406-\u5DE5\u5177\u6253\u5305.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732541616000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/core/gres-pack-using-cli","title":"Resource - Packing With Tool","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","GoFrame framework","gf command line tool","resource packaging","gres module","Go file generation","project directory structure","resource management","command line tool","Goland IDE"],"description":"Use the gf command line tool in the GoFrame framework for resource packaging. The gf pack command can package the project\'s config, public, and template directories into Go files, and the generated files are automatically introduced into the project. The packed resource package is preferentially introduced in the boot package, and the packaged resource files are operated through the gres module. The gres.Dump() method can print the resource file list for easy management and debugging."},"sidebar":"mainSidebar","previous":{"title":"Resource","permalink":"/en/docs/core/gres"},"next":{"title":"Resource - Packing With Method","permalink":"/en/docs/core/gres-pack-using-funcs"}}'),i=c("785893"),n=c("250065");let r={slug:"/docs/core/gres-pack-using-cli",title:"Resource - Packing With Tool",sidebar_position:0,hide_title:!0,keywords:["GoFrame","GoFrame framework","gf command line tool","resource packaging","gres module","Go file generation","project directory structure","resource management","command line tool","Goland IDE"],description:"Use the gf command line tool in the GoFrame framework for resource packaging. The gf pack command can package the project's config, public, and template directories into Go files, and the generated files are automatically introduced into the project. The packed resource package is preferentially introduced in the boot package, and the packaged resource files are operated through the gres module. The gres.Dump() method can print the resource file list for easy management and debugging."},a=void 0,s={},d=[{value:"<code>gf pack</code> Generates <code>Go</code> File",id:"gf-pack-generates-go-file",level:2},{value:"Using the Packaged <code>Go</code> File",id:"using-the-packaged-go-file",level:2},{value:"Prioritize Importing <code>packed</code> Resource Package in <code>boot</code> Package",id:"prioritize-importing-packed-resource-package-in-boot-package",level:3},{value:"Prioritize Importing <code>boot</code> Package in <code>main</code> Package",id:"prioritize-importing-boot-package-in-main-package",level:3},{value:"Print Resource Management File List",id:"print-resource-management-file-list",level:2}];function l(e){let o={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(o.p,{children:["We can package any files/directories using the ",(0,i.jsx)(o.code,{children:"pack"})," command of the ",(0,i.jsx)(o.code,{children:"gf"})," command line tool. For specific installation and usage of the ",(0,i.jsx)(o.code,{children:"gf"})," command line tool, please refer to the ",(0,i.jsx)(o.a,{href:"/en/docs/cli/pack",children:"Resource Packing"})," section. Since it is quite convenient to package using the command line tool, it is the recommended packaging method."]}),"\n",(0,i.jsxs)(o.h2,{id:"gf-pack-generates-go-file",children:[(0,i.jsx)(o.code,{children:"gf pack"})," Generates ",(0,i.jsx)(o.code,{children:"Go"})," File"]}),"\n",(0,i.jsxs)(o.p,{children:["The recommended way is to directly generate the ",(0,i.jsx)(o.code,{children:"Go"})," file to the ",(0,i.jsx)(o.code,{children:"boot"})," startup directory and set the package name of the generated ",(0,i.jsx)(o.code,{children:"Go"})," file to ",(0,i.jsx)(o.code,{children:"boot"}),", so the resource file will be automatically introduced into the project. We pack the files of the project's ",(0,i.jsx)(o.code,{children:"config, public, template"})," directories into a ",(0,i.jsx)(o.code,{children:"Go"})," file, the packaging command is:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:"gf pack config,public,template packed/data.go -n packed\n"})}),"\n",(0,i.jsxs)(o.p,{children:["The content of the generated ",(0,i.jsx)(o.code,{children:"Go"})," file is similar to:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-go",children:'package packed\n\nimport "github.com/gogf/gf/v2/os/gres"\n\nfunc init() {\n    if err := gres.Add("H4sIAAAAAAAC/5y8c5Bl0Zbuu9O2bVaq0rZZ6Urbtm3bNnfatipto9"); err != nil {\n        panic(err)\n    }\n}\n'})}),"\n",(0,i.jsxs)(o.p,{children:["As you can see, the generated ",(0,i.jsx)(o.code,{children:"Go"})," file adds the binary content of the resource file to the default resource manager through the ",(0,i.jsx)(o.code,{children:"gres.Add"})," method. The parameter of this method is a compressed BASE64 string, which will be decompressed during program startup and generate a file tree object in memory for quick file manipulation during runtime."]}),"\n",(0,i.jsxs)(o.h2,{id:"using-the-packaged-go-file",children:["Using the Packaged ",(0,i.jsx)(o.code,{children:"Go"})," File"]}),"\n",(0,i.jsxs)(o.h3,{id:"prioritize-importing-packed-resource-package-in-boot-package",children:["Prioritize Importing ",(0,i.jsx)(o.code,{children:"packed"})," Resource Package in ",(0,i.jsx)(o.code,{children:"boot"})," Package"]}),"\n",(0,i.jsxs)(o.p,{children:["In the project's ",(0,i.jsx)(o.code,{children:"boot"})," program startup setting package, automatically import the ",(0,i.jsx)(o.code,{children:"packed"})," resource package, and it should be the first package to be imported, so that other imported packages can use the resource content during initialization (",(0,i.jsx)(o.code,{children:"init"})," method). For example (the ",(0,i.jsx)(o.code,{children:"module"})," name is ",(0,i.jsx)(o.code,{children:"my-app"}),"):"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-go",children:'import (\n    _ "my-app/packed"\n\n    // other packages\n)\n'})}),"\n",(0,i.jsxs)(o.p,{children:["It is recommended to include a blank line between the ",(0,i.jsx)(o.code,{children:"packed"})," package and other packages, especially since the ",(0,i.jsx)(o.code,{children:"Goland"})," IDE's ",(0,i.jsx)(o.code,{children:"import"})," plugin will not automatically sort the imported packages."]}),"\n",(0,i.jsxs)(o.h3,{id:"prioritize-importing-boot-package-in-main-package",children:["Prioritize Importing ",(0,i.jsx)(o.code,{children:"boot"})," Package in ",(0,i.jsx)(o.code,{children:"main"})," Package"]}),"\n",(0,i.jsxs)(o.p,{children:["Since the project's ",(0,i.jsx)(o.code,{children:"main"})," entry program file will import the ",(0,i.jsx)(o.code,{children:"boot"})," package, and it should be the first package to be imported:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-go",children:'import (\n    _ "my-app/boot"\n\n    // other packages\n)\n'})}),"\n",(0,i.jsxs)(o.p,{children:["Here, it is recommended to include a blank line between the ",(0,i.jsx)(o.code,{children:"boot"})," package and other packages for distinction, especially since the ",(0,i.jsx)(o.code,{children:"Goland"})," IDE's ",(0,i.jsx)(o.code,{children:"import"})," plugin will not automatically sort the imported packages."]}),"\n",(0,i.jsxs)(o.p,{children:["Then you can use the ",(0,i.jsx)(o.code,{children:"gres"})," module anywhere in the project to access the packaged resource files."]}),"\n",(0,i.jsxs)(o.blockquote,{children:["\n",(0,i.jsxs)(o.p,{children:["If using the recommended project directory structure of ",(0,i.jsx)(o.code,{children:"GoFrame"})," (new project), the directory structure will have a ",(0,i.jsx)(o.code,{children:"boot"})," directory (corresponding package name is also ",(0,i.jsx)(o.code,{children:"boot"}),") for program startup settings. Therefore, if the ",(0,i.jsx)(o.code,{children:"Go"})," file is generated in the ",(0,i.jsx)(o.code,{children:"boot"})," directory, it will be automatically compiled into the executable file."]}),"\n"]}),"\n",(0,i.jsx)(o.h2,{id:"print-resource-management-file-list",children:"Print Resource Management File List"}),"\n",(0,i.jsxs)(o.p,{children:["The ",(0,i.jsx)(o.code,{children:"gres.Dump()"})," method can be used to print out all file lists in the current resource manager, with output similar to:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:"2019-09-15T13:36:28+00:00   0.00B config\n2019-07-27T07:26:12+00:00   1.34K config/config.toml\n2019-09-15T13:36:28+00:00   0.00B public\n2019-06-25T17:03:56+00:00   0.00B public/resource\n2018-12-04T12:50:16+00:00   0.00B public/resource/css\n2018-12-17T12:54:26+00:00   0.00B public/resource/css/document\n2018-12-17T12:54:26+00:00   4.20K public/resource/css/document/style.css\n2018-08-24T01:46:58+00:00  32.00B public/resource/css/index.css\n2019-05-23T03:51:24+00:00   0.00B public/resource/image\n2018-08-20T05:02:08+00:00  24.01K public/resource/image/cover.png\n2019-05-23T03:51:24+00:00   4.19K public/resource/image/favicon.ico\n2018-08-23T01:44:50+00:00   4.19K public/resource/image/gf.ico\n2018-12-04T13:04:34+00:00   0.00B public/resource/js\n2019-06-27T11:06:12+00:00   0.00B public/resource/js/document\n2019-06-27T11:06:12+00:00  11.67K public/resource/js/document/index.js\n2019-09-15T13:36:28+00:00   0.00B template\n2019-02-02T09:08:56+00:00   0.00B template/document\n2018-12-04T12:49:08+00:00   0.00B template/document/include\n2018-12-04T12:49:08+00:00 329.00B template/document/include/404.html\n2019-03-06T01:52:56+00:00   3.42K template/document/index.html\n...\n"})}),"\n",(0,i.jsx)(o.p,{children:"Note that when using resource files in the resource manager, you need to strictly follow their paths for retrieval."})]})}function p(e={}){let{wrapper:o}={...(0,n.a)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},250065:function(e,o,c){c.d(o,{Z:function(){return a},a:function(){return r}});var t=c(667294);let i={},n=t.createContext(i);function r(e){let o=t.useContext(n);return t.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(n.Provider,{value:o},e.children)}}}]);