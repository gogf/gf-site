"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["96372"],{183446:function(e,r,n){n.r(r),n.d(r,{metadata:()=>i,contentTitle:()=>t,default:()=>h,assets:()=>c,toc:()=>a,frontMatter:()=>d});var i=JSON.parse('{"id":"community/\u793E\u533A\u6295\u7A3F/Go\u5F00\u53D1\u4E2D\u5982\u4F55\u4F18\u96C5\u5730\u4F7F\u7528\u9519\u8BEF\u7801","title":"How to Use Error Codes Gracefully in Go Development","description":"This article discusses the history of error codes, their use cases and best practices, along with practical guidance using the gerror component of the GoFrame framework","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/community/\u793E\u533A\u6295\u7A3F/Go\u5F00\u53D1\u4E2D\u5982\u4F55\u4F18\u96C5\u5730\u4F7F\u7528\u9519\u8BEF\u7801.md","sourceDirName":"community/\u793E\u533A\u6295\u7A3F","slug":"/articles/use-error-code-gracefully-in-golang","permalink":"/en/articles/use-error-code-gracefully-in-golang","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/community/\u793E\u533A\u6295\u7A3F/Go\u5F00\u53D1\u4E2D\u5982\u4F55\u4F18\u96C5\u5730\u4F7F\u7528\u9519\u8BEF\u7801.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1741749977000,"frontMatter":{"slug":"/articles/use-error-code-gracefully-in-golang","title":"How to Use Error Codes Gracefully in Go Development","hide_title":true,"keywords":["goframe","error code","gerror","error handling","go","best practices"],"description":"This article discusses the history of error codes, their use cases and best practices, along with practical guidance using the gerror component of the GoFrame framework"},"sidebar":"communitySidebar","previous":{"title":"Golang Framework Comparison: GoFrame, Beego, Iris and Gin","permalink":"/en/articles/framework-comparison-goframe-beego-iris-gin"},"next":{"title":"TechEmpower Web Benchmarks Latest Performance Evaluation","permalink":"/en/articles/techempower-web-benchmarks-r23"}}'),s=n("785893"),o=n("250065");let d={slug:"/articles/use-error-code-gracefully-in-golang",title:"How to Use Error Codes Gracefully in Go Development",hide_title:!0,keywords:["goframe","error code","gerror","error handling","go","best practices"],description:"This article discusses the history of error codes, their use cases and best practices, along with practical guidance using the gerror component of the GoFrame framework"},t=void 0,c={},a=[{value:"Evolution of Error Codes",id:"evolution-of-error-codes",level:2},{value:"From Operating System to Application Layer",id:"from-operating-system-to-application-layer",level:3},{value:"HTTP Status Codes",id:"http-status-codes",level:3},{value:"Microservice Error Codes",id:"microservice-error-codes",level:3},{value:"Why Use Error Codes",id:"why-use-error-codes",level:2},{value:"1. Standardized Error Handling",id:"1-standardized-error-handling",level:3},{value:"2. Internationalization Support",id:"2-internationalization-support",level:3},{value:"3. Interface Contract",id:"3-interface-contract",level:3},{value:"4. Security Considerations",id:"4-security-considerations",level:3},{value:"Integer vs String Error Codes",id:"integer-vs-string-error-codes",level:2},{value:"1. Integer Error Codes",id:"1-integer-error-codes",level:3},{value:"2. String Error Codes",id:"2-string-error-codes",level:3},{value:"3. Selection Guidelines",id:"3-selection-guidelines",level:3},{value:"4. Best Practices",id:"4-best-practices",level:3},{value:"Comparison of Go Error Handling Patterns",id:"comparison-of-go-error-handling-patterns",level:2},{value:"1. Predefined Error Management",id:"1-predefined-error-management",level:3},{value:"2. Custom Error Types",id:"2-custom-error-types",level:3},{value:"3. <code>pkg/errors</code> Wrapping",id:"3-pkgerrors-wrapping",level:3},{value:"4. <code>gerror</code> Error Code System",id:"4-gerror-error-code-system",level:3},{value:"Error Code Engineering Management",id:"error-code-engineering-management",level:2},{value:"1. Monolithic Project",id:"1-monolithic-project",level:3},{value:"2. Monorepo Project",id:"2-monorepo-project",level:3},{value:"Error Code Best Practices",id:"error-code-best-practices",level:2},{value:"1. Error Code Design Principles",id:"1-error-code-design-principles",level:3},{value:"2. Error Code Classification and Definition",id:"2-error-code-classification-and-definition",level:3},{value:"3. Practical Usage Example",id:"3-practical-usage-example",level:3},{value:"4. Unified Error Handling at <code>API</code> Layer",id:"4-unified-error-handling-at-api-layer",level:3},{value:"Error Code Practices in Distributed Systems",id:"error-code-practices-in-distributed-systems",level:2},{value:"1. Cross-Service Error Propagation",id:"1-cross-service-error-propagation",level:3},{value:"2. Error Codes and Retry Strategies",id:"2-error-codes-and-retry-strategies",level:3}];function l(e){let r={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"evolution-of-error-codes",children:"Evolution of Error Codes"}),"\n",(0,s.jsxs)(r.p,{children:["The concept of error codes dates back to the early days of computer systems. At the operating system level, error codes typically exist as integers, such as return values and ",(0,s.jsx)(r.code,{children:"errno"})," in ",(0,s.jsx)(r.code,{children:"Unix"})," systems."]}),"\n",(0,s.jsx)(r.h3,{id:"from-operating-system-to-application-layer",children:"From Operating System to Application Layer"}),"\n",(0,s.jsxs)(r.p,{children:["In ",(0,s.jsx)(r.code,{children:"Unix/Linux"})," systems, error codes exist in the form of ",(0,s.jsx)(r.code,{children:"errno"}),", where each error code corresponds to a specific error condition, such as ",(0,s.jsx)(r.code,{children:"ENOENT"})," (file does not exist) and ",(0,s.jsx)(r.code,{children:"EPERM"})," (permission denied). This error code mechanism laid the foundation for later application development."]}),"\n",(0,s.jsx)(r.h3,{id:"http-status-codes",children:"HTTP Status Codes"}),"\n",(0,s.jsxs)(r.p,{children:["With the development of the ",(0,s.jsx)(r.code,{children:"Web"}),", the ",(0,s.jsx)(r.code,{children:"HTTP"})," protocol introduced a status code mechanism, such as ",(0,s.jsx)(r.code,{children:"200 OK"}),", ",(0,s.jsx)(r.code,{children:"404 Not Found"}),", ",(0,s.jsx)(r.code,{children:"500 Internal Server Error"}),", etc. These status codes have become the standard for error handling in ",(0,s.jsx)(r.code,{children:"Web"})," applications."]}),"\n",(0,s.jsx)(r.h3,{id:"microservice-error-codes",children:"Microservice Error Codes"}),"\n",(0,s.jsx)(r.p,{children:"In microservice architecture, error codes have become more complex and structured. Modern systems typically adopt a multi-level error code structure, including service identifiers, module identifiers, and specific error codes."}),"\n",(0,s.jsx)(r.h2,{id:"why-use-error-codes",children:"Why Use Error Codes"}),"\n",(0,s.jsx)(r.p,{children:"In modern software development, error codes have become an indispensable component. There are several important reasons for using error codes:"}),"\n",(0,s.jsx)(r.h3,{id:"1-standardized-error-handling",children:"1. Standardized Error Handling"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Systematic Error Identification"}),": Error codes allow systems to quickly identify and classify errors without parsing error message text."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"// Using error codes for condition checking\nif err := doSomething(); err != nil {\n    if code := gerror.Code(err); code == CodeUserNotFound {\n        // Handle case where user is not found\n    } else if code == CodePermissionDenied {\n        // Handle case where permission is denied\n    }\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Automated Processing"}),": Automated error handling and monitoring strategies can be implemented based on error codes."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"// Error handling in middleware\nfunc ErrorHandlerMiddleware(r *ghttp.Request) {\n    r.Middleware.Next()\n    if err := r.GetError(); err != nil {\n        code := gerror.Code(err)\n        // Handle different categories based on error code\n        switch code {\n        case CodeUnauthorized:\n            r.Response.WriteStatus(http.StatusUnauthorized)\n        case CodeForbidden:\n            r.Response.WriteStatus(http.StatusForbidden)\n        default:\n            r.Response.WriteStatus(http.StatusInternalServerError)\n        }\n        // Log error\n        g.Log().Error(r.Context(), err)\n    }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"2-internationalization-support",children:"2. Internationalization Support"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Language Independence"}),": Error codes can be mapped to error messages in different languages, enabling internationalization."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'// Implementation using gi18n middleware\nfunc ErrorI18nMiddleware(r *ghttp.Request) {\n    r.Middleware.Next()\n    // Get error\n    if err := r.GetError(); err != nil {\n        // Get error code\n        code := gerror.Code(err)\n        // Get request language\n        lang := r.GetHeader("Accept-Language")\n        if lang == "" {\n            lang = "en-US" // Default language\n        }\n        ctx := gi18n.WithLanguage(r.Context(), lang)\n        // Get localized error message using gi18n\n        message := gi18n.Translate(ctx, code)\n        // Return standard response\n        r.Response.WriteJson(ghttp.DefaultHandlerResponse{\n            Code:    code,\n            Message: message,\n        })\n    }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"3-interface-contract",children:"3. Interface Contract"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Frontend-Backend Consistency"}),": Error codes serve as a standard protocol for frontend-backend interaction, ensuring interface consistency. The frontend can make different UI interactions based on the error codes returned by the backend. For example, in the following case, the frontend will guide the user to the login process based on the user not logged in error code."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-json",children:'// API response format\n{\n    "code": 1001,\n    "message": "User not logged in",\n    "data": null\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Version Compatibility"}),": Error codes help maintain API version compatibility even when error messages change."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"4-security-considerations",children:"4. Security Considerations"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Sensitive Information Hiding"}),": Error codes help hide sensitive information, preventing exposure of internal implementation details to users, such as database SQL execution error messages."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Information Leakage Prevention"}),": Directly returning exception stack information might leak system structure details like system architecture, file paths, and code line numbers, which can be avoided by using error codes."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"integer-vs-string-error-codes",children:"Integer vs String Error Codes"}),"\n",(0,s.jsxs)(r.p,{children:["There are two common types of error codes: ",(0,s.jsx)(r.strong,{children:"Integer"})," and ",(0,s.jsx)(r.strong,{children:"String"}),". In Go development, choosing between integer or string error codes depends on specific scenarios and requirements. Here are some guidelines and best practices."]}),"\n",(0,s.jsx)(r.h3,{id:"1-integer-error-codes",children:"1. Integer Error Codes"}),"\n",(0,s.jsx)(r.p,{children:"Integer error codes are the most common choice, particularly in traditional communication services where they help reduce network bandwidth usage. They have the following characteristics:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Performance Advantage"}),": Integer comparisons are faster than string comparisons, improving performance in scenarios with frequent error code checks"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Storage Efficiency"}),": Integers use less memory, more suitable for scenarios requiring storage of many error codes"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Compatibility"}),": Integer error codes are easier to integrate and interoperate with other systems"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Sortability"}),": Integer error codes can be easily sorted and range-checked"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'// Integer error code example\n// Using gcode for effective integer-string conversion mapping maintenance\nvar (\n    CodeSuccess       = gcode.New(0, "success", nil)\n    CodeUserNotLogin  = gcode.New(10001, "user not login", nil)\n    CodeUserNotFound  = gcode.New(10002, "user not found", nil)\n)\n\nfunc HandleError(err error) {\n    if code := gerror.Code(err); code == CodeUserNotLogin {\n        // Handle invalid input\n    }\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Suitable Scenarios"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"High-performance systems"}),"\n",(0,s.jsx)(r.li,{children:"Scenarios requiring integration with other systems"}),"\n",(0,s.jsx)(r.li,{children:"Scenarios requiring storage of many error codes"}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"2-string-error-codes",children:"2. String Error Codes"}),"\n",(0,s.jsx)(r.p,{children:"String error codes have their advantages in certain specific scenarios:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Readability"}),": String error codes are more descriptive, making it easier for developers to understand and debug"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Flexibility"}),": Can contain more information, such as module names and error types"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Extensibility"}),": No need to predefine all error codes, suitable for rapid iteration"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'// String error code example\n// Ignore integer error code parameter when using gcode\n// Use string description field as error code, with optional detailed description field\nvar (\n    ErrInvalidEmail = gcode.New(0, "user.invalid_email", nil)\n    ErrUserBlocked  = gcode.New(0, "user.blocked", nil)\n)\n\nfunc ValidateUser(user User) error {\n    if !isValidEmail(user.Email) {\n        return gerror.NewCode(ErrInvalidEmail)\n    }\n    return nil\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Suitable Scenarios"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Scenarios requiring high readability and descriptiveness"}),"\n",(0,s.jsx)(r.li,{children:"Rapid prototype development"}),"\n",(0,s.jsx)(r.li,{children:"Scenarios requiring flexible error code expansion"}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"3-selection-guidelines",children:"3. Selection Guidelines"}),"\n",(0,s.jsx)(r.p,{children:"When choosing error code types, consider the following decision tree:"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["Need to integrate with other systems?","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Yes \u2192 Prefer integer error codes"}),"\n",(0,s.jsx)(r.li,{children:"No \u2192 Proceed to next step"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["Have high performance requirements?","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Yes \u2192 Prefer integer error codes"}),"\n",(0,s.jsx)(r.li,{children:"No \u2192 Proceed to next step"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["Need rapid iteration and flexible expansion?","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Yes \u2192 Prefer string error codes"}),"\n",(0,s.jsx)(r.li,{children:"No \u2192 Proceed to next step"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["Need better readability?","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Yes \u2192 Prefer string error codes"}),"\n",(0,s.jsx)(r.li,{children:"No \u2192 Choose integer error codes"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"4-best-practices",children:"4. Best Practices"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Consistency"}),": Maintain consistency in error code types within the same project"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Documentation"}),": Provide comprehensive documentation regardless of the type chosen"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Conversion Mechanism"}),": Provide type conversion methods when both types need to be supported"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Performance Testing"}),": Conduct benchmark tests to validate choices in performance-sensitive scenarios"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"comparison-of-go-error-handling-patterns",children:"Comparison of Go Error Handling Patterns"}),"\n",(0,s.jsx)(r.h3,{id:"1-predefined-error-management",children:"1. Predefined Error Management"}),"\n",(0,s.jsx)(r.p,{children:"A pattern that uses predefined error variables to represent specific error conditions. This pattern is simple and clear, suitable for simple errors in basic libraries."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'// Define sentinel error\nvar ErrNotFound = errors.New("not found")\n\n// Usage example\nfunc FindUser(id int) (*User, error) {\n    user, exists := users[id]\n    if !exists {\n        return nil, ErrNotFound\n    }\n    return user, nil\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Advantages"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Simple to use"}),"\n",(0,s.jsxs)(r.li,{children:["Direct error checking (",(0,s.jsx)(r.code,{children:"err == ErrNotFound"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Disadvantages"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Lacks context information"}),"\n",(0,s.jsx)(r.li,{children:"Difficult to extend and combine"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Suitable Scenarios"}),": Basic libraries, simple error scenarios"]}),"\n",(0,s.jsx)(r.h3,{id:"2-custom-error-types",children:"2. Custom Error Types"}),"\n",(0,s.jsx)(r.p,{children:"Carrying richer error information by defining specific error types. This pattern is suitable for complex business errors that need to convey additional context."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'// Define error type\ntype NotFoundError struct {\n    Resource string\n    ID       int\n}\n\nfunc (e *NotFoundError) Error() string {\n    return fmt.Sprintf("%s with ID %d not found", e.Resource, e.ID)\n}\n\n// Usage example\nfunc FindOrder(id int) (*Order, error) {\n    order, exists := orders[id]\n    if !exists {\n        return nil, &NotFoundError{Resource: "order", ID: id}\n    }\n    return order, nil\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Advantages"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Carries rich context information"}),"\n",(0,s.jsx)(r.li,{children:"Supports type assertion and error classification"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Disadvantages"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Type assertion and type checking are cumbersome"}),"\n",(0,s.jsx)(r.li,{children:"Requires defining many types"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Suitable Scenarios"}),": Complex business errors, scenarios requiring context transmission"]}),"\n",(0,s.jsxs)(r.h3,{id:"3-pkgerrors-wrapping",children:["3. ",(0,s.jsx)(r.code,{children:"pkg/errors"})," Wrapping"]}),"\n",(0,s.jsxs)(r.p,{children:["Implementing error wrapping and stack tracing through the third-party library ",(0,s.jsx)(r.code,{children:"pkg/errors"}),", suitable for scenarios requiring error tracking."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'// Error wrapping example\nfunc ProcessOrder(orderID int) error {\n    order, err := FindOrder(orderID)\n    if err != nil {\n        return errors.Wrap(err, "failed to process order")\n    }\n    // ...\n}\n\n// Usage example\nfunc main() {\n    err := ProcessOrder(123)\n    if err != nil {\n        fmt.Printf("%+v\\n", err)  // Print complete stack information\n    }\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Advantages"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Preserves complete error stack"}),"\n",(0,s.jsx)(r.li,{children:"Supports error chain tracking"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Disadvantages"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Requires third-party library dependency"}),"\n",(0,s.jsx)(r.li,{children:"Adds additional memory overhead"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Suitable Scenarios"}),": Scenarios requiring error tracking and debugging"]}),"\n",(0,s.jsxs)(r.h3,{id:"4-gerror-error-code-system",children:["4. ",(0,s.jsx)(r.code,{children:"gerror"})," Error Code System"]}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"gerror"})," error code system is a structured error handling mechanism provided by the ",(0,s.jsx)(r.code,{children:"GoFrame"})," framework, offering flexible and rich error handling capabilities suitable for enterprise application development."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'// Error code definition\nvar (\n    CodeOrderNotFound = gcode.New(2001, "order not found", nil)\n)\n\n// Usage example\nfunc GetOrder(orderID int) (*Order, error) {\n    order, exists := orders[orderID]\n    if !exists {\n        return nil, gerror.NewCode(CodeOrderNotFound)\n    }\n    return order, nil\n}\n\n// Error handling\nfunc HandleError(err error) {\n    if code := gerror.Code(err); code == CodeOrderNotFound {\n        // Handle case where order doesn\'t exist\n    }\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Advantages"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Structured error handling"}),"\n",(0,s.jsx)(r.li,{children:"Supports error code classification and management"}),"\n",(0,s.jsx)(r.li,{children:"Preserves complete error stack"}),"\n",(0,s.jsx)(r.li,{children:"Supports error chain tracking"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Disadvantages"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Requires framework integration"}),"\n",(0,s.jsx)(r.li,{children:"Adds additional memory overhead"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Suitable Scenarios"}),": Scenarios requiring error tracking and debugging, enterprise application development, unified error management"]}),"\n",(0,s.jsx)(r.h2,{id:"error-code-engineering-management",children:"Error Code Engineering Management"}),"\n",(0,s.jsxs)(r.p,{children:["Taking the project structure recommended by the ",(0,s.jsx)(r.code,{children:"GoFrame"})," framework as an example:"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Error codes specific to business modules should be maintained independently within their respective modules. For example:","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"User"}),"-related error codes are maintained in ",(0,s.jsx)(r.code,{children:"logic/user/user_errcode.go"})]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Order"}),"-related error codes are maintained in ",(0,s.jsx)(r.code,{children:"logic/order/order_errcode.go"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Common"})," error codes are maintained in ",(0,s.jsx)(r.code,{children:"logic/errcode/errcode.go"})," for reuse across business modules"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"1-monolithic-project",children:"1. Monolithic Project"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-text",children:"project\n\u251C\u2500\u2500 api             # Interface definitions\n\u251C\u2500\u2500 internal        # Internal implementation\n\u2502   \u251C\u2500\u2500 logic       # Business logic\n\u2502   \u2502   \u251C\u2500\u2500 errcode # Common error code definitions\n\u2502   \u2502   \u251C\u2500\u2500 user\n\u2502   \u2502   \u2514\u2500\u2500 order\n...\n"})}),"\n",(0,s.jsx)(r.h3,{id:"2-monorepo-project",children:"2. Monorepo Project"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-text",children:"monorepo\n\u251C\u2500\u2500 app         # Services directory\n\u2502   \u251C\u2500\u2500 app1    # Service 1\n\u2502   \u251C\u2500\u2500 app2    # Service 2\n\u251C\u2500\u2500 utility     # Utility packages\n\u2502   \u251C\u2500\u2500 errcode # Common error code definitions\n\u2502   \u251C\u2500\u2500 utils   # Common utility functions\n...\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Note that in ",(0,s.jsx)(r.code,{children:"GoFrame"}),"'s monorepo design, the ",(0,s.jsx)(r.code,{children:"utility"})," directory does not strictly differentiate between business and non-business code.\nWe recommend an evolutionary approach to project architecture design, where business project maintainers can make their own distinctions as needed."]}),"\n",(0,s.jsx)(r.h2,{id:"error-code-best-practices",children:"Error Code Best Practices"}),"\n",(0,s.jsx)(r.p,{children:"Designing a good error code system is crucial for project maintainability and extensibility. Here are some practical best practices."}),"\n",(0,s.jsx)(r.h3,{id:"1-error-code-design-principles",children:"1. Error Code Design Principles"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Uniqueness"}),": Each error code should be unique to avoid conflicts and confusion."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Readability"}),": Error codes should have semantic meaning for easy developer understanding and memorization."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Layered Structure"}),': Adopt a layered structure for error code design, such as "service-module-error" format. For example:']}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"Error code format: AABBBCCC\nAA: Service identifier, e.g., 10 for user service\nBBB: Module identifier, e.g., 001 for authentication module\nCCC: Specific error code, e.g., 001 for user not logged in\nExample: 10001001 represents user not logged in error in the authentication module of the user service\n"})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Extensibility"}),": The error code system should support future expansion, reserving sufficient space for future use."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"2-error-code-classification-and-definition",children:"2. Error Code Classification and Definition"}),"\n",(0,s.jsxs)(r.p,{children:["In ",(0,s.jsx)(r.code,{children:"GoFrame"})," projects, we can categorize error codes into different levels, maintained through different classification code files.\nWe only need to define and maintain error codes, ",(0,s.jsx)(r.strong,{children:"it's not recommended to define specific error objects"})," for the following reasons:"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Error codes have a one-to-many relationship with error objects, different error objects can carry different error messages, for example: ",(0,s.jsx)(r.code,{children:'gerror.NewCodef(1001, `user "%s" not found`, userName)'}),"."]}),"\n",(0,s.jsx)(r.li,{children:"Error objects should be created dynamically at runtime, containing complete error stack traces for current error locations, facilitating code chain tracking and debugging."}),"\n",(0,s.jsx)(r.li,{children:"Error codes are suitable for natural transmission between different services and levels, while error objects are only applicable within processes."}),"\n",(0,s.jsxs)(r.li,{children:["Of course, for error objects generated by basic libraries without error codes, using error object checks still makes sense, for example: ",(0,s.jsx)(r.code,{children:"errors.Is(err, sql.ErrNoRows)"}),". Developers should choose solutions based on their scenarios."]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["Below are examples of error code file organization and error code definitions.\nWe use ",(0,s.jsx)(r.code,{children:"gcode"})," to create error codes and maintain mappings between integer values and string descriptions."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'// internal/logic/errors/errors_code.go\n\n// System level error codes\nvar (\n    CodeSuccess       = gcode.New(0, "success", nil)          // Success\n    CodeUnknownError  = gcode.New(1, "unkhown", nil)          // Unknown error\n    CodeNotAuthorized = gcode.New(401, "not authorized", nil) // Not authorized\n    CodeForbidden     = gcode.New(403, "forbidden", nil)      // Access forbidden\n    CodeNotFound      = gcode.New(404, "not found", nil)      // Resource not found\n    CodeServerError   = gcode.New(500, "internal error", nil) // Server error\n    // ...\n)\n'})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'// internal/logic/errors/errors_code_user.go\n\n// User module error codes (10xx)\nvar (\n    CodeUserNotFound    = gcode.New(1001, "user not found", nil)   // User not found\n    CodePasswordInvalid = gcode.New(1002, "invalid password", nil) // Invalid password\n    CodeTokenExpired    = gcode.New(1003, "token expired", nil)    // Token expired\n    CodeUserDisabled    = gcode.New(1004, "user disabled", nil)    // User disabled\n    CodeUserExists      = gcode.New(1005, "user exists", nil)      // User already exists\n    // ...\n)\n'})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'// internal/logic/errors/errors_code_order.go\n\n// Order module error codes (20xx)\nvar (\n    CodeOrderNotFound  = gcode.New(2001, "order not found", nil) // Order not found\n    CodeOrderPaid      = gcode.New(2002, "order paid", nil)      // Order already paid\n    CodeOrderCancelled = gcode.New(2003, "order cancelled", nil) // Order cancelled\n    CodePaymentFailed  = gcode.New(2004, "payment failed", nil)  // Payment failed\n    // ...\n)\n'})}),"\n",(0,s.jsx)(r.h3,{id:"3-practical-usage-example",children:"3. Practical Usage Example"}),"\n",(0,s.jsx)(r.p,{children:"Creating and handling errors in business logic:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'// internal/logic/user/user.go\n\n// Login user login\nfunc (l *User) Login(ctx context.Context, username, password string) (string, error) {\n    // Check if user exists\n    user, err := l.GetUserByUsername(ctx, username)\n    if err != nil {\n        return "", err\n    }\n    if user == nil {\n        return "", gerror.NewCode(errors.CodeUserNotFound)\n    }\n    // Validate password\n    if !l.validatePassword(password, user.Password) {\n        return "", gerror.NewCode(errors.CodePasswordInvalid)\n    }\n    // Generate token\n    token, err := l.generateToken(user.Id)\n    if err != nil {\n        return "", gerror.Wrap(err, "generate token failed")\n    }\n    return token, nil\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"4-unified-error-handling-at-api-layer",children:["4. Unified Error Handling at ",(0,s.jsx)(r.code,{children:"API"})," Layer"]}),"\n",(0,s.jsx)(r.p,{children:"Implementing interface handling in controllers and directly returning errors:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'// api/user/v1/user.go\n\n// LoginReq login request\ntype LoginReq struct {\n    g.Meta `path:"/user/login" method:"post" tags:"user" summary:"User Login"`\n    Username string `v:"required#Username cannot be empty"`\n    Password string `v:"required#Password cannot be empty"`\n}\n\n// LoginRes login response\ntype LoginRes struct {\n    Token string `json:"token"`\n}\n'})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"// internal/controller/user/user.go\n\n// Login user login interface\nfunc (c *Controller) Login(ctx context.Context, req *v1.LoginReq) (*v1.LoginRes, error) {\n    token, err := c.user.Login(ctx, req.Username, req.Password)\n    if err != nil {\n        return nil, err\n    }\n    return &v1.LoginRes{Token: token}, nil\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"Intercepting errors in middleware and implementing unified error wrapping and response:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"// internal/logic/middleware/middleware_response.go\n\n// Unified interception handling in middleware\nfunc (l *Logic) Response(r *ghttp.Request) {\n    r.Middleware.Next()\n    var (\n        err  = r.GetError()\n        res  = r.GetHandlerResponse()\n        msg  = err.Error()\n        code = gerror.Code(err)\n    )\n    r.Response.WriteJson(ghttp.DefaultHandlerResponse{\n        Code:    code.Code(),\n        Message: msg,\n        Data:    res,\n    })\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"error-code-practices-in-distributed-systems",children:"Error Code Practices in Distributed Systems"}),"\n",(0,s.jsx)(r.h3,{id:"1-cross-service-error-propagation",children:"1. Cross-Service Error Propagation"}),"\n",(0,s.jsx)(r.p,{children:"Error codes need to traverse service boundaries in microservice architecture:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'// Error code propagation example\ntype RpcError struct {\n    Code    int    `json:"code"`\n    Message string `json:"message"`\n    Service string `json:"service"`\n}\n\nfunc WrapRpcError(code int, service string) error {\n    return gerror.NewCode(code, gerror.Map{\n        "service": service,\n    })\n}\n\n// Gateway layer error handling\nfunc HandleUpstreamError(err error) {\n    if gerror.HasCode(err, CodeServiceUnavailable) {\n        // Trigger circuit breaker\n        circuitBreaker.Trip()\n    }\n}\n'})}),"\n",(0,s.jsx)(r.h3,{id:"2-error-codes-and-retry-strategies",children:"2. Error Codes and Retry Strategies"}),"\n",(0,s.jsx)(r.p,{children:"Designing intelligent retry strategies based on error codes:"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Error Code Range"}),(0,s.jsx)(r.th,{children:"Retry Strategy"}),(0,s.jsx)(r.th,{children:"Wait Time"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"500-599"})}),(0,s.jsxs)(r.td,{children:["Exponential backoff retry ",(0,s.jsx)(r.code,{children:"3"})," times"]}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"100ms, 1s, 10s"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"400-499"})}),(0,s.jsx)(r.td,{children:"No retry"}),(0,s.jsx)(r.td,{children:"-"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"100-199"})}),(0,s.jsxs)(r.td,{children:["Immediate retry up to ",(0,s.jsx)(r.code,{children:"5"})," times"]}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"50ms"})})]})]})]})]})}function h(e={}){let{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},250065:function(e,r,n){n.d(r,{Z:function(){return t},a:function(){return d}});var i=n(667294);let s={},o=i.createContext(s);function d(e){let r=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(o.Provider,{value:r},e.children)}}}]);