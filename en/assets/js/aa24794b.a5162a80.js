"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["77599"],{157672:function(n,e,t){t.r(e),t.d(e,{metadata:()=>i,contentTitle:()=>u,default:()=>a,assets:()=>c,toc:()=>l,frontMatter:()=>s});var i=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u5B9E\u7528\u5DE5\u5177/\u5DE5\u5177\u65B9\u6CD5-gutil","title":"Utility Functions","description":"The gutil component is a module in the GoFrame framework used to encapsulate commonly used development utility methods. It provides a series of convenient functions to support friendly output of data structures, such as Dump and DumpWithType. Developers can introduce the gutil component through the GitHub repository to improve Go language project development efficiency.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u5B9E\u7528\u5DE5\u5177/\u5DE5\u5177\u65B9\u6CD5-gutil.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u5B9E\u7528\u5DE5\u5177","slug":"/docs/components/util-gutil","permalink":"/en/docs/components/util-gutil","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u5B9E\u7528\u5DE5\u5177/\u5DE5\u5177\u65B9\u6CD5-gutil.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732451468000,"sidebarPosition":6,"frontMatter":{"slug":"/docs/components/util-gutil","title":"Utility Functions","sidebar_position":6,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","gutil","utility methods","Go language","development components","data formatting","API documentation","Dump function","DumpWithType"],"description":"The gutil component is a module in the GoFrame framework used to encapsulate commonly used development utility methods. It provides a series of convenient functions to support friendly output of data structures, such as Dump and DumpWithType. Developers can introduce the gutil component through the GitHub repository to improve Go language project development efficiency."},"sidebar":"mainSidebar","previous":{"title":"Pagination","permalink":"/en/docs/components/util-gpage"},"next":{"title":"Testing","permalink":"/en/docs/components/test"}}'),o=t("785893"),r=t("250065");let s={slug:"/docs/components/util-gutil",title:"Utility Functions",sidebar_position:6,hide_title:!0,keywords:["GoFrame","GoFrame Framework","gutil","utility methods","Go language","development components","data formatting","API documentation","Dump function","DumpWithType"],description:"The gutil component is a module in the GoFrame framework used to encapsulate commonly used development utility methods. It provides a series of convenient functions to support friendly output of data structures, such as Dump and DumpWithType. Developers can introduce the gutil component through the GitHub repository to improve Go language project development efficiency."},u=void 0,c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Common Methods",id:"common-methods",level:2},{value:"<code>Dump</code>",id:"dump",level:3},{value:"<code>DumpWithType</code>",id:"dumpwithtype",level:3},{value:"<code>DumpTo</code>",id:"dumpto",level:3}];function d(n){let e={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"gutil"})," component encapsulates some commonly used utility methods in development."]}),"\n",(0,o.jsx)(e.p,{children:"Usage:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:'import "github.com/gogf/gf/v2/util/gutil"\n'})}),"\n",(0,o.jsx)(e.p,{children:"API documentation:"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/util/gutil",children:"https://pkg.go.dev/github.com/gogf/gf/v2/util/gutil"})}),"\n",(0,o.jsx)(e.h2,{id:"common-methods",children:"Common Methods"}),"\n",(0,o.jsx)(e.h3,{id:"dump",children:(0,o.jsx)(e.code,{children:"Dump"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:["Description: ",(0,o.jsx)(e.code,{children:"Dump"})," outputs ",(0,o.jsx)(e.code,{children:"values"})," to the standard output in a more readable way."]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:"Dump(values ...interface{})\n"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:'type User struct {\n      Name string\n      Age int\n}\n\ntype Location struct {\n      Province string\n      City string\n}\n\ntype UserInfo struct {\n      U User\n      L Location\n}\n\nfunc main() {\n      userList := make([]UserInfo, 0)\n      userList = append(userList, UserInfo{\n          U: User{\n              Name: "\u90ED\u5F3A",\n              Age:  18,\n          },\n          L: Location{\n              Province: "\u56DB\u5DDD",\n              City:     "\u6210\u90FD",\n          },\n      })\n      userList = append(userList, UserInfo{\n          U: User{\n              Name: "\u9EC4\u9A9E",\n              Age:  18,\n          },\n          L: Location{\n              Province: "\u6C5F\u82CF",\n              City:     "\u5357\u4EAC",\n          },\n      })\n\n      gutil.Dump(userList)\n}\n\n// Output:\n[\n      {\n          U: {\n              Name: "\u90ED\u5F3A",\n              Age:  18,\n          },\n          L: {\n              Province: "\u56DB\u5DDD",\n              City:     "\u6210\u90FD",\n          },\n      },\n      {\n          U: {\n              Name: "\u9EC4\u9A9E",\n              Age:  18,\n          },\n          L: {\n              Province: "\u6C5F\u82CF",\n              City:     "\u5357\u4EAC",\n          },\n      },\n]\n'})}),"\n",(0,o.jsx)(e.h3,{id:"dumpwithtype",children:(0,o.jsx)(e.code,{children:"DumpWithType"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:["Description: ",(0,o.jsx)(e.code,{children:"DumpWithType"})," is similar to ",(0,o.jsx)(e.code,{children:"Dump"})," but includes type information."]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:"DumpWithType(values ...interface{})\n"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:'type User struct {\n      Name string\n      Age int\n}\n\ntype Location struct {\n      Province string\n      City string\n}\n\ntype UserInfo struct {\n      U User\n      L Location\n}\n\nfunc main() {\n      userList := make([]UserInfo, 0)\n      userList = append(userList, UserInfo{\n          U: User{\n              Name: "\u90ED\u5F3A",\n              Age:  18,\n          },\n          L: Location{\n              Province: "\u56DB\u5DDD",\n              City:     "\u6210\u90FD",\n          },\n      })\n      userList = append(userList, UserInfo{\n          U: User{\n              Name: "\u9EC4\u9A9E",\n              Age:  18,\n          },\n          L: Location{\n              Province: "\u6C5F\u82CF",\n              City:     "\u5357\u4EAC",\n          },\n      })\n\n      gutil.DumpWithType(userList)\n}\n\n// Output:\n[]main.UserInfo(2) [\n      main.UserInfo(2) {\n          U: main.User(2) {\n              Name: string(6) "\u90ED\u5F3A",\n              Age:  int(18),\n          },\n          L: main.Location(2) {\n              Province: string(6) "\u56DB\u5DDD",\n              City:     string(6) "\u6210\u90FD",\n          },\n      },\n      main.UserInfo(2) {\n          U: main.User(2) {\n              Name: string(6) "\u9EC4\u9A9E",\n              Age:  int(18),\n          },\n          L: main.Location(2) {\n              Province: string(6) "\u6C5F\u82CF",\n              City:     string(6) "\u5357\u4EAC",\n          },\n      },\n]\n'})}),"\n",(0,o.jsx)(e.h3,{id:"dumpto",children:(0,o.jsx)(e.code,{children:"DumpTo"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:["Description: ",(0,o.jsx)(e.code,{children:"DumpTo"})," writes ",(0,o.jsx)(e.code,{children:"value"})," to ",(0,o.jsx)(e.code,{children:"writer"})," in a customized output format."]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:"DumpTo(writer io.Writer, value interface{}, option DumpOption)\n"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n      "bytes"\n      "fmt"\n      "github.com/gogf/gf/v2/util/gutil"\n      "io"\n)\n\ntype UserInfo struct {\n      Name     string\n      Age      int\n      Province string\n      City     string\n}\n\ntype DumpWriter struct {\n      Content string\n}\n\nfunc (d *DumpWriter) Write(p []byte) (n int, err error) {\n      buffer := bytes.NewBuffer(nil)\n      buffer.WriteString("I\'m Start!\\n")\n      buffer.WriteString(string(p))\n      buffer.WriteString("\\nI\'m End!\\n")\n\n      d.Content = buffer.String()\n\n      return buffer.Len(), nil\n}\n\nfunc main() {\n      u := UserInfo{\n          "a", 18, "b", "c",\n      }\n\n      var dw io.Writer = &DumpWriter{}\n\n      gutil.DumpTo(dw, u, gutil.DumpOption{})\n\n      fmt.Println(dw.(*DumpWriter).Content)\n}\n\n// Output:\nI\'m Start!\n{\n      Name:     "a",\n      Age:      18,\n      Province: "b",\n      City:     "c",\n}\nI\'m End!\n'})})]})}function a(n={}){let{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},250065:function(n,e,t){t.d(e,{Z:function(){return u},a:function(){return s}});var i=t(667294);let o={},r=i.createContext(o);function s(n){let e=i.useContext(r);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function u(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);