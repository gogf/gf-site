"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["67596"],{961391:function(e,l,n){n.r(l),n.d(l,{metadata:()=>i,contentTitle:()=>c,default:()=>h,assets:()=>a,toc:()=>o,frontMatter:()=>s});var i=JSON.parse('{"id":"examples/observability/metric/callback/callback","title":"Callback","description":"callback-based metric collection in GoFrame","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/examples/observability/metric/callback/callback.md","sourceDirName":"examples/observability/metric/callback","slug":"/examples/observability/metric/callback","permalink":"/en/examples/observability/metric/callback","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/examples/observability/metric/callback/callback.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1740107000000,"frontMatter":{"title":"Callback","slug":"/examples/observability/metric/callback","keywords":["metrics","callback","prometheus","opentelemetry","goframe"],"description":"callback-based metric collection in GoFrame","hide_title":true},"sidebar":"examplesSidebar","previous":{"title":"Basic","permalink":"/en/examples/observability/metric/basic"},"next":{"title":"Dynamic Attributes","permalink":"/en/examples/observability/metric/dynamic_attributes"}}'),t=n("785893"),r=n("250065");let s={title:"Callback",slug:"/examples/observability/metric/callback",keywords:["metrics","callback","prometheus","opentelemetry","goframe"],description:"callback-based metric collection in GoFrame",hide_title:!0},c="Metric - Callback Example",a={},o=[{value:"Description",id:"description",level:2},{value:"Structure",id:"structure",level:2},{value:"Features",id:"features",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Usage",id:"usage",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Notes",id:"notes",level:2}];function d(e){let l={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(l.header,{children:(0,t.jsx)(l.h1,{id:"metric---callback-example",children:"Metric - Callback Example"})}),"\n",(0,t.jsxs)(l.p,{children:["Github Source: ",(0,t.jsx)(l.a,{href:"https://github.com/gogf/examples/tree/main/observability/metric/callback",children:"https://github.com/gogf/examples/tree/main/observability/metric/callback"})]}),"\n",(0,t.jsx)(l.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(l.p,{children:["This example demonstrates how to implement callback-based metric collection in ",(0,t.jsx)(l.code,{children:"GoFrame"})," using ",(0,t.jsx)(l.code,{children:"OpenTelemetry"})," and ",(0,t.jsx)(l.code,{children:"Prometheus"})," integration. It shows how to:"]}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsx)(l.li,{children:"Create metrics with callback functions"}),"\n",(0,t.jsx)(l.li,{children:"Automatically update metric values through callbacks"}),"\n",(0,t.jsx)(l.li,{children:"Configure metric attributes"}),"\n",(0,t.jsxs)(l.li,{children:["Export metrics in ",(0,t.jsx)(l.code,{children:"Prometheus"})," format"]}),"\n"]}),"\n",(0,t.jsx)(l.h2,{id:"structure",children:"Structure"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-text",children:"- `go.mod`: The Go module file for dependency management\n- `go.sum`: The Go module checksums file\n- `main.go`: The main application demonstrating callback-based metrics\n"})}),"\n",(0,t.jsx)(l.h2,{id:"features",children:"Features"}),"\n",(0,t.jsx)(l.p,{children:"The example showcases the following features:"}),"\n",(0,t.jsxs)(l.ol,{children:["\n",(0,t.jsxs)(l.li,{children:["\n",(0,t.jsx)(l.p,{children:"Callback-based Metrics"}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsx)(l.li,{children:"Automatic value updates"}),"\n",(0,t.jsx)(l.li,{children:"Custom callback functions"}),"\n",(0,t.jsx)(l.li,{children:"No manual update needed"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(l.li,{children:["\n",(0,t.jsx)(l.p,{children:"Regular Metrics"}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsx)(l.li,{children:"Manual value updates"}),"\n",(0,t.jsx)(l.li,{children:"Direct control over values"}),"\n",(0,t.jsx)(l.li,{children:"Comparison with callback approach"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(l.li,{children:["\n",(0,t.jsx)(l.p,{children:"Metric Configuration"}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsx)(l.li,{children:"Custom attributes"}),"\n",(0,t.jsx)(l.li,{children:"Help text"}),"\n",(0,t.jsx)(l.li,{children:"Units"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(l.h2,{id:"requirements",children:"Requirements"}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsxs)(l.li,{children:[(0,t.jsx)(l.a,{href:"https://golang.org/dl/",children:"Go"})," ",(0,t.jsx)(l.code,{children:"1.22"})," or higher"]}),"\n",(0,t.jsx)(l.li,{children:(0,t.jsx)(l.a,{href:"https://git-scm.com/downloads",children:"Git"})}),"\n",(0,t.jsx)(l.li,{children:(0,t.jsx)(l.a,{href:"https://goframe.org",children:"GoFrame"})}),"\n",(0,t.jsx)(l.li,{children:(0,t.jsx)(l.a,{href:"https://github.com/gogf/gf/tree/master/contrib/metric/otelmetric",children:"GoFrame OpenTelemetry Metric"})}),"\n"]}),"\n",(0,t.jsx)(l.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(l.ol,{children:["\n",(0,t.jsxs)(l.li,{children:["\n",(0,t.jsx)(l.p,{children:"Run the example:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"go run main.go\n"})}),"\n"]}),"\n",(0,t.jsxs)(l.li,{children:["\n",(0,t.jsx)(l.p,{children:"Access the metrics:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"# Using curl\ncurl http://localhost:8000/metrics\n\n# Or open in browser\nhttp://localhost:8000/metrics\n"})}),"\n"]}),"\n",(0,t.jsxs)(l.li,{children:["\n",(0,t.jsx)(l.p,{children:"Example metrics output:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-text",children:'# HELP goframe_metric_demo_counter This is a simple demo for Counter usage\ngoframe_metric_demo_counter{const_attr_1="1"} 11\n\n# HELP goframe_metric_demo_observable_counter This is a simple demo for ObservableCounter usage\ngoframe_metric_demo_observable_counter{const_attr_3="3"} 10\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(l.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,t.jsx)(l.p,{children:"The example demonstrates:"}),"\n",(0,t.jsxs)(l.ol,{children:["\n",(0,t.jsx)(l.li,{children:"Creating metrics with callback functions"}),"\n",(0,t.jsx)(l.li,{children:"Automatic value updates through callbacks"}),"\n",(0,t.jsx)(l.li,{children:"Comparison between callback and manual updates"}),"\n",(0,t.jsx)(l.li,{children:"Proper metric configuration"}),"\n",(0,t.jsxs)(l.li,{children:[(0,t.jsx)(l.code,{children:"Prometheus"})," integration"]}),"\n"]}),"\n",(0,t.jsx)(l.h2,{id:"notes",children:"Notes"}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsx)(l.li,{children:"Callbacks are executed automatically by the metrics system"}),"\n",(0,t.jsx)(l.li,{children:"No need for manual updates of callback-based metrics"}),"\n",(0,t.jsx)(l.li,{children:"Callbacks should be lightweight and fast"}),"\n",(0,t.jsx)(l.li,{children:"Consider thread safety in callbacks"}),"\n",(0,t.jsx)(l.li,{children:"Proper cleanup is handled via defer"}),"\n",(0,t.jsx)(l.li,{children:"Default port is 8000"}),"\n",(0,t.jsx)(l.li,{children:"Metrics endpoint is at /metrics"}),"\n"]})]})}function h(e={}){let{wrapper:l}={...(0,r.a)(),...e.components};return l?(0,t.jsx)(l,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},250065:function(e,l,n){n.d(l,{Z:function(){return c},a:function(){return s}});var i=n(667294);let t={},r=i.createContext(t);function s(e){let l=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(l):{...l,...e}},[l,e])}function c(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(r.Provider,{value:l},e.children)}}}]);