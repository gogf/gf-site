"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["37528"],{126566:function(e,n,t){t.r(n),t.d(n,{metadata:()=>r,contentTitle:()=>s,default:()=>u,assets:()=>c,toc:()=>l,frontMatter:()=>i});var r=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree/\u6811\u5F62\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528","title":"Tree - Usage","description":"Basic operations using tree-type data structures in the GoFrame framework. Demonstrates how to create and operate on RedBlackTree and AVL trees through example code, including adding, deleting, and traversing nodes, enabling developers to easily achieve efficient data storage and lookup.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree/\u6811\u5F62\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree","slug":"/docs/components/container-gtree-example","permalink":"/en/docs/components/container-gtree-example","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree/\u6811\u5F62\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/components/container-gtree-example","title":"Tree - Usage","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","Tree Structure","RedBlackTree","AVL Tree","gtree","Data Structure","Traversal","Basic Usage","Example"],"description":"Basic operations using tree-type data structures in the GoFrame framework. Demonstrates how to create and operate on RedBlackTree and AVL trees through example code, including adding, deleting, and traversing nodes, enabling developers to easily achieve efficient data storage and lookup."},"sidebar":"mainSidebar","previous":{"title":"Tree","permalink":"/en/docs/components/container-gtree"},"next":{"title":"Tree - Methods","permalink":"/en/docs/components/container-gtree-funcs"}}'),a=t("785893"),o=t("250065");let i={slug:"/docs/components/container-gtree-example",title:"Tree - Usage",sidebar_position:0,hide_title:!0,keywords:["GoFrame","GoFrame Framework","Tree Structure","RedBlackTree","AVL Tree","gtree","Data Structure","Traversal","Basic Usage","Example"],description:"Basic operations using tree-type data structures in the GoFrame framework. Demonstrates how to create and operate on RedBlackTree and AVL trees through example code, including adding, deleting, and traversing nodes, enabling developers to easily achieve efficient data storage and lookup."},s=void 0,c={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Pre-order/Post-order Traversal",id:"pre-orderpost-order-traversal",level:2}];function d(e){let n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/gtree"\n    "github.com/gogf/gf/v2/util/gutil"\n)\n\nfunc main() {\n    m := gtree.NewRedBlackTree(gutil.ComparatorInt)\n\n    // Set key-value pairs\n    for i := 0; i < 10; i++ {\n        m.Set(i, i*10)\n    }\n    // Query size\n    fmt.Println(m.Size())\n    // Batch set key-value pairs (different data type objects have different parameters)\n    m.Sets(map[interface{}]interface{}{\n        10: 10,\n        11: 11,\n    })\n    fmt.Println(m.Size())\n\n    // Check existence\n    fmt.Println(m.Contains(1))\n\n    // Query key-value\n    fmt.Println(m.Get(1))\n\n    // Remove item\n    m.Remove(9)\n    fmt.Println(m.Size())\n\n    // Batch remove\n    m.Removes([]interface{}{10, 11})\n    fmt.Println(m.Size())\n\n    // Current list of keys (random order)\n    fmt.Println(m.Keys())\n    // Current list of values (random order)\n    fmt.Println(m.Values())\n\n    // Query key, if key does not exist, write the given default value\n    fmt.Println(m.GetOrSet(100, 100))\n\n    // Remove key-value pair and return the corresponding value\n    fmt.Println(m.Remove(100))\n\n    // Iterate over map\n    m.IteratorAsc(func(k interface{}, v interface{}) bool {\n        fmt.Printf("%v:%v ", k, v)\n        return true\n    })\n    fmt.Println()\n\n    // Clear map\n    m.Clear()\n\n    // Check if map is empty\n    fmt.Println(m.IsEmpty())\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"After execution, the output is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-10",children:"12\ntrue\n10\n11\n9\n[0 1 2 3 4 5 6 7 8]\n[0 10 20 30 40 50 60 70 80]\n100\n100\n0:0 1:10 2:20 3:30 4:40 5:50 6:60 7:70 8:80\ntrue\n"})}),"\n",(0,a.jsx)(n.h2,{id:"pre-orderpost-order-traversal",children:"Pre-order/Post-order Traversal"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/gtree"\n    "github.com/gogf/gf/v2/util/gutil"\n)\n\nfunc main() {\n    tree := gtree.NewAVLTree(gutil.ComparatorInt)\n    for i := 0; i < 10; i++ {\n        tree.Set(i, i*10)\n    }\n    // Print tree\n    tree.Print()\n    // Pre-order traversal\n    fmt.Println("ASC:")\n    tree.IteratorAsc(func(key, value interface{}) bool {\n        fmt.Println(key, value)\n        return true\n    })\n    // Post-order traversal\n    fmt.Println("DESC:")\n    tree.IteratorDesc(func(key, value interface{}) bool {\n        fmt.Println(key, value)\n        return true\n    })\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"After execution, the output is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-AVLTree",children:"\u2502           \u250C\u2500\u2500 9\n\u2502       \u250C\u2500\u2500 8\n\u2502   \u250C\u2500\u2500 7\n\u2502   \u2502   \u2502   \u250C\u2500\u2500 6\n\u2502   \u2502   \u2514\u2500\u2500 5\n\u2502   \u2502       \u2514\u2500\u2500 4\n\u2514\u2500\u2500 3\n    \u2502   \u250C\u2500\u2500 2\n    \u2514\u2500\u2500 1\n        \u2514\u2500\u2500 0\n\nASC:\n0 0\n1 10\n2 20\n3 30\n4 40\n5 50\n6 60\n7 70\n8 80\n9 90\nDESC:\n9 90\n8 80\n7 70\n6 60\n5 50\n4 40\n3 30\n2 20\n1 10\n0 0\n"})})]})}function u(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return s},a:function(){return i}});var r=t(667294);let a={},o=r.createContext(a);function i(e){let n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);