"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["97372"],{909733:function(n,e,r){r.r(e),r.d(e,{metadata:()=>a,contentTitle:()=>l,default:()=>u,assets:()=>o,toc:()=>d,frontMatter:()=>t});var a=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u6821\u9A8C/\u6570\u636E\u6821\u9A8C-\u65B9\u6CD5\u4ECB\u7ECD","title":"Data Validation - Methods","description":"The data validation function in the GoFrame framework, detailing the use of common validation methods including New, Run, Clone, I18n, Bail, and Ci. Through specific examples, it explains how to effectively use these methods for data validation and provides ways to customize validation rules and error messages to help developers better complete data validation tasks for their applications.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u6821\u9A8C/\u6570\u636E\u6821\u9A8C-\u65B9\u6CD5\u4ECB\u7ECD.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u6821\u9A8C","slug":"/docs/core/gvalid-funcs","permalink":"/en/docs/core/gvalid-funcs","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u6821\u9A8C/\u6570\u636E\u6821\u9A8C-\u65B9\u6CD5\u4ECB\u7ECD.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":8,"frontMatter":{"slug":"/docs/core/gvalid-funcs","title":"Data Validation - Methods","sidebar_position":8,"hide_title":true,"keywords":["GoFrame Framework","Validator","Data Validation","Validation Rules","Custom Validation","I18N Internationalization","Field Comparison","Validation Methods","Validation Examples","Error Messages"],"description":"The data validation function in the GoFrame framework, detailing the use of common validation methods including New, Run, Clone, I18n, Bail, and Ci. Through specific examples, it explains how to effectively use these methods for data validation and provides ways to customize validation rules and error messages to help developers better complete data validation tasks for their applications."},"sidebar":"mainSidebar","previous":{"title":"Data Validation - Error Msg","permalink":"/en/docs/core/gvalid-custom-validating-message"},"next":{"title":"Data Validation - FAQ","permalink":"/en/docs/core/gvalid-faq"}}'),i=r("785893"),s=r("250065");let t={slug:"/docs/core/gvalid-funcs",title:"Data Validation - Methods",sidebar_position:8,hide_title:!0,keywords:["GoFrame Framework","Validator","Data Validation","Validation Rules","Custom Validation","I18N Internationalization","Field Comparison","Validation Methods","Validation Examples","Error Messages"],description:"The data validation function in the GoFrame framework, detailing the use of common validation methods including New, Run, Clone, I18n, Bail, and Ci. Through specific examples, it explains how to effectively use these methods for data validation and provides ways to customize validation rules and error messages to help developers better complete data validation tasks for their applications."},l=void 0,o={},d=[{value:"<code>New</code>",id:"new",level:2},{value:"<code>Run</code>",id:"run",level:2},{value:"<code>Clone</code>",id:"clone",level:2},{value:"I18n",id:"i18n",level:2},{value:"Bail",id:"bail",level:2},{value:"<code>Ci</code>",id:"ci",level:2},{value:"Data",id:"data",level:2},{value:"Assoc",id:"assoc",level:2},{value:"Rules",id:"rules",level:2},{value:"<code>Message</code>",id:"message",level:2},{value:"RuleFunc",id:"rulefunc",level:2},{value:"RuleFuncMap",id:"rulefuncmap",level:2}];function c(n){let e={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.admonition,{type:"tip",children:(0,i.jsxs)(e.p,{children:["The following list of common methods in the document may be delayed compared to new features in the code. For more methods and examples, please refer to the code documentation: ",(0,i.jsx)(e.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/util/gvalid",children:"https://pkg.go.dev/github.com/gogf/gf/v2/util/gvalid"})]})}),"\n",(0,i.jsx)(e.h2,{id:"new",children:(0,i.jsx)(e.code,{children:"New"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Description: ",(0,i.jsx)(e.code,{children:"New"})," creates and returns a new object of ",(0,i.jsx)(e.code,{children:"Validator"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:"New() *Validator\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'func ExampleNew() {\n      validator := gvalid.New()\n\n      if err := validator.Data(16).Rules("min:18").Run(context.Background()); err != nil {\n          fmt.Print(err)\n      }\n\n      // Output:\n      // The value `16` must be equal or greater than 18\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"run",children:(0,i.jsx)(e.code,{children:"Run"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Description: ",(0,i.jsx)(e.code,{children:"Run"})," performs validation operations on data with given rules and information."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:"Run(ctx context.Context) Error\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'func ExampleValidator_Run() {\n      // check value mode\n      if err := g.Validator().Data(16).Rules("min:18").Run(context.Background()); err != nil {\n          fmt.Println("check value err:", err)\n      }\n      // check map mode\n      data := map[string]interface{}{\n          "passport":  "",\n          "password":  "123456",\n          "password2": "1234567",\n      }\n      rules := map[string]string{\n          "passport":  "required|length:6,16",\n          "password":  "required|length:6,16|same:password2",\n          "password2": "required|length:6,16",\n      }\n      if err := g.Validator().Data(data).Rules(rules).Run(context.Background()); err != nil {\n          fmt.Println("check map err:", err)\n      }\n      // check struct mode\n      type Params struct {\n          Page      int    `v:"required|min:1"`\n          Size      int    `v:"required|between:1,100"`\n          ProjectId string `v:"between:1,10000"`\n      }\n      rules = map[string]string{\n          "Page":      "required|min:1",\n          "Size":      "required|between:1,100",\n          "ProjectId": "between:1,10000",\n      }\n      obj := &Params{\n          Page: 0,\n          Size: 101,\n      }\n      if err := g.Validator().Data(obj).Run(context.Background()); err != nil {\n          fmt.Println("check struct err:", err)\n      }\n\n      // May Output:\n      // check value err: The value `16` must be equal or greater than 18\n      // check map err: The passport field is required; The passport value `` length must be between 6 and 16; The password value `123456` must be the same as field password2\n      // check struct err: The Page value `0` must be equal or greater than 1; The Size value `101` must be between 1 and 100\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"clone",children:(0,i.jsx)(e.code,{children:"Clone"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Description: Clone creates and returns a value copy object of the current Validator."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"(v *Validator) Clone() *Validator\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'func ExampleValidator_Clone() {\n      if err := g.Validator().Data(16).Rules("min:18").Run(context.Background()); err != nil {\n          fmt.Println(err)\n      }\n\n      if err := g.Validator().Clone().Data(20).Run(context.Background()); err != nil {\n          fmt.Println(err)\n      } else {\n          fmt.Println("Check Success!")\n      }\n\n      // Output:\n      // The value `16` must be equal or greater than 18\n      // Check Success!\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"i18n",children:"I18n"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Description: The ",(0,i.jsx)(e.code,{children:"I18n"})," method is used to set the ",(0,i.jsx)(e.code,{children:"I18N"})," internationalization component for the current validation object. By default, the validation component uses the framework's global default ",(0,i.jsx)(e.code,{children:"i18n"})," component object."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:"I18n(i18nManager *gi18n.Manager) *Validator\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'func ExampleValidator_I18n() {\n      var (\n          i18nManager = gi18n.New()\n          ctxCn       = gi18n.WithLanguage(context.Background(), "cn")\n          validator   = gvalid.New()\n      )\n\n      validator = validator.Data(16).Rules("min:18")\n\n      if err := validator.Run(context.Background()); err != nil {\n          fmt.Println(err)\n      }\n\n      if err := validator.I18n(i18nManager).Run(ctxCn); err != nil {\n          fmt.Println(err)\n      }\n\n      // Output:\n      // The value `16` must be equal or greater than 18\n      // \u5B57\u6BB5\u503C`16`\u5B57\u6BB5\u6700\u5C0F\u503C\u5E94\u5F53\u4E3A18\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"bail",children:"Bail"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Description: The ",(0,i.jsx)(e.code,{children:"Bail"})," method is used to set that if any rule fails in subsequent validations, it stops validation immediately and returns the error result."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:"Bail() *Validator\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'func ExampleValidator_Bail() {\n      type BizReq struct {\n          Account   string `v:"required|length:6,16|same:QQ"`\n          QQ        string\n          Password  string `v:"required|same:Password2"`\n          Password2 string `v:"required"`\n      }\n      var (\n          ctx = context.Background()\n          req = BizReq{\n              Account:   "gf",\n              QQ:        "123456",\n              Password:  "goframe.org",\n              Password2: "goframe.org",\n          }\n      )\n\n      if err := g.Validator().Bail().Data(req).Run(ctx); err != nil {\n          fmt.Println("Use Bail Error:", err)\n      }\n\n      if err := g.Validator().Data(req).Run(ctx); err != nil {\n          fmt.Println("Not Use Bail Error:", err)\n      }\n\n      // output:\n      // Use Bail Error: The Account value `gf` length must be between 6 and 16\n      // Not Use Bail Error: The Account value `gf` length must be between 6 and 16; The Account value `gf` must be the same as field QQ\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"ci",children:(0,i.jsx)(e.code,{children:"Ci"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Description: The ",(0,i.jsx)(e.code,{children:"Ci"})," method is used to set case-insensitive comparison when requiring value comparison in rules."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:"Ci() *Validator\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'func ExampleValidator_Ci() {\n\n      type BizReq struct {\n          Account   string `v:"required"`\n          Password  string `v:"required|same:Password2"`\n          Password2 string `v:"required"`\n      }\n\n      var (\n          ctx = context.Background()\n          req = BizReq{\n              Account:   "gf",\n              Password:  "Goframe.org", // Diff from Password2, but because of "ci", rule check passed\n              Password2: "goframe.org",\n          }\n      )\n\n      if err := g.Validator().Data(req).Run(ctx); err != nil {\n          fmt.Println("Not Use CI Error:", err)\n      }\n\n      if err := g.Validator().Ci().Data(req).Run(ctx); err == nil {\n          fmt.Println("Use CI Passed!")\n      }\n\n      // output:\n      // Not Use CI Error: The Password value `Goframe.org` must be the same as field Password2\n      // Use CI Passed!\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"data",children:"Data"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Description: The ",(0,i.jsx)(e.code,{children:"Data"})," method is used to provide data that needs to be jointly validated."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:"Data(data interface{}) *Validator\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'func ExampleValidator_Data() {\n      type BizReq struct {\n          Password1 string `v:"password"`\n          Password2 string `v:"password"`\n      }\n\n      var (\n          ctx = context.Background()\n          req = BizReq{\n              Password1: "goframe",\n              Password2: "gofra", // error length between 6 and 18\n          }\n      )\n      if err := g.Validator().Data(req).Run(ctx); err != nil {\n          fmt.Print(err)\n      }\n\n      // Output:\n      // The Password2 value `gofra` is not a valid password format\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"assoc",children:"Assoc"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Description: ",(0,i.jsx)(e.code,{children:"Assoc"})," is a chain operation function that sets validation data for the current ",(0,i.jsx)(e.code,{children:"Validator"}),". The parameter ",(0,i.jsx)(e.code,{children:"assoc"})," is usually of type ",(0,i.jsx)(e.code,{children:"map"}),", specifying the value of ",(0,i.jsx)(e.code,{children:"union validator"})," in the ",(0,i.jsx)(e.code,{children:"map"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Note: Using a non-",(0,i.jsx)(e.code,{children:"nil"})," ",(0,i.jsx)(e.code,{children:"assoc"})," parameter will set the ",(0,i.jsx)(e.code,{children:"useDataInsteadOfObjectAttributes"})," attribute to ",(0,i.jsx)(e.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:"Assoc(assoc interface{}) *Validator\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'func ExampleValidator_Assoc() {\n\n      type User struct {\n          Name string `v:"required"`\n          Type int    `v:"required"`\n      }\n\n      data := g.Map{\n          "name": "john",\n      }\n\n      user := User{}\n\n      if err := gconv.Scan(data, &user); err != nil {\n          panic(err)\n      }\n\n      if err := g.Validator().Data(user).Assoc(data).Run(context.Background()); err != nil {\n          fmt.Print(err)\n      }\n\n      // Output:\n      // The Type field is required\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"rules",children:"Rules"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Description: The ",(0,i.jsx)(e.code,{children:"Rules"})," method is used to provide custom validation rules for the current chain operation validation."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:"Rules(rules interface{}) *Validator\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'func ExampleValidator_Rules() {\n\n      if err := g.Validator().Data(16).Rules("min:18").Run(context.Background()); err != nil {\n          fmt.Println(err)\n      }\n\n      // Output:\n      // The value `16` must be equal or greater than 18\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"message",children:(0,i.jsx)(e.code,{children:"Message"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Description: The ",(0,i.jsx)(e.code,{children:"Messages"})," method is used to provide custom error messages for the current chain operation validation."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:"Messages(messages interface{}) *Validator\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'func ExampleValidator_Messages() {\n      if err := g.Validator().Data(16).Rules("min:18").Messages("Can not regist, Age is less then 18!").Run(context.Background()); err != nil {\n          fmt.Println(err)\n      }\n\n      // Output:\n      // Can not regist, Age is less then 18!\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"rulefunc",children:"RuleFunc"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Description: ",(0,i.jsx)(e.code,{children:"RuleFunc"})," registers a custom validation rule function to the current ",(0,i.jsx)(e.code,{children:"Validator"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:"RuleFunc(rule string, f RuleFunc) *Validator\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'func ExampleValidator_RuleFunc() {\n      var (\n          ctx             = context.Background()\n          lenErrRuleName  = "LenErr"\n          passErrRuleName = "PassErr"\n          lenErrRuleFunc  = func(ctx context.Context, in gvalid.RuleFuncInput) error {\n              pass := in.Value.String()\n              if len(pass) != 6 {\n                  return errors.New(in.Message)\n              }\n              return nil\n          }\n          passErrRuleFunc = func(ctx context.Context, in gvalid.RuleFuncInput) error {\n              pass := in.Value.String()\n              if m := in.Data.Map(); m["data"] != pass {\n                  return errors.New(in.Message)\n              }\n              return nil\n          }\n      )\n\n      type LenErrStruct struct {\n          Value string `v:"uid@LenErr#Value Length Error!"`\n          Data  string `p:"data"`\n      }\n\n      st := &LenErrStruct{\n          Value: "123",\n          Data:  "123456",\n      }\n      // single error sample\n      if err := g.Validator().RuleFunc(lenErrRuleName, lenErrRuleFunc).Data(st).Run(ctx); err != nil {\n          fmt.Println(err)\n      }\n\n      type MultiErrorStruct struct {\n          Value string `v:"uid@LenErr|PassErr#Value Length Error!|Pass is not Same!"`\n          Data  string `p:"data"`\n      }\n\n      multi := &MultiErrorStruct{\n          Value: "123",\n          Data:  "123456",\n      }\n      // multi error sample\n      if err := g.Validator().RuleFunc(lenErrRuleName, lenErrRuleFunc).RuleFunc(passErrRuleName, passErrRuleFunc).Data(multi).Run(ctx); err != nil {\n          fmt.Println(err)\n      }\n\n      // Output:\n      // Value Length Error!\n      // Value Length Error!; Pass is not Same!\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"rulefuncmap",children:"RuleFuncMap"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Description: ",(0,i.jsx)(e.code,{children:"RuleFuncMap"})," registers multiple custom validation rule functions to the current ",(0,i.jsx)(e.code,{children:"Validator"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:"RuleFuncMap(m map[string]RuleFunc) *Validator\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'func ExampleValidator_RuleFuncMap() {\n      var (\n          ctx             = context.Background()\n          lenErrRuleName  = "LenErr"\n          passErrRuleName = "PassErr"\n          lenErrRuleFunc  = func(ctx context.Context, in gvalid.RuleFuncInput) error {\n              pass := in.Value.String()\n              if len(pass) != 6 {\n                  return errors.New(in.Message)\n              }\n              return nil\n          }\n          passErrRuleFunc = func(ctx context.Context, in gvalid.RuleFuncInput) error {\n              pass := in.Value.String()\n              if m := in.Data.Map(); m["data"] != pass {\n                  return errors.New(in.Message)\n              }\n              return nil\n          }\n          ruleMap = map[string]gvalid.RuleFunc{\n              lenErrRuleName:  lenErrRuleFunc,\n              passErrRuleName: passErrRuleFunc,\n          }\n      )\n\n      type MultiErrorStruct struct {\n          Value string `v:"uid@LenErr|PassErr#Value Length Error!|Pass is not Same!"`\n          Data  string `p:"data"`\n      }\n\n      multi := &MultiErrorStruct{\n          Value: "123",\n          Data:  "123456",\n      }\n\n      if err := g.Validator().RuleFuncMap(ruleMap).Data(multi).Run(ctx); err != nil {\n          fmt.Println(err)\n      }\n\n      // Output:\n      // Value Length Error!; Pass is not Same!\n}\n'})})]})}function u(n={}){let{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},250065:function(n,e,r){r.d(e,{Z:function(){return l},a:function(){return t}});var a=r(667294);let i={},s=a.createContext(i);function t(n){let e=a.useContext(s);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:t(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);