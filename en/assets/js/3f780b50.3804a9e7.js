"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["41254"],{175045:function(e,n,t){t.r(n),t.d(n,{metadata:()=>i,contentTitle:()=>s,default:()=>g,assets:()=>r,toc:()=>c,frontMatter:()=>l});var i=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u5BF9\u8C61\u7BA1\u7406","title":"Objects","description":"The GoFrame framework provides a series of commonly used data types and object acquisition methods. Through the g module, it is easy to obtain commonly used objects, including HTTP client, data validation, configuration management, log management, template engine, WEB server, database ORM, Redis client, etc., to achieve simple and efficient object management to meet the needs of different application scenarios.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u5BF9\u8C61\u7BA1\u7406.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6","slug":"/docs/core/g","permalink":"/en/docs/core/g","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u5BF9\u8C61\u7BA1\u7406.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/core/g","title":"Objects","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","Object Management","Data Types","Common Objects","Singleton Pattern","Configuration Management","Log Management","Template Engine","WEB Server","Redis Client"],"description":"The GoFrame framework provides a series of commonly used data types and object acquisition methods. Through the g module, it is easy to obtain commonly used objects, including HTTP client, data validation, configuration management, log management, template engine, WEB server, database ORM, Redis client, etc., to achieve simple and efficient object management to meet the needs of different application scenarios."},"sidebar":"mainSidebar","previous":{"title":"Core Components \uD83D\uDD25","permalink":"/en/docs/core"},"next":{"title":"Debug Mode","permalink":"/en/docs/core/debugging"}}'),a=t("785893"),o=t("250065");let l={slug:"/docs/core/g",title:"Objects",sidebar_position:0,hide_title:!0,keywords:["GoFrame","Object Management","Data Types","Common Objects","Singleton Pattern","Configuration Management","Log Management","Template Engine","WEB Server","Redis Client"],description:"The GoFrame framework provides a series of commonly used data types and object acquisition methods. Through the g module, it is easy to obtain commonly used objects, including HTTP client, data validation, configuration management, log management, template engine, WEB server, database ORM, Redis client, etc., to achieve simple and efficient object management to meet the needs of different application scenarios."},s=void 0,r={},c=[{value:"Data Types",id:"data-types",level:2},{value:"Common Objects",id:"common-objects",level:2},{value:"<code>HTTP</code> Client Object",id:"http-client-object",level:3},{value:"<code>Validator</code> Object",id:"validator-object",level:3},{value:"(Singleton) Configuration Management Object",id:"singleton-configuration-management-object",level:3},{value:"(Singleton) Log Management Object",id:"singleton-log-management-object",level:3},{value:"(Singleton) Template Engine Object",id:"singleton-template-engine-object",level:3},{value:"(Singleton) <code>WEB Server</code>",id:"singleton-web-server",level:3},{value:"(Singleton) <code>TCP Server</code>",id:"singleton-tcp-server",level:3},{value:"(Singleton) <code>UDP Server</code>",id:"singleton-udp-server",level:3},{value:"(Singleton) Database <code>ORM</code> Object",id:"singleton-database-orm-object",level:3},{value:"(Singleton) <code>Redis</code> Client Object",id:"singleton-redis-client-object",level:3},{value:"(Singleton) Resource Management Object",id:"singleton-resource-management-object",level:3},{value:"(Singleton) Internationalization Management Object",id:"singleton-internationalization-management-object",level:3}];function d(e){let n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"GoFrame"})," framework encapsulates some commonly used data types and object acquisition methods, which can be obtained through the ",(0,a.jsx)(n.code,{children:"g.*"})," method."]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"g"})," is a highly coupled module aimed at providing convenience to developers when frequently using certain types/objects."]})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'import "github.com/gogf/gf/v2/frame/g"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"data-types",children:"Data Types"}),"\n",(0,a.jsx)(n.p,{children:"Common data type aliases."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"type (\n    Var = gvar.Var        // Var is a universal variable interface, like generics.\n    Ctx = context.Context // Ctx is alias of frequently-used context.Context.\n)\n\ntype (\n    Map        = map[string]interface{}      // Map is alias of frequently-used map type map[string]interface{}.\n    MapAnyAny  = map[interface{}]interface{} // MapAnyAny is alias of frequently-used map type map[interface{}]interface{}.\n    MapAnyStr  = map[interface{}]string      // MapAnyStr is alias of frequently-used map type map[interface{}]string.\n    MapAnyInt  = map[interface{}]int         // MapAnyInt is alias of frequently-used map type map[interface{}]int.\n    MapStrAny  = map[string]interface{}      // MapStrAny is alias of frequently-used map type map[string]interface{}.\n    MapStrStr  = map[string]string           // MapStrStr is alias of frequently-used map type map[string]string.\n    MapStrInt  = map[string]int              // MapStrInt is alias of frequently-used map type map[string]int.\n    MapIntAny  = map[int]interface{}         // MapIntAny is alias of frequently-used map type map[int]interface{}.\n    MapIntStr  = map[int]string              // MapIntStr is alias of frequently-used map type map[int]string.\n    MapIntInt  = map[int]int                 // MapIntInt is alias of frequently-used map type map[int]int.\n    MapAnyBool = map[interface{}]bool        // MapAnyBool is alias of frequently-used map type map[interface{}]bool.\n    MapStrBool = map[string]bool             // MapStrBool is alias of frequently-used map type map[string]bool.\n    MapIntBool = map[int]bool                // MapIntBool is alias of frequently-used map type map[int]bool.\n)\n\ntype (\n    List        = []Map        // List is alias of frequently-used slice type []Map.\n    ListAnyAny  = []MapAnyAny  // ListAnyAny is alias of frequently-used slice type []MapAnyAny.\n    ListAnyStr  = []MapAnyStr  // ListAnyStr is alias of frequently-used slice type []MapAnyStr.\n    ListAnyInt  = []MapAnyInt  // ListAnyInt is alias of frequently-used slice type []MapAnyInt.\n    ListStrAny  = []MapStrAny  // ListStrAny is alias of frequently-used slice type []MapStrAny.\n    ListStrStr  = []MapStrStr  // ListStrStr is alias of frequently-used slice type []MapStrStr.\n    ListStrInt  = []MapStrInt  // ListStrInt is alias of frequently-used slice type []MapStrInt.\n    ListIntAny  = []MapIntAny  // ListIntAny is alias of frequently-used slice type []MapIntAny.\n    ListIntStr  = []MapIntStr  // ListIntStr is alias of frequently-used slice type []MapIntStr.\n    ListIntInt  = []MapIntInt  // ListIntInt is alias of frequently-used slice type []MapIntInt.\n    ListAnyBool = []MapAnyBool // ListAnyBool is alias of frequently-used slice type []MapAnyBool.\n    ListStrBool = []MapStrBool // ListStrBool is alias of frequently-used slice type []MapStrBool.\n    ListIntBool = []MapIntBool // ListIntBool is alias of frequently-used slice type []MapIntBool.\n)\n\ntype (\n    Slice    = []interface{} // Slice is alias of frequently-used slice type []interface{}.\n    SliceAny = []interface{} // SliceAny is alias of frequently-used slice type []interface{}.\n    SliceStr = []string      // SliceStr is alias of frequently-used slice type []string.\n    SliceInt = []int         // SliceInt is alias of frequently-used slice type []int.\n)\n\ntype (\n    Array    = []interface{} // Array is alias of frequently-used slice type []interface{}.\n    ArrayAny = []interface{} // ArrayAny is alias of frequently-used slice type []interface{}.\n    ArrayStr = []string      // ArrayStr is alias of frequently-used slice type []string.\n    ArrayInt = []int         // ArrayInt is alias of frequently-used slice type []int.\n)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"common-objects",children:"Common Objects"}),"\n",(0,a.jsxs)(n.p,{children:["Common objects are often managed through the ",(0,a.jsx)(n.code,{children:"singleton pattern"}),", where specific object instances can be obtained according to different singleton names, and corresponding configuration items in the configuration file will be automatically retrieved during object initialization. For specific configuration items, please refer to the respective object's chapter introduction."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Note: During runtime, every time a singleton object is obtained through the ",(0,a.jsx)(n.code,{children:"g"})," module, there will be an internal global lock mechanism to ensure concurrent safety of operations and data. In theory, there may be lock competition in scenarios with high concurrency, but in most business scenarios, developers do not need to overly worry about the performance loss caused by lock competition. Additionally, developers can also save the obtained singleton objects into internal variables of specific modules for reuse, thereby avoiding runtime lock competition situations."]})}),"\n",(0,a.jsxs)(n.h3,{id:"http-client-object",children:[(0,a.jsx)(n.code,{children:"HTTP"})," Client Object"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Client() *ghttp.Client\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Creates a new ",(0,a.jsx)(n.code,{children:"HTTP"})," client object."]}),"\n",(0,a.jsxs)(n.h3,{id:"validator-object",children:[(0,a.jsx)(n.code,{children:"Validator"})," Object"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Validator() *gvalid.Validator\n"})}),"\n",(0,a.jsx)(n.p,{children:"Creates a new data validation object."}),"\n",(0,a.jsx)(n.h3,{id:"singleton-configuration-management-object",children:"(Singleton) Configuration Management Object"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Cfg(name ...string) *gcfg.Config\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This singleton object will automatically retrieve configuration files based on file extensions ",(0,a.jsx)(n.code,{children:"toml/yaml/yml/json/ini/xml/properties"}),". By default, it will automatically retrieve the following configuration files:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"config"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"config.toml"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"config.yaml"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"config.yml"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"config.json"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"config.ini"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"config.xml"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"config.properties"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"and cache them. The cache will automatically refresh if the configuration files are modified externally."}),"\n",(0,a.jsxs)(n.p,{children:["For convenient calling of configuration files in scenarios with multiple files, to simplify usage and improve development efficiency, the singleton object will automatically use the singleton name for file retrieval at the time of creation. For example: the singleton object retrieved by ",(0,a.jsx)(n.code,{children:'g.Cfg("redis")'})," will, by default, automatically retrieve the following files:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"redis"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"redis.toml"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"redis.yaml"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"redis.yml"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"redis.json"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"redis.ini"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"redis.xml"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"redis.properties"})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["If the retrieval is successful, the file will be loaded into memory cache, and next time it will directly read from memory; if the file does not exist, it will use the default configuration file (",(0,a.jsx)(n.code,{children:"config.toml"}),")."]}),"\n",(0,a.jsx)(n.h3,{id:"singleton-log-management-object",children:"(Singleton) Log Management Object"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Log(name ...string) *glog.Logger\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This singleton object will automatically read the ",(0,a.jsx)(n.code,{children:"logger"})," configuration item from the default configuration file, and only initialize the log object once."]}),"\n",(0,a.jsx)(n.h3,{id:"singleton-template-engine-object",children:"(Singleton) Template Engine Object"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func View(name ...string) *gview.View\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This singleton object will automatically read the ",(0,a.jsx)(n.code,{children:"viewer"})," configuration item from the default configuration file and only initialize the template engine object once. It uses a ",(0,a.jsx)(n.code,{children:"lazy initialization"})," design internally, creating a lightweight template management object when obtaining the template engine object, and only initializing it when parsing template files."]}),"\n",(0,a.jsxs)(n.h3,{id:"singleton-web-server",children:["(Singleton) ",(0,a.jsx)(n.code,{children:"WEB Server"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Server(name ...interface{}) *ghttp.Server\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This singleton object will automatically read the ",(0,a.jsx)(n.code,{children:"server"})," configuration item from the default configuration file and only initialize the ",(0,a.jsx)(n.code,{children:"Server"})," object once."]}),"\n",(0,a.jsxs)(n.h3,{id:"singleton-tcp-server",children:["(Singleton) ",(0,a.jsx)(n.code,{children:"TCP Server"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func TcpServer(name ...interface{}) *gtcp.Server\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"singleton-udp-server",children:["(Singleton) ",(0,a.jsx)(n.code,{children:"UDP Server"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func UdpServer(name ...interface{}) *gudp.Server\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"singleton-database-orm-object",children:["(Singleton) Database ",(0,a.jsx)(n.code,{children:"ORM"})," Object"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func DB(name ...string) *gdb.Db\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This singleton object will automatically read the ",(0,a.jsx)(n.code,{children:"database"})," configuration item from the default configuration file and only initialize the ",(0,a.jsx)(n.code,{children:"DB"})," object once."]}),"\n",(0,a.jsxs)(n.p,{children:["Additionally, the following method can be used to create a ",(0,a.jsx)(n.code,{children:"Model"})," object on the default database:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Model(tables string, db ...string) *gdb.Model\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"singleton-redis-client-object",children:["(Singleton) ",(0,a.jsx)(n.code,{children:"Redis"})," Client Object"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Redis(name ...string) *gredis.Redis\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This singleton object will automatically read the ",(0,a.jsx)(n.code,{children:"redis"})," configuration item from the default configuration file and only initialize the ",(0,a.jsx)(n.code,{children:"Redis"})," object once."]}),"\n",(0,a.jsx)(n.h3,{id:"singleton-resource-management-object",children:"(Singleton) Resource Management Object"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Res(name ...string) *gres.Resource\n"})}),"\n",(0,a.jsx)(n.h3,{id:"singleton-internationalization-management-object",children:"(Singleton) Internationalization Management Object"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func I18n(name ...string) *gi18n.Manager\n"})})]})}function g(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return s},a:function(){return l}});var i=t(667294);let a={},o=i.createContext(a);function l(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);