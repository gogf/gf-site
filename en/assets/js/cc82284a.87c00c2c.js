"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["44175"],{861252:function(e,n,r){r.r(n),r.d(n,{metadata:()=>o,contentTitle:()=>t,default:()=>h,assets:()=>d,toc:()=>l,frontMatter:()=>a});var o=JSON.parse('{"id":"release/\u7248\u672C\u53D1\u5E03\u8BF4\u660E","title":"Version Release Notes","description":"GoFrame framework\'s version release notes, including the GNU-style version naming rules, how to ensure compatibility between versions, and recommended upgrade methods. Additionally, it introduces the usage notes and operation methods of the master and develop branches to ensure developers can efficiently manage and upgrade the framework versions.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/release/\u7248\u672C\u53D1\u5E03\u8BF4\u660E.md","sourceDirName":"release","slug":"/release/note","permalink":"/en/release/note","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/release/\u7248\u672C\u53D1\u5E03\u8BF4\u660E.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1740621099000,"sidebarPosition":-10000,"frontMatter":{"slug":"/release/note","title":"Version Release Notes","sidebar_position":-10000,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","Version Naming Rules","Version Upgrade","Compatibility Guarantee","GNU Style","Major Version","Minor Version","Revision Version","go modules"],"description":"GoFrame framework\'s version release notes, including the GNU-style version naming rules, how to ensure compatibility between versions, and recommended upgrade methods. Additionally, it introduces the usage notes and operation methods of the master and develop branches to ensure developers can efficiently manage and upgrade the framework versions."},"sidebar":"releaseSidebar","next":{"title":"v2.8 2024-11-18","permalink":"/en/release/v2.8"}}'),i=r("785893"),s=r("250065");let a={slug:"/release/note",title:"Version Release Notes",sidebar_position:-1e4,hide_title:!0,keywords:["GoFrame","GoFrame Framework","Version Naming Rules","Version Upgrade","Compatibility Guarantee","GNU Style","Major Version","Minor Version","Revision Version","go modules"],description:"GoFrame framework's version release notes, including the GNU-style version naming rules, how to ensure compatibility between versions, and recommended upgrade methods. Additionally, it introduces the usage notes and operation methods of the master and develop branches to ensure developers can efficiently manage and upgrade the framework versions."},t=void 0,d={},l=[{value:"Version Naming",id:"version-naming",level:2},{value:"Compatibility Guarantee",id:"compatibility-guarantee",level:2},{value:"Version Upgrade Method",id:"version-upgrade-method",level:2},{value:"Using Specific Versions",id:"using-specific-versions",level:2},{value:"<code>master</code> Branch",id:"master-branch",level:3},{value:"<code>develop</code> Branch",id:"develop-branch",level:3}];function c(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"version-naming",children:"Version Naming"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"GoFrame"})," adopts the ",(0,i.jsx)(n.code,{children:"GNU"})," style version naming rule:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"MajorVersion.MinorVersion.Revision"})}),"\n",(0,i.jsx)(n.p,{children:"That is:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"MajorVersion.MinorVersion.Revision"})}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"v0.0.1"}),", ",(0,i.jsx)(n.code,{children:"v1.1.0"}),", ",(0,i.jsx)(n.code,{children:"1.7.1"})]}),"\n",(0,i.jsx)(n.p,{children:"Version explanation:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"MajorVersion"}),": The major version number of ",(0,i.jsx)(n.code,{children:"GoFrame"})," starts from ",(0,i.jsx)(n.code,{children:"0"}),", from ",(0,i.jsx)(n.code,{children:"alpha"})," to ",(0,i.jsx)(n.code,{children:"beta"})," to the current official version. The major version indicates a completely new framework version, such as major refactoring, major feature changes, or significant incompatible changes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"MinorVersion"}),": The minor version number is increased when there are large new feature releases, significant refactoring or module changes, or incompatibility changes. A minor version release comes with a complete change log and is considered a significant release. It usually occurs every few months."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Revision"}),": The revision number typically involves bug fixes, or adding minor features, minor improvements, or module changes. It increases the revision number while ensuring full backward compatibility. Revision releases are made irregularly and frequently."]}),"\n",(0,i.jsxs)(n.li,{children:["When the major version number increases, the minor and revision numbers are reset to ",(0,i.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["When the minor version number increases, the revision number is reset to ",(0,i.jsx)(n.code,{children:"0"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"compatibility-guarantee",children:"Compatibility Guarantee"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"GoFrame"})," promises that every revision release ensures complete backward compatibility for all modules, allowing for easy upgrades."]}),"\n",(0,i.jsxs)(n.p,{children:["Due to the rapid development of the ",(0,i.jsx)(n.code,{children:"GoFrame"})," framework, with constant additions of new features and improvements, minor version releases may not guarantee full backward compatibility for all modules. However, every minor version release will provide a complete change log to announce the release. If there are compatibility adjustments for some modules, they will be accompanied by relevant keynotes and often include upgrade operation guidance."]}),"\n",(0,i.jsx)(n.h2,{id:"version-upgrade-method",children:"Version Upgrade Method"}),"\n",(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.code,{children:"Golang"})," project development, it is not recommended to use the ",(0,i.jsx)(n.code,{children:"vendor"})," method directly, nor is it recommended to use the framework's ",(0,i.jsx)(n.code,{children:"master"})," branch directly. It is recommended to use the ",(0,i.jsx)(n.code,{children:"go modules"})," package management method, that is, to manage package versions using ",(0,i.jsx)(n.code,{children:"go.mod"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Before planning any version upgrade, check the latest version number in the repository: ",(0,i.jsx)(n.a,{href:"https://github.com/gogf/gf/releases",children:"https://github.com/gogf/gf/releases"}),". Choose a version number for upgrading, modify ",(0,i.jsx)(n.code,{children:"go.mod"}),", save it, and the ",(0,i.jsx)(n.code,{children:"Goland IDE"})," will automatically download the corresponding framework version."]}),"\n",(0,i.jsxs)(n.p,{children:["If upgrading to the latest framework version, you can also perform a complete upgrade by executing ",(0,i.jsx)(n.code,{children:"gf up -a"})," in the project's root directory using the ",(0,i.jsx)(n.code,{children:"cli"})," tool."]}),"\n",(0,i.jsx)(n.h2,{id:"using-specific-versions",children:"Using Specific Versions"}),"\n",(0,i.jsxs)(n.h3,{id:"master-branch",children:[(0,i.jsx)(n.code,{children:"master"})," Branch"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"master"})," branch is a public testing branch. All unreleased code is first merged into the ",(0,i.jsx)(n.code,{children:"master"})," branch, and after a certain period of testing, it is tagged for formal release. If some issues are fixed and developers are eager to use the latest version, they can try the ",(0,i.jsx)(n.code,{children:"master"})," branch. The update method is as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"go get -u github.com/gogf/gf@master\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can also update to a specific ",(0,i.jsx)(n.code,{children:"git reversion"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"go get -u github.com/gogf/gf@4d3273379022a9518c1dc20ebada612cddeed764\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"develop-branch",children:[(0,i.jsx)(n.code,{children:"develop"})," Branch"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"develop"})," branch is the development branch. All development feature branches are unified and merged into the ",(0,i.jsx)(n.code,{children:"develop"})," branch for joint testing and debugging. Once confirmed, they are merged into the ",(0,i.jsx)(n.code,{children:"master"})," branch. Note that the ",(0,i.jsx)(n.code,{children:"develop"})," branch cannot be used in a production environment. Contributor PRs are also merged into the ",(0,i.jsx)(n.code,{children:"develop"})," branch. The update method is as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"go get -u github.com/gogf/gf@develop\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can also update to a specific ",(0,i.jsx)(n.code,{children:"git reversion"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"go get -u github.com/gogf/gf@0e58b6e95ba211fcde27954a68cbf4acadbb6bc9\n"})})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return t},a:function(){return a}});var o=r(667294);let i={},s=o.createContext(i);function a(e){let n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);