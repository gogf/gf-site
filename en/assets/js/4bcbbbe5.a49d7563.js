"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["23304"],{547756:function(e,r,n){n.r(r),n.d(r,{metadata:()=>o,contentTitle:()=>c,default:()=>d,assets:()=>l,toc:()=>a,frontMatter:()=>i});var o=JSON.parse('{"id":"course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1/2.4.\u63A7\u5236\u5668","title":"2.4 Controllers","description":"A detailed guide on using GoFrame\'s code generation tools to generate gRPC controllers and implementing various functional interfaces for the user service.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1/2.4.\u63A7\u5236\u5668.md","sourceDirName":"course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1","slug":"/course/proxima-book/user-controller","permalink":"/en/course/proxima-book/user-controller","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1/2.4.\u63A7\u5236\u5668.md","tags":[],"version":"current","lastUpdatedBy":"oldme","lastUpdatedAt":1734398801000,"frontMatter":{"title":"2.4 Controllers","hide_title":true,"slug":"/course/proxima-book/user-controller","keywords":["GoFrame","controller generation","gRPC controller","protobuf generation","microservices controller","service implementation"],"description":"A detailed guide on using GoFrame\'s code generation tools to generate gRPC controllers and implementing various functional interfaces for the user service."},"sidebar":"courseProximaBookSidebar","previous":{"title":"2.3 Protocol Files","permalink":"/en/course/proxima-book/user-protocol"},"next":{"title":"2.5 Service Startup","permalink":"/en/course/proxima-book/user-run"}}'),t=n("785893"),s=n("250065");let i={title:"2.4 Controllers",hide_title:!0,slug:"/course/proxima-book/user-controller",keywords:["GoFrame","controller generation","gRPC controller","protobuf generation","microservices controller","service implementation"],description:"A detailed guide on using GoFrame's code generation tools to generate gRPC controllers and implementing various functional interfaces for the user service."},c=void 0,l={},a=[];function u(e){let r={code:"code",em:"em",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["While HTTP service controllers are generated using ",(0,t.jsx)(r.code,{children:"gf gen ctrl"}),", microservices also have controllers, generated using ",(0,t.jsx)(r.code,{children:"gf gen pb"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"$ gf gen pb\n"})}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"gen pb"})," command requires all dependencies to be properly set up. When executed successfully, it generates several Go files. We only need to focus on the controller files; the framework maintains the rest. The subsequent development process is similar to HTTP services - calling ",(0,t.jsx)(r.code,{children:"logic"})," functions."]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.em,{children:"app/user/internal/controller/account/account.go"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'package account  \n  \nimport (  \n    "context"  \n  \n    "google.golang.org/protobuf/types/known/timestamppb"\n    v1 "proxima/app/user/api/account/v1"\n    "proxima/app/user/api/pbentity"\n    "proxima/app/user/internal/logic/account"  \n    "github.com/gogf/gf/contrib/rpc/grpcx/v2"\n)  \n  \ntype Controller struct {  \n    v1.UnimplementedAccountServer  \n}  \n  \nfunc Register(s *grpcx.GrpcServer) {  \n    v1.RegisterAccountServer(s.Server, &Controller{})  \n}  \n  \nfunc (*Controller) UserRegister(ctx context.Context, req *v1.UserRegisterReq) (res *v1.UserRegisterRes, err error) {  \n    id, err := account.Register(ctx)  \n    if err != nil {  \n       return nil, err  \n    }  \n    return &v1.UserRegisterRes{  \n       Id: int32(id),  \n    }, nil  \n}  \n  \nfunc (*Controller) UserLogin(ctx context.Context, req *v1.UserLoginReq) (res *v1.UserLoginRes, err error) {  \n    token, err := account.Login(ctx)  \n    if err != nil {  \n       return nil, err  \n    }  \n    return &v1.UserLoginRes{  \n       Token: token,  \n    }, nil  \n}  \n  \nfunc (*Controller) UserInfo(ctx context.Context, req *v1.UserInfoReq) (res *v1.UserInfoRes, err error) {  \n    data, err := account.Info(ctx, req.Token)  \n    if err != nil {  \n       return nil, err  \n    }  \n    return &v1.UserInfoRes{  \n       User: &pbentity.Users{  \n          Id:        uint32(data.Id),  \n          Username:  data.Username,  \n          Password:  data.Password,  \n          Email:     data.Email,  \n          CreatedAt: timestamppb.New(data.CreatedAt.Time),  \n          UpdatedAt: timestamppb.New(data.UpdatedAt.Time),  \n       },  \n    }, nil  \n}\n'})})]})}function d(e={}){let{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},250065:function(e,r,n){n.d(r,{Z:function(){return c},a:function(){return i}});var o=n(667294);let t={},s=o.createContext(t);function i(e){let r=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(s.Provider,{value:r},e.children)}}}]);