"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["97021"],{519657:function(e,n,t){t.r(n),t.d(n,{metadata:()=>i,contentTitle:()=>s,default:()=>u,assets:()=>l,toc:()=>d,frontMatter:()=>o});var i=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u7F13\u5B58\u7BA1\u7406/\u7F13\u5B58\u7BA1\u7406","title":"Caching","description":"The gcache module in the GoFrame framework provides unified cache management functions, including in-memory cache adapter implementation. gcache supports custom key data types and stores any data type, using generic objects for type conversion to avoid risks from direct type assertions. Additionally, gcache offers cache expiration settings, making it flexibly suitable for various caching scenarios.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u7F13\u5B58\u7BA1\u7406/\u7F13\u5B58\u7BA1\u7406.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u7F13\u5B58\u7BA1\u7406","slug":"/docs/core/gcache","permalink":"/en/docs/core/gcache","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u7F13\u5B58\u7BA1\u7406/\u7F13\u5B58\u7BA1\u7406.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732716970000,"sidebarPosition":8,"frontMatter":{"slug":"/docs/core/gcache","title":"Caching","sidebar_position":8,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","gcache","cache management","in-memory cache","cache adapter","key-value pair","interface design","data type conversion","adapter interface"],"description":"The gcache module in the GoFrame framework provides unified cache management functions, including in-memory cache adapter implementation. gcache supports custom key data types and stores any data type, using generic objects for type conversion to avoid risks from direct type assertions. Additionally, gcache offers cache expiration settings, making it flexibly suitable for various caching scenarios."},"sidebar":"mainSidebar","previous":{"title":"ORM - FAQ","permalink":"/en/docs/core/gdb-faq"},"next":{"title":"Caching - Interface","permalink":"/en/docs/core/gcache-interface"}}'),r=t("785893"),a=t("250065"),c=t("203105");let o={slug:"/docs/core/gcache",title:"Caching",sidebar_position:8,hide_title:!0,keywords:["GoFrame","GoFrame Framework","gcache","cache management","in-memory cache","cache adapter","key-value pair","interface design","data type conversion","adapter interface"],description:"The gcache module in the GoFrame framework provides unified cache management functions, including in-memory cache adapter implementation. gcache supports custom key data types and stores any data type, using generic objects for type conversion to avoid risks from direct type assertions. Additionally, gcache offers cache expiration settings, making it flexibly suitable for various caching scenarios."},s=void 0,l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Notes",id:"notes",level:2},{value:"About Key Name Data Types",id:"about-key-name-data-types",level:3},{value:"About Retrieving Object Key-Values",id:"about-retrieving-object-key-values",level:3},{value:"Documentation",id:"documentation",level:2}];function h(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"gcache"})," is a module providing unified cache management, offering developers a customizable and flexible cache adapter interface, with a default high-speed in-memory cache adapter implementation."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'import "github.com/gogf/gf/v2/os/gcache"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Interface Documentation:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/os/gcache",children:"https://pkg.go.dev/github.com/gogf/gf/v2/os/gcache"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Brief Introduction:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"gcache"})," provides a default high-speed in-memory cache object, which can be operated by package methods or created using the ",(0,r.jsx)(n.code,{children:"New"})," method. When using cache functions via package methods, operations are on a globally provided ",(0,r.jsx)(n.code,{children:"gcache.Cache"})," object, hence be cautious of global key name collisions in use."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The key type used in ",(0,r.jsx)(n.code,{children:"gcache"})," is ",(0,r.jsx)(n.code,{children:"interface{}"}),", not ",(0,r.jsx)(n.code,{children:"string"}),", meaning any variable type can be used as a key name. However, it is generally recommended to use ",(0,r.jsx)(n.code,{children:"string"})," or ",(0,r.jsx)(n.code,{children:"[]byte"})," as key names and to unify the key name data type for maintenance purposes."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The key-value type stored by ",(0,r.jsx)(n.code,{children:"gcache"})," is ",(0,r.jsx)(n.code,{children:"interface{}"}),", meaning any data type can be stored. When data is retrieved, it is returned as ",(0,r.jsx)(n.code,{children:"interface{}"}),". If conversion to other types is needed, ",(0,r.jsx)(n.code,{children:"gcache"}),"'s ",(0,r.jsx)(n.code,{children:"Get*"})," methods can conveniently obtain common types. Note, if you are sure that in-memory cache is being used, you can directly use assertions for type conversion; otherwise, it is recommended to use the returned generic object's corresponding method for type conversion."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Additionally, note that the cache expiration time parameter ",(0,r.jsx)(n.code,{children:"duration"})," in ",(0,r.jsx)(n.code,{children:"gcache"})," is of type ",(0,r.jsx)(n.code,{children:"time.Duration"}),". When setting a cache variable, ",(0,r.jsx)(n.code,{children:"duration = 0"})," means no expiration, ",(0,r.jsx)(n.code,{children:"duration < 0"})," means immediate expiration, and ",(0,r.jsx)(n.code,{children:"duration > 0"})," means timeout expiration."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,r.jsx)(n.h3,{id:"about-key-name-data-types",children:"About Key Name Data Types"}),"\n",(0,r.jsxs)(n.p,{children:["You may notice that the data types of key-value pairs in the cache component are ",(0,r.jsx)(n.code,{children:"interface{}"}),". This design aims for generality and ease of use, but requires attention to ",(0,r.jsx)(n.code,{children:"interface{}"})," comparison: true matching requires both ",(0,r.jsx)(n.strong,{children:"data"})," and ",(0,r.jsx)(n.strong,{children:"type"})," to be equal. Here's an example."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/os/gcache"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nfunc main() {\n    var (\n        ctx           = gctx.New()\n        key1  int32   = 1\n        key2  float64 = 1\n        value         = `value`\n    )\n    _ = gcache.Set(ctx, key1, value, 0)\n    fmt.Println(gcache.MustGet(ctx, key1).Val())\n    fmt.Println(gcache.MustGet(ctx, key2).Val())\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"After execution, the console outputs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-value",children:"<nil>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["As you can see, although ",(0,r.jsx)(n.code,{children:"key1"})," and ",(0,r.jsx)(n.code,{children:"key2"})," have the same value, their types are different, so ",(0,r.jsx)(n.code,{children:"key2"})," cannot be used to obtain the key-value pair."]}),"\n",(0,r.jsx)(n.h3,{id:"about-retrieving-object-key-values",children:"About Retrieving Object Key-Values"}),"\n",(0,r.jsxs)(n.p,{children:["Since the key-value type is also ",(0,r.jsx)(n.code,{children:"interface{}"}),", it is often converted to the desired data type after retrieval. A common conversion method is direct type assertion, but this carries a risk. The ",(0,r.jsx)(n.code,{children:"gcache"})," component uses an ",(0,r.jsx)(n.strong,{children:"adapter interface design pattern"}),", meaning the implementation (besides the default in-memory adapter) often changes the original data type (non-memory implementations often involve serialization/deserialization storage). Thus, direct type assertion for data type conversion is not recommended."]}),"\n",(0,r.jsxs)(n.p,{children:["To improve key-value retrieval, the cache component does not directly return ",(0,r.jsx)(n.code,{children:"interface{}"})," but a framework generic ",(0,r.jsx)(n.code,{children:"*gvar.Var"})," object, allowing developers to convert to the needed data type based on business scenarios. This is particularly useful for object cache storage and reading scenarios. Here's an example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/os/gcache"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nfunc main() {\n    type User struct {\n        Id   int\n        Name string\n        Site string\n    }\n    var (\n        ctx   = gctx.New()\n        user  *User\n        key   = `UserKey`\n        value = &User{\n            Id:   1,\n            Name: "GoFrame",\n            Site: "https://goframe.org",\n        }\n    )\n    err := gcache.Set(ctx, key, value, 0)\n    if err != nil {\n        panic(err)\n    }\n    v, err := gcache.Get(ctx, key)\n    if err != nil {\n        panic(err)\n    }\n    if err = v.Scan(&user); err != nil {\n        panic(err)\n    }\n    fmt.Printf(`%#v`, user)\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"After execution, the console outputs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'&main.User{Id:1, Name:"GoFrame", Site:"https://goframe.org"}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n","\n",(0,r.jsx)(c.Z,{})]})}function u(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},203105:function(e,n,t){t.d(n,{Z:()=>x});var i=t("785893");t("667294");var r=t("467026"),a=t("96693"),c=t("531183"),o=t("633876"),s=t("266026"),l=t("434751"),d=t("58608");let h={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function u(e){let{href:n,children:t}=e;return(0,i.jsx)(c.Z,{href:n,className:(0,r.Z)("card padding--lg",h.cardContainer),children:t})}function m(e){let{href:n,icon:t,title:a,description:c}=e;return(0,i.jsxs)(u,{href:n,children:[(0,i.jsxs)(d.Z,{as:"h2",className:(0,r.Z)("text--truncate",h.cardTitle),title:a,children:[t," ",a]}),c&&(0,i.jsx)("p",{className:(0,r.Z)("text--truncate",h.cardDescription),title:c,children:c})]})}function g(e){let{item:n}=e,t=(0,a.LM)(n),r=function(){let{selectMessage:e}=(0,o.c)();return n=>e(n,(0,l.I)({message:"1 item|{count} items",id:"theme.docs.DocCard.categoryDescription.plurals",description:"The default description for a category card in the generated index about how many items this category includes"},{count:n}))}();return t?(0,i.jsx)(m,{href:t,icon:"\uD83D\uDDC3\uFE0F",title:n.label,description:n.description??r(n.items.length)}):null}function p(e){let{item:n}=e,t=(0,s.Z)(n.href)?"\uD83D\uDCC4\uFE0F":"\uD83D\uDD17",r=(0,a.xz)(n.docId??void 0);return(0,i.jsx)(m,{href:n.href,icon:t,title:n.label,description:n.description??r?.description})}function f(e){let{item:n}=e;switch(n.type){case"link":return(0,i.jsx)(p,{item:n});case"category":return(0,i.jsx)(g,{item:n});default:throw Error(`unknown item type ${JSON.stringify(n)}`)}}function y(e){let{className:n}=e,t=(0,a.jA)();return(0,i.jsx)(x,{items:t.items,className:n})}function x(e){let{items:n,className:t}=e;if(!n)return(0,i.jsx)(y,{...e});let c=(0,a.MN)(n);return(0,i.jsx)("section",{className:(0,r.Z)("row",t),children:c.map((e,n)=>(0,i.jsx)("article",{className:"col col--6 margin-bottom--lg",children:(0,i.jsx)(f,{item:e})},n))})}},633876:function(e,n,t){t.d(n,{c:function(){return s}});var i=t(667294),r=t(49931);let a=["zero","one","two","few","many","other"];function c(e){return a.filter(n=>e.includes(n))}let o={locale:"en",pluralForms:c(["one","other"]),select:e=>1===e?"one":"other"};function s(){let e=function(){let{i18n:{currentLocale:e}}=(0,r.Z)();return(0,i.useMemo)(()=>{try{return function(e){let n=new Intl.PluralRules(e);return{locale:e,pluralForms:c(n.resolvedOptions().pluralCategories),select:e=>n.select(e)}}(e)}catch(n){return console.error(`Failed to use Intl.PluralRules for locale "${e}".
Docusaurus will fallback to the default (English) implementation.
Error: ${n.message}
`),o}},[e])}();return{selectMessage:(n,t)=>(function(e,n,t){let i=e.split("|");if(1===i.length)return i[0];i.length>t.pluralForms.length&&console.error(`For locale=${t.locale}, a maximum of ${t.pluralForms.length} plural forms are expected (${t.pluralForms.join(",")}), but the message contains ${i.length}: ${e}`);let r=t.select(n);return i[Math.min(t.pluralForms.indexOf(r),i.length-1)]})(t,n,e)}}},250065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return c}});var i=t(667294);let r={},a=i.createContext(r);function c(e){let n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);