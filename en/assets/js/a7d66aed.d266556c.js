"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["80871"],{354818:function(e,n,t){t.r(n),t.d(n,{metadata:()=>r,contentTitle:()=>a,default:()=>h,assets:()=>l,toc:()=>d,frontMatter:()=>s});var r=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u7F51\u7EDC\u7EC4\u4EF6/TCP\u7EC4\u4EF6/TCP\u7EC4\u4EF6","title":"TCP","description":"The gtcp module in the GoFrame framework implements an easy-to-use, lightweight TCPServer. By using gtcp, users can easily create and manage TCP services, supporting high concurrency connections. The documentation provides simple code examples to demonstrate how to create a basic echo server using the gtcp module.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u7F51\u7EDC\u7EC4\u4EF6/TCP\u7EC4\u4EF6/TCP\u7EC4\u4EF6.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u7F51\u7EDC\u7EC4\u4EF6/TCP\u7EC4\u4EF6","slug":"/docs/components/network-gtcp","permalink":"/en/docs/components/network-gtcp","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u7F51\u7EDC\u7EC4\u4EF6/TCP\u7EC4\u4EF6/TCP\u7EC4\u4EF6.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732716970000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/components/network-gtcp","title":"TCP","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","gtcp","TCPServer","Server","Programming","Network Connection","Lightweight","Concurrency","Example"],"description":"The gtcp module in the GoFrame framework implements an easy-to-use, lightweight TCPServer. By using gtcp, users can easily create and manage TCP services, supporting high concurrency connections. The documentation provides simple code examples to demonstrate how to create a basic echo server using the gtcp module."},"sidebar":"mainSidebar","previous":{"title":"Network","permalink":"/en/docs/components/network"},"next":{"title":"TCP - Object","permalink":"/en/docs/components/network-gtcp-conn"}}'),o=t("785893"),c=t("250065"),i=t("203105");let s={slug:"/docs/components/network-gtcp",title:"TCP",sidebar_position:0,hide_title:!0,keywords:["GoFrame","GoFrame Framework","gtcp","TCPServer","Server","Programming","Network Connection","Lightweight","Concurrency","Example"],description:"The gtcp module in the GoFrame framework implements an easy-to-use, lightweight TCPServer. By using gtcp, users can easily create and manage TCP services, supporting high concurrency connections. The documentation provides simple code examples to demonstrate how to create a basic echo server using the gtcp module."},a=void 0,l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Documentation",id:"documentation",level:2}];function u(e){let n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,c.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"gtcp"})," module implements an easy-to-use, lightweight ",(0,o.jsx)(n.code,{children:"TCPServer"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Usage"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'import "github.com/gogf/gf/v2/net/gtcp"\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"API Documentation"}),": ",(0,o.jsx)(n.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/net/gtcp",children:"https://pkg.go.dev/github.com/gogf/gf/v2/net/gtcp"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"type Server\n    func GetServer(name ...interface{}) *Server\n    func NewServer(address string, handler func(*Conn), name ...string) *Server\n    func NewServerKeyCrt(address, crtFile, keyFile string, handler func(*Conn), name ...string) *Server\n    func NewServerTLS(address string, tlsConfig *tls.Config, handler func(*Conn), name ...string) *Server\n    func (s *Server) Close() error\n    func (s *Server) Run() (err error)\n    func (s *Server) SetAddress(address string)\n    func (s *Server) SetHandler(handler func(*Conn))\n    func (s *Server) SetTLSConfig(tlsConfig *tls.Config)\n    func (s *Server) SetTLSKeyCrt(crtFile, keyFile string) error\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Among them, ",(0,o.jsx)(n.code,{children:"GetServer"})," uses a singleton pattern to obtain/create a singleton ",(0,o.jsx)(n.code,{children:"Server"})," with a given unique name, which can be dynamically modified later via ",(0,o.jsx)(n.code,{children:"SetAddress"})," and ",(0,o.jsx)(n.code,{children:"SetHandler"})," methods; ",(0,o.jsx)(n.code,{children:"NewServer"})," directly creates a Server object based on given parameters, and a name can be specified."]}),"\n",(0,o.jsxs)(n.p,{children:["We demonstrate the use of ",(0,o.jsx)(n.code,{children:"TCPServer"})," by implementing a simple ",(0,o.jsx)(n.code,{children:"echo server"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/net/gtcp"\n)\n\nfunc main() {\n    gtcp.NewServer("127.0.0.1:8999", func(conn *gtcp.Conn) {\n        defer conn.Close()\n        for {\n            data, err := conn.Recv(-1)\n            if len(data) > 0 {\n                if err := conn.Send(append([]byte("> "), data...)); err != nil {\n                  fmt.Println(err)\n                }\n            }\n            if err != nil {\n                break\n            }\n        }\n    }).Run()\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In this example, we use ",(0,o.jsx)(n.code,{children:"Send"})," and ",(0,o.jsx)(n.code,{children:"Recv"})," to send and receive data. The ",(0,o.jsx)(n.code,{children:"Recv"}),' method receives data in a blocking way until the client "finishes sending a piece of data" (executes ',(0,o.jsx)(n.code,{children:"Send"})," once, with no buffering implemented in the underlying socket communication), or closes the connection. For more on the connection object ",(0,o.jsx)(n.code,{children:"gtcp.Conn"}),", please continue reading the following sections."]}),"\n",(0,o.jsxs)(n.p,{children:["After execution, we use the ",(0,o.jsx)(n.code,{children:"telnet"})," tool to test:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"john@home:~$ telnet 127.0.0.1 8999\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\nhello\n> hello\nhi there\n> hi there\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For each TCP connection initiated by a client, TCPServer creates a ",(0,o.jsx)(n.code,{children:"goroutine"})," to handle it until the TCP connection is disconnected. Due to the lightweight nature of goroutines, very high levels of concurrency can be supported."]}),"\n",(0,o.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n","\n",(0,o.jsx)(i.Z,{})]})}function h(e={}){let{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},203105:function(e,n,t){t.d(n,{Z:()=>v});var r=t("785893");t("667294");var o=t("467026"),c=t("96693"),i=t("531183"),s=t("633876"),a=t("266026"),l=t("434751"),d=t("58608");let u={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function h(e){let{href:n,children:t}=e;return(0,r.jsx)(i.Z,{href:n,className:(0,o.Z)("card padding--lg",u.cardContainer),children:t})}function g(e){let{href:n,icon:t,title:c,description:i}=e;return(0,r.jsxs)(h,{href:n,children:[(0,r.jsxs)(d.Z,{as:"h2",className:(0,o.Z)("text--truncate",u.cardTitle),title:c,children:[t," ",c]}),i&&(0,r.jsx)("p",{className:(0,o.Z)("text--truncate",u.cardDescription),title:i,children:i})]})}function m(e){let{item:n}=e,t=(0,c.LM)(n),o=function(){let{selectMessage:e}=(0,s.c)();return n=>e(n,(0,l.I)({message:"1 item|{count} items",id:"theme.docs.DocCard.categoryDescription.plurals",description:"The default description for a category card in the generated index about how many items this category includes"},{count:n}))}();return t?(0,r.jsx)(g,{href:t,icon:"\uD83D\uDDC3\uFE0F",title:n.label,description:n.description??o(n.items.length)}):null}function p(e){let{item:n}=e,t=(0,a.Z)(n.href)?"\uD83D\uDCC4\uFE0F":"\uD83D\uDD17",o=(0,c.xz)(n.docId??void 0);return(0,r.jsx)(g,{href:n.href,icon:t,title:n.label,description:n.description??o?.description})}function f(e){let{item:n}=e;switch(n.type){case"link":return(0,r.jsx)(p,{item:n});case"category":return(0,r.jsx)(m,{item:n});default:throw Error(`unknown item type ${JSON.stringify(n)}`)}}function x(e){let{className:n}=e,t=(0,c.jA)();return(0,r.jsx)(v,{items:t.items,className:n})}function v(e){let{items:n,className:t}=e;if(!n)return(0,r.jsx)(x,{...e});let i=(0,c.MN)(n);return(0,r.jsx)("section",{className:(0,o.Z)("row",t),children:i.map((e,n)=>(0,r.jsx)("article",{className:"col col--6 margin-bottom--lg",children:(0,r.jsx)(f,{item:e})},n))})}},633876:function(e,n,t){t.d(n,{c:function(){return a}});var r=t(667294),o=t(49931);let c=["zero","one","two","few","many","other"];function i(e){return c.filter(n=>e.includes(n))}let s={locale:"en",pluralForms:i(["one","other"]),select:e=>1===e?"one":"other"};function a(){let e=function(){let{i18n:{currentLocale:e}}=(0,o.Z)();return(0,r.useMemo)(()=>{try{return function(e){let n=new Intl.PluralRules(e);return{locale:e,pluralForms:i(n.resolvedOptions().pluralCategories),select:e=>n.select(e)}}(e)}catch(n){return console.error(`Failed to use Intl.PluralRules for locale "${e}".
Docusaurus will fallback to the default (English) implementation.
Error: ${n.message}
`),s}},[e])}();return{selectMessage:(n,t)=>(function(e,n,t){let r=e.split("|");if(1===r.length)return r[0];r.length>t.pluralForms.length&&console.error(`For locale=${t.locale}, a maximum of ${t.pluralForms.length} plural forms are expected (${t.pluralForms.join(",")}), but the message contains ${r.length}: ${e}`);let o=t.select(n);return r[Math.min(t.pluralForms.indexOf(o),r.length-1)]})(t,n,e)}}},250065:function(e,n,t){t.d(n,{Z:function(){return s},a:function(){return i}});var r=t(667294);let o={},c=r.createContext(o);function i(e){let n=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);