"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["94068"],{41712:function(e,n,i){i.r(n),i.d(n,{metadata:()=>t,contentTitle:()=>a,default:()=>g,assets:()=>c,toc:()=>l,frontMatter:()=>r});var t=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6A21\u677F\u5F15\u64CE/\u6A21\u677F\u5F15\u64CE-\u6A21\u677F\u914D\u7F6E","title":"Template Engine - Configuration","description":"The view component of the GoFrame framework is one of its cores, supporting convenient configuration management. This article provides a detailed introduction on managing view components through configuration files, including the definitions and examples of configuration items. It also explains how to use the SetConfigWithMap method for specific configuration settings to ensure proper template parsing.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6A21\u677F\u5F15\u64CE/\u6A21\u677F\u5F15\u64CE-\u6A21\u677F\u914D\u7F6E.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6A21\u677F\u5F15\u64CE","slug":"/docs/core/gview-config","permalink":"/en/docs/core/gview-config","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6A21\u677F\u5F15\u64CE/\u6A21\u677F\u5F15\u64CE-\u6A21\u677F\u914D\u7F6E.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732541616000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/core/gview-config","title":"Template Engine - Configuration","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","Template Engine","Configuration Management","View Component","Template Configuration","gview","Template Parsing","XSS Encoding","Singleton Object"],"description":"The view component of the GoFrame framework is one of its cores, supporting convenient configuration management. This article provides a detailed introduction on managing view components through configuration files, including the definitions and examples of configuration items. It also explains how to use the SetConfigWithMap method for specific configuration settings to ensure proper template parsing."},"sidebar":"mainSidebar","previous":{"title":"Template Engine","permalink":"/en/docs/core/gview"},"next":{"title":"Template Engine - Tags","permalink":"/en/docs/core/gview-tags"}}'),o=i("785893"),s=i("250065");let r={slug:"/docs/core/gview-config",title:"Template Engine - Configuration",sidebar_position:0,hide_title:!0,keywords:["GoFrame","GoFrame Framework","Template Engine","Configuration Management","View Component","Template Configuration","gview","Template Parsing","XSS Encoding","Singleton Object"],description:"The view component of the GoFrame framework is one of its cores, supporting convenient configuration management. This article provides a detailed introduction on managing view components through configuration files, including the definitions and examples of configuration items. It also explains how to use the SetConfigWithMap method for specific configuration settings to ensure proper template parsing."},a=void 0,c={},l=[{value:"Configuration Object",id:"configuration-object",level:2},{value:"Configuration File",id:"configuration-file",level:2},{value:"Example 1, Default Configuration Items",id:"example-1-default-configuration-items",level:3},{value:"Example 2, Multiple Configuration Items",id:"example-2-multiple-configuration-items",level:3},{value:"Configuration Methods",id:"configuration-methods",level:3},{value:"<code>SetConfigWithMap</code> Method",id:"setconfigwithmap-method",level:3},{value:"Notes",id:"notes",level:2}];function d(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["The view component is one of the core components of the ",(0,o.jsx)(n.code,{children:"GoFrame"})," framework, and it also supports very convenient configuration management."]}),"\n",(0,o.jsx)(n.h2,{id:"configuration-object",children:"Configuration Object"}),"\n",(0,o.jsxs)(n.p,{children:["Configuration object definition: ",(0,o.jsx)(n.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/os/gview#Config",children:"https://pkg.go.dev/github.com/gogf/gf/v2/os/gview#Config"})]}),"\n",(0,o.jsx)(n.h2,{id:"configuration-file",children:"Configuration File"}),"\n",(0,o.jsxs)(n.p,{children:["The view component supports configuration files. When using ",(0,o.jsx)(n.code,{children:"g.View(singleton name)"})," to get the ",(0,o.jsx)(n.code,{children:"View"})," singleton object, it automatically retrieves the corresponding ",(0,o.jsx)(n.code,{children:"View"})," configuration through the default configuration management object. By default, it reads the ",(0,o.jsx)(n.code,{children:"viewer.singleton name"})," configuration item. If this configuration item does not exist, it reads the ",(0,o.jsx)(n.code,{children:"viewer"})," configuration item."]}),"\n",(0,o.jsx)(n.p,{children:"The complete configuration file items and descriptions are as follows, where configuration item names are case-insensitive:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'[viewer]\n    Paths       = ["/var/www/template"] # Template file search directory path, it is recommended to use absolute paths. Default is the current program\'s working path\n    DefaultFile = "index.html"          # Default template engine file for parsing. Default is "index.html"\n    Delimiters  =  ["${", "}"]          # Template engine variable delimiters. Default is ["{{", "}}"]\n    AutoEncode  = false                 # Whether to perform XSS encoding on variable content by default. Default is false\n    [viewer.Data]                       # Custom global Key-Value pairs, which can be directly used in template parsing\n        Key1 = "Value1"\n        Key2 = "Value2"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"example-1-default-configuration-items",children:"Example 1, Default Configuration Items"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'[viewer]\n    paths       = ["template", "/var/www/template"]\n    defaultFile = "index.html"\n    delimiters  =  ["${", "}"]\n    [viewer.data]\n        name    = "gf"\n        version = "1.10.0"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Then, you can use ",(0,o.jsx)(n.code,{children:"g.View()"})," to automatically get and set this configuration when obtaining the default singleton object."]}),"\n",(0,o.jsx)(n.h3,{id:"example-2-multiple-configuration-items",children:"Example 2, Multiple Configuration Items"}),"\n",(0,o.jsxs)(n.p,{children:["Example of configuration for multiple ",(0,o.jsx)(n.code,{children:"View"})," objects:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'[viewer]\n    paths       = ["template", "/var/www/template"]\n    defaultFile = "index.html"\n    delimiters  =  ["${", "}"]\n    [viewer.data]\n        name    = "gf"\n        version = "1.10.0"\n    [viewer.view1]\n        defaultFile = "layout.html"\n        delimiters  = ["${", "}"]\n    [viewer.view2]\n        defaultFile = "main.html"\n        delimiters  = ["#{", "}"]\n'})}),"\n",(0,o.jsxs)(n.p,{children:["We can obtain the corresponding ",(0,o.jsx)(n.code,{children:"View"})," singleton object configuration through the singleton object name:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// Corresponds to viewer.view1 configuration item\nv1 := g.View("view1")\n// Corresponds to viewer.view2 configuration item\nv2 := g.View("view2")\n// Corresponds to the default configuration item viewer\nv3 := g.View("none")\n// Corresponds to the default configuration item viewer\nv4 := g.View()\n'})}),"\n",(0,o.jsx)(n.h3,{id:"configuration-methods",children:"Configuration Methods"}),"\n",(0,o.jsxs)(n.p,{children:["Method list: ",(0,o.jsx)(n.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/os/gview",children:"https://pkg.go.dev/github.com/gogf/gf/v2/os/gview"})]}),"\n",(0,o.jsx)(n.p,{children:"Brief introduction:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["You can set using ",(0,o.jsx)(n.code,{children:"SetConfig"})," and ",(0,o.jsx)(n.code,{children:"SetConfigWithMap"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["You can also use the ",(0,o.jsx)(n.code,{children:"Set*"})," method of the ",(0,o.jsx)(n.code,{children:"View"})," object for specific configuration settings."]}),"\n",(0,o.jsxs)(n.li,{children:["It is crucial to set the configuration items before the ",(0,o.jsx)(n.code,{children:"View"})," object executes template parsing to avoid concurrency safety issues."]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"setconfigwithmap-method",children:[(0,o.jsx)(n.code,{children:"SetConfigWithMap"})," Method"]}),"\n",(0,o.jsxs)(n.p,{children:["We can use the ",(0,o.jsx)(n.code,{children:"SetConfigWithMap"})," method to set/modify specific configurations of the ",(0,o.jsx)(n.code,{children:"View"})," using ",(0,o.jsx)(n.code,{children:"Key-Value"})," pairs, while the remaining configurations use the default configuration. The ",(0,o.jsx)(n.code,{children:"Key"})," name is the attribute name in the ",(0,o.jsx)(n.code,{children:"Config"})," struct, which is case-insensitive, and it supports using ",(0,o.jsx)(n.code,{children:"-"}),"/ ",(0,o.jsx)(n.code,{children:"_"}),"/ ",(0,o.jsx)(n.code,{children:"space"})," symbols between words. Refer to the ",(0,o.jsx)(n.a,{href:"/en/docs/core/gconv-struct",children:"Type Conversion - Struct"})," section for conversion rules."]}),"\n",(0,o.jsx)(n.p,{children:"Simple example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gview"\n)\n\nfunc main() {\n    view := gview.New()\n    view.SetConfigWithMap(g.Map{\n        "Paths":       []string{"template"},\n        "DefaultFile": "index.html",\n        "Delimiters":  []string{"${", "}"},\n        "Data": g.Map{\n            "name":    "gf",\n            "version": "1.10.0",\n        },\n    })\n    result, err := view.ParseContent(context.TODO(), "hello ${.name}, version: ${.version}")\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(result)\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Here, ",(0,o.jsx)(n.code,{children:"DefaultFile"})," represents the default template file for parsing. The key name can also be ",(0,o.jsx)(n.code,{children:"defaultFile"}),", ",(0,o.jsx)(n.code,{children:"default-File"}),", ",(0,o.jsx)(n.code,{children:"default_file"}),", ",(0,o.jsx)(n.code,{children:"default file"}),", and other configuration properties can be deduced similarly."]}),"\n",(0,o.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,o.jsx)(n.p,{children:"It's common for users to ask, why isn't my template parsing effective? Why does the page directly display the tags I wrote as is?"}),"\n",(0,o.jsxs)(n.p,{children:["At this time, please check whether your configuration file has set the template tags. A common scenario is setting ",(0,o.jsx)(n.code,{children:"delimiters"})," to ",(0,o.jsx)(n.code,{children:'["${", "}"]'}),", but using ",(0,o.jsx)(n.code,{children:'["{{", "}}"]'})," in the template."]})]})}function g(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},250065:function(e,n,i){i.d(n,{Z:function(){return a},a:function(){return r}});var t=i(667294);let o={},s=t.createContext(o);function r(e){let n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);