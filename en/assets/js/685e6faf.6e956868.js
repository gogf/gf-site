"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["64276"],{132774:function(e,n,o){o.r(n),o.d(n,{metadata:()=>t,contentTitle:()=>a,default:()=>p,assets:()=>s,toc:()=>d,frontMatter:()=>c});var t=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u7F51\u7EDC\u7EC4\u4EF6/UDP\u7EC4\u4EF6/UDP\u7EC4\u4EF6-\u8FDE\u63A5\u5BF9\u8C61","title":"UDP - Object","description":"Using the GoFrame framework for UDP component development, specifically the use of the gudp.Conn connection object. The article provides detailed function interface descriptions and a complete example code for client-server communication, helping developers quickly master the specific operations and application scenarios of the UDP connection object.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u7F51\u7EDC\u7EC4\u4EF6/UDP\u7EC4\u4EF6/UDP\u7EC4\u4EF6-\u8FDE\u63A5\u5BF9\u8C61.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u7F51\u7EDC\u7EC4\u4EF6/UDP\u7EC4\u4EF6","slug":"/docs/components/network-gudp-conn","permalink":"/en/docs/components/network-gudp-conn","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u7F51\u7EDC\u7EC4\u4EF6/UDP\u7EC4\u4EF6/UDP\u7EC4\u4EF6-\u8FDE\u63A5\u5BF9\u8C61.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/components/network-gudp-conn","title":"UDP - Object","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","gudp.Conn","UDP Component","UDP Connection","gudp Module","Network Programming","Go Language","Data Communication","Programming Example"],"description":"Using the GoFrame framework for UDP component development, specifically the use of the gudp.Conn connection object. The article provides detailed function interface descriptions and a complete example code for client-server communication, helping developers quickly master the specific operations and application scenarios of the UDP connection object."},"sidebar":"mainSidebar","previous":{"title":"UDP","permalink":"/en/docs/components/network-gudp"},"next":{"title":"UDP - Methods","permalink":"/en/docs/components/network-gudp-funcs"}}'),r=o("785893"),i=o("250065");let c={slug:"/docs/components/network-gudp-conn",title:"UDP - Object",sidebar_position:0,hide_title:!0,keywords:["GoFrame","GoFrame Framework","gudp.Conn","UDP Component","UDP Connection","gudp Module","Network Programming","Go Language","Data Communication","Programming Example"],description:"Using the GoFrame framework for UDP component development, specifically the use of the gudp.Conn connection object. The article provides detailed function interface descriptions and a complete example code for client-server communication, helping developers quickly master the specific operations and application scenarios of the UDP connection object."},a=void 0,s={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Usage Example",id:"usage-example",level:2}];function l(e){let n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"gudp"})," module provides a very simple and easy-to-use ",(0,r.jsx)(n.code,{children:"gudp.Conn"})," link operation object."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'import "github.com/gogf/gf/v2/net/gudp"\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"API Documentation:"})," ",(0,r.jsx)(n.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/net/gudp",children:"https://pkg.go.dev/github.com/gogf/gf/v2/net/gudp"})]}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["Most of the operations of ",(0,r.jsx)(n.code,{children:"gudp.Conn"})," are similar to the operation mode of ",(0,r.jsx)(n.code,{children:"gtcp"})," (most of the method names are the same), but since ",(0,r.jsx)(n.code,{children:"UDP"})," is a connectionless protocol, ",(0,r.jsx)(n.code,{children:"gudp.Conn"})," (underlying communication port) can only complete up to one data write and read at a time. The client will need to create a new ",(0,r.jsx)(n.code,{children:"Conn"})," object for communication the next time it communicates with the target server."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "fmt"\n    "time"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/gudp"\n    "github.com/gogf/gf/v2/os/gtime"\n)\n\nfunc main() {\n    var (\n        ctx    = context.Background()\n        logger = g.Log()\n    )\n    // Server\n    go gudp.NewServer("127.0.0.1:8999", func(conn *gudp.ServerConn) {\n        defer conn.Close()\n        for {\n            data, addr, err := conn.Recv(-1)\n            if len(data) > 0 {\n                if err = conn.Send(append([]byte("> "), data...), addr); err != nil {\n                    logger.Error(ctx, err)\n                }\n            }\n            if err != nil {\n                logger.Error(ctx, err)\n            }\n        }\n    }).Run()\n\n    time.Sleep(time.Second)\n\n    // Client\n    for {\n        if conn, err := gudp.NewClientConn("127.0.0.1:8999"); err == nil {\n            if b, err := conn.SendRecv([]byte(gtime.Datetime()), -1); err == nil {\n                fmt.Println(string(b), conn.LocalAddr(), conn.RemoteAddr())\n            } else {\n                logger.Error(ctx, err)\n            }\n            conn.Close()\n        } else {\n            logger.Error(ctx, err)\n        }\n        time.Sleep(time.Second)\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This example is similar to the communication example in ",(0,r.jsx)(n.code,{children:"gtcp.Conn"}),", with the difference that the client and server cannot maintain a connection, requiring a new connection object for each communication."]}),"\n",(0,r.jsx)(n.p,{children:"After execution, the output is as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"> 2018-07-21 23:13:31 127.0.0.1:33271 127.0.0.1:8999\n> 2018-07-21 23:13:32 127.0.0.1:45826 127.0.0.1:8999\n> 2018-07-21 23:13:33 127.0.0.1:58027 127.0.0.1:8999\n> 2018-07-21 23:13:34 127.0.0.1:33056 127.0.0.1:8999\n> 2018-07-21 23:13:35 127.0.0.1:39260 127.0.0.1:8999\n> 2018-07-21 23:13:36 127.0.0.1:33967 127.0.0.1:8999\n> 2018-07-21 23:13:37 127.0.0.1:52359 127.0.0.1:8999\n...\n"})})]})}function p(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},250065:function(e,n,o){o.d(n,{Z:function(){return a},a:function(){return c}});var t=o(667294);let r={},i=t.createContext(r);function c(e){let n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);