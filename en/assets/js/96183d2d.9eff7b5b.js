"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["70850"],{546175:function(e,d,t){t.r(d),t.d(d,{metadata:()=>s,contentTitle:()=>c,default:()=>x,assets:()=>o,toc:()=>l,frontMatter:()=>i});var s=JSON.parse('{"id":"docs/\u5176\u4ED6\u8D44\u6599/\u683C\u5F0F\u5316\u6253\u5370\u5360\u4F4D\u7B26","title":"Printing Placeholder Format","description":"How to use the printf series of functions with placeholders in GoFrame framework for formatted printing according to data types, including general placeholders, booleans, integers, floats, strings, pointers, etc., to help developers code more efficiently in Go and achieve formatted output.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u5176\u4ED6\u8D44\u6599/\u683C\u5F0F\u5316\u6253\u5370\u5360\u4F4D\u7B26.md","sourceDirName":"docs/\u5176\u4ED6\u8D44\u6599","slug":"/docs/other/printing-format","permalink":"/en/docs/other/printing-format","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u5176\u4ED6\u8D44\u6599/\u683C\u5F0F\u5316\u6253\u5370\u5360\u4F4D\u7B26.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732455643000,"sidebarPosition":6,"frontMatter":{"slug":"/docs/other/printing-format","title":"Printing Placeholder Format","sidebar_position":6,"hide_title":true,"keywords":["GoFrame","GoFrame framework","formatted printing","printf","placeholder","data type","Go syntax","boolean","integer","float"],"description":"How to use the printf series of functions with placeholders in GoFrame framework for formatted printing according to data types, including general placeholders, booleans, integers, floats, strings, pointers, etc., to help developers code more efficiently in Go and achieve formatted output."},"sidebar":"mainSidebar","previous":{"title":"Happily Upgrade from v1 to v2","permalink":"/en/docs/other/happy-upgrading-from-v1-to-v2"},"next":{"title":"Appendix: System Signals List","permalink":"/en/docs/other/system-signals"}}'),r=t("785893"),n=t("250065");let i={slug:"/docs/other/printing-format",title:"Printing Placeholder Format",sidebar_position:6,hide_title:!0,keywords:["GoFrame","GoFrame framework","formatted printing","printf","placeholder","data type","Go syntax","boolean","integer","float"],description:"How to use the printf series of functions with placeholders in GoFrame framework for formatted printing according to data types, including general placeholders, booleans, integers, floats, strings, pointers, etc., to help developers code more efficiently in Go and achieve formatted output."},c=void 0,o={},l=[{value:"Placeholder List",id:"placeholder-list",level:2},{value:"References",id:"references",level:2}];function h(e){let d={a:"a",code:"code",h2:"h2",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(d.p,{children:[(0,r.jsx)(d.code,{children:"*printf"})," series functions support ",(0,r.jsx)(d.code,{children:"format"})," formatting parameters. Here, we categorize according to the data type of the variables replaced in the placeholders for easy lookup and memorization."]}),"\n",(0,r.jsx)(d.h2,{id:"placeholder-list",children:"Placeholder List"}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{children:"Category"}),(0,r.jsx)(d.th,{children:"Placeholder"}),(0,r.jsx)(d.th,{children:"Description"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.strong,{children:"General Placeholder"})}),(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%v"})}),(0,r.jsx)(d.td,{children:"Default format representation of the value"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%+v"})}),(0,r.jsxs)(d.td,{children:["Similar to ",(0,r.jsx)(d.code,{children:"%v"}),", but adds field names when printing structs"]}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%#v"})}),(0,r.jsx)(d.td,{children:"Go-syntax representation of the value"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%T"})}),(0,r.jsx)(d.td,{children:"Print the type of the value"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%%"})}),(0,r.jsx)(d.td,{children:"Percent sign"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.strong,{children:"Boolean"})}),(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%t"})}),(0,r.jsxs)(d.td,{children:[(0,r.jsx)(d.code,{children:"true"})," or ",(0,r.jsx)(d.code,{children:"false"})]})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.strong,{children:"Integer"})}),(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%b"})}),(0,r.jsx)(d.td,{children:"Represented in binary"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%c"})}),(0,r.jsx)(d.td,{children:"The Unicode code point for the value"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%d"})}),(0,r.jsx)(d.td,{children:"Represented in decimal"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%o"})}),(0,r.jsx)(d.td,{children:"Represented in octal"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%x"})}),(0,r.jsxs)(d.td,{children:["Represented in hexadecimal (using ",(0,r.jsx)(d.code,{children:"a-f"}),")"]}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%X"})}),(0,r.jsxs)(d.td,{children:["Represented in hexadecimal (using ",(0,r.jsx)(d.code,{children:"A-F"}),")"]}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%U"})}),(0,r.jsxs)(d.td,{children:["Represented in Unicode format: ",(0,r.jsx)(d.code,{children:"U+1234"}),", equivalent to ",(0,r.jsx)(d.code,{children:"U+%04X"})]}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%q"})}),(0,r.jsx)(d.td,{children:"Quoted Go-syntax character literal of the value, with possible escapes for safety"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.strong,{children:"Floating Point and Complex"})}),(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%b"})}),(0,r.jsxs)(d.td,{children:["Scientific notation with binary exponent, e.g.: ",(0,r.jsx)(d.code,{children:"-123456p-78"})]})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%e"})}),(0,r.jsxs)(d.td,{children:["Scientific notation, e.g.: ",(0,r.jsx)(d.code,{children:"-1234.456e+78"})]}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%E"})}),(0,r.jsxs)(d.td,{children:["Scientific notation, e.g.: ",(0,r.jsx)(d.code,{children:"-1234.456E+78"})]}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%f"})}),(0,r.jsxs)(d.td,{children:["Decimal point but no exponent, e.g.: ",(0,r.jsx)(d.code,{children:"123.456"})]}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%F"})}),(0,r.jsxs)(d.td,{children:["Equivalent to ",(0,r.jsx)(d.code,{children:"%f"})]}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%g"})}),(0,r.jsxs)(d.td,{children:["Uses ",(0,r.jsx)(d.code,{children:"%e"})," or ",(0,r.jsx)(d.code,{children:"%f"})," format depending on the situation for more concise and accurate output"]}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%G"})}),(0,r.jsxs)(d.td,{children:["Uses ",(0,r.jsx)(d.code,{children:"%E"})," or ",(0,r.jsx)(d.code,{children:"%F"})," format depending on the situation for more concise and accurate output"]}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.strong,{children:"String and []byte"})}),(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%s"})}),(0,r.jsxs)(d.td,{children:["Directly outputs the string or ",(0,r.jsx)(d.code,{children:"[]byte"})]})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%q"})}),(0,r.jsx)(d.td,{children:"Double-quoted Go-syntax string literal, with possible escapes for safety"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%x"})}),(0,r.jsxs)(d.td,{children:["Represented in two-character hexadecimal for each byte (using ",(0,r.jsx)(d.code,{children:"a-f"}),")"]}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%X"})}),(0,r.jsxs)(d.td,{children:["Represented in two-character hexadecimal for each byte (using ",(0,r.jsx)(d.code,{children:"A-F"}),")"]}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.strong,{children:"Pointer"})}),(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%p"})}),(0,r.jsxs)(d.td,{children:["Hexadecimal representation with ",(0,r.jsx)(d.code,{children:"0x"})," prefix"]})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.strong,{children:"Width Specifier"})}),(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%f"})}),(0,r.jsx)(d.td,{children:"Default width, default precision"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%9f"})}),(0,r.jsx)(d.td,{children:"Width 9, default precision"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%.2f"})}),(0,r.jsx)(d.td,{children:"Default width, precision 2"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%9.2f"})}),(0,r.jsx)(d.td,{children:"Width 9, precision 2"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"%9.f"})}),(0,r.jsx)(d.td,{children:"Width 9, precision 0"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.strong,{children:"Placeholder Modifiers"})}),(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"+"})}),(0,r.jsxs)(d.td,{children:["Always show sign for numeric values; for ",(0,r.jsx)(d.code,{children:"%q"})," (",(0,r.jsx)(d.code,{children:"%+q"}),") generates ASCII-only output (with escapes)"]})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"\xa0"})}),(0,r.jsxs)(d.td,{children:["Space, prefixes positive numbers with a space and negative numbers with a sign; for ",(0,r.jsx)(d.code,{children:"%x"})," or ",(0,r.jsx)(d.code,{children:"%X"})," (",(0,r.jsx)(d.code,{children:"% x"})," or ",(0,r.jsx)(d.code,{children:"% X"}),"), inserts spaces between printed bytes"]}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"-"})}),(0,r.jsx)(d.td,{children:"Pads the right instead of the default left (right-align to left-align switch)"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"#"})}),(0,r.jsxs)(d.td,{children:["Prefixes octal with ",(0,r.jsx)(d.code,{children:"0"})," (",(0,r.jsx)(d.code,{children:"%#o"}),"), hexadecimal with ",(0,r.jsx)(d.code,{children:"0x"})," (",(0,r.jsx)(d.code,{children:"%#x"}),") or ",(0,r.jsx)(d.code,{children:"0X"})," (",(0,r.jsx)(d.code,{children:"%#X"}),"), strips ",(0,r.jsx)(d.code,{children:"0x"})," for pointers (",(0,r.jsx)(d.code,{children:"%#p"}),"); for ",(0,r.jsx)(d.code,{children:"%q"})," (",(0,r.jsx)(d.code,{children:"%#q"}),") and ",(0,r.jsx)(d.code,{children:"%U"})," (",(0,r.jsx)(d.code,{children:"%#U"}),"), outputs Go literal with quotes and spaces"]}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:(0,r.jsx)(d.code,{children:"0"})}),(0,r.jsxs)(d.td,{children:["Pads with ",(0,r.jsx)(d.code,{children:"0"})," instead of spaces, placed after sign for numeric types"]}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{}),(0,r.jsx)(d.td,{}),(0,r.jsx)(d.td,{})]})]})]}),"\n",(0,r.jsx)(d.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(d.ul,{children:["\n",(0,r.jsx)(d.li,{children:(0,r.jsx)(d.a,{href:"https://pkg.go.dev/fmt",children:"https://pkg.go.dev/fmt"})}),"\n",(0,r.jsx)(d.li,{children:(0,r.jsx)(d.a,{href:"https://www.liwenzhou.com/posts/Go/go_fmt/",children:"https://www.liwenzhou.com/posts/Go/go_fmt/"})}),"\n"]})]})}function x(e={}){let{wrapper:d}={...(0,n.a)(),...e.components};return d?(0,r.jsx)(d,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},250065:function(e,d,t){t.d(d,{Z:function(){return c},a:function(){return i}});var s=t(667294);let r={},n=s.createContext(r);function i(e){let d=s.useContext(n);return s.useMemo(function(){return"function"==typeof e?e(d):{...d,...e}},[d,e])}function c(e){let d;return d=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(n.Provider,{value:d},e.children)}}}]);