"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["48148"],{273504:function(e,t,r){r.r(t),r.d(t,{metadata:()=>n,contentTitle:()=>c,default:()=>h,assets:()=>g,toc:()=>a,frontMatter:()=>s});var n=JSON.parse('{"id":"docs/WEB\u670D\u52A1\u5F00\u53D1/\u5F02\u5E38\u5904\u7406","title":"Exception Handling","description":"The strategy for handling HTTP request exceptions in the GoFrame framework. When an exception occurs during a request, GoFrame automatically captures the panic to prevent process crashes and logs it to a file. Developers can customize middleware for exception capture and handling, obtaining detailed exception stack information to better pinpoint issues. This article provides multiple code examples to help readers understand the correct usage of exception handling.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/WEB\u670D\u52A1\u5F00\u53D1/\u5F02\u5E38\u5904\u7406.md","sourceDirName":"docs/WEB\u670D\u52A1\u5F00\u53D1","slug":"/docs/web/panic-handling","permalink":"/en/docs/web/panic-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/WEB\u670D\u52A1\u5F00\u53D1/\u5F02\u5E38\u5904\u7406.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732541616000,"sidebarPosition":8,"frontMatter":{"slug":"/docs/web/panic-handling","title":"Exception Handling","sidebar_position":8,"hide_title":true,"keywords":["Exception Handling","GoFrame","WebServer","HTTP Request","Panic Capture","Logging","Middleware","Error Stack","Error Handling","gerror"],"description":"The strategy for handling HTTP request exceptions in the GoFrame framework. When an exception occurs during a request, GoFrame automatically captures the panic to prevent process crashes and logs it to a file. Developers can customize middleware for exception capture and handling, obtaining detailed exception stack information to better pinpoint issues. This article provides multiple code examples to help readers understand the correct usage of exception handling."},"sidebar":"mainSidebar","previous":{"title":"Session - Storage Interface","permalink":"/en/docs/web/session-storage"},"next":{"title":"HTTPClient","permalink":"/en/docs/web/http-client"}}'),o=r("785893"),i=r("250065");let s={slug:"/docs/web/panic-handling",title:"Exception Handling",sidebar_position:8,hide_title:!0,keywords:["Exception Handling","GoFrame","WebServer","HTTP Request","Panic Capture","Logging","Middleware","Error Stack","Error Handling","gerror"],description:"The strategy for handling HTTP request exceptions in the GoFrame framework. When an exception occurs during a request, GoFrame automatically captures the panic to prevent process crashes and logs it to a file. Developers can customize middleware for exception capture and handling, obtaining detailed exception stack information to better pinpoint issues. This article provides multiple code examples to help readers understand the correct usage of exception handling."},c=void 0,g={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Retrieving Exception Errors",id:"retrieving-exception-errors",level:2},{value:"Relevant Methods",id:"relevant-methods",level:3},{value:"Usage Example",id:"usage-example",level:3},{value:"Retrieving Exception Stacks",id:"retrieving-exception-stacks",level:2},{value:"Exception Stack Information",id:"exception-stack-information",level:3},{value:"Error Stack Information",id:"error-stack-information",level:3}];function l(e){let t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"As this question is frequently asked, here is a dedicated section for you."}),"\n",(0,o.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(t.p,{children:["Most third-party ",(0,o.jsx)(t.code,{children:"WebServer"})," libraries for ",(0,o.jsx)(t.code,{children:"Golang"})," do not have default mechanisms to capture exceptions arising during the ",(0,o.jsx)(t.code,{children:"HTTP"})," request handling process. Minor errors may not be recorded in logs, leading to difficulty in troubleshooting, while severe exceptions can cause the process to crash, rendering the service unavailable."]}),"\n",(0,o.jsxs)(t.p,{children:["If you choose ",(0,o.jsx)(t.code,{children:"goframe"}),", you are in luck. As an enterprise-level foundational development framework, ",(0,o.jsx)(t.code,{children:"panic"})," incidents occurring during execution are automatically captured by the ",(0,o.jsx)(t.code,{children:"Server"})," by default. When a ",(0,o.jsx)(t.code,{children:"panic"})," occurs, the current execution flow is immediately halted, but it will never cause a direct process crash."]}),"\n",(0,o.jsx)(t.h2,{id:"retrieving-exception-errors",children:"Retrieving Exception Errors"}),"\n",(0,o.jsxs)(t.p,{children:["When a ",(0,o.jsx)(t.code,{children:"panic"})," occurs during the ",(0,o.jsx)(t.code,{children:"HTTP"})," execution process, it is logged to the ",(0,o.jsx)(t.code,{children:"Server"})," log file by default. Developers can also manually capture it by registering middleware and customize related error handling. This operation is also explained in the examples of the middleware section, and we will elaborate on it here."]}),"\n",(0,o.jsx)(t.h3,{id:"relevant-methods",children:"Relevant Methods"}),"\n",(0,o.jsxs)(t.p,{children:["Exceptions are captured using the ",(0,o.jsx)(t.code,{children:"GetError"})," method in the ",(0,o.jsx)(t.code,{children:"Request"})," object."]}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["Developers cannot capture exceptions using the ",(0,o.jsx)(t.code,{children:"recover"})," method because the ",(0,o.jsx)(t.code,{children:"Server"})," in the ",(0,o.jsx)(t.code,{children:"goframe"})," framework has already done so. To ensure exceptions do not crash the process by default, they are not re-thrown upwards."]})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:"// GetError returns the error that occurs during the request procedure.\n// It returns nil if there's no error.\nfunc (r *Request) GetError() error\n"})}),"\n",(0,o.jsxs)(t.p,{children:["This method is often used in flow control components, such as post-middleware or ",(0,o.jsx)(t.code,{children:"HOOK"})," hook methods."]}),"\n",(0,o.jsx)(t.h3,{id:"usage-example",children:"Usage Example"}),"\n",(0,o.jsx)(t.p,{children:"Here, we use a global post-middleware to capture exceptions. When an exception occurs, it is captured and written to a designated log file, and a fixed friendly message is returned to avoid exposing sensitive error information to the client."}),"\n",(0,o.jsxs)(t.admonition,{type:"tip",children:[(0,o.jsx)(t.p,{children:"Please note:"}),(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Even if developers capture and log exceptions themselves, the ",(0,o.jsx)(t.code,{children:"Server"})," will still print them to its own error log file. Logs outputted by API methods are business logs (related to the business), while self-managed logs by the ",(0,o.jsx)(t.code,{children:"Server"})," are service logs (similar to ",(0,o.jsx)(t.code,{children:"nginx"}),"'s ",(0,o.jsx)(t.code,{children:"error.log"}),")."]}),"\n",(0,o.jsxs)(t.li,{children:["Since most low-level errors in the ",(0,o.jsx)(t.code,{children:"goframe"})," framework include stack information of the error, if you are interested in specific stack information (call chain, error file path, source code line number, etc.), you can use ",(0,o.jsx)(t.code,{children:"gerror"})," to retrieve it. For details, please refer to the section ",(0,o.jsx)(t.a,{href:"/en/docs/core/gerror-stack",children:"Error Handling - Stack"}),". If the exception includes stack information, it is printed by default to the ",(0,o.jsx)(t.code,{children:"Server"}),"'s ",(0,o.jsx)(t.code,{children:"error"})," log file."]}),"\n"]})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\nfunc MiddlewareErrorHandler(r *ghttp.Request) {\n    r.Middleware.Next()\n    if err := r.GetError(); err != nil {\n        // Log to a custom error log file\n        g.Log("exception").Error(err)\n        // Return a fixed friendly message\n        r.Response.ClearBuffer()\n        r.Response.Writeln("The server is having a hiccup. Please try again later!")\n    }\n}\n\nfunc main() {\n    s := g.Server()\n    s.Use(MiddlewareErrorHandler)\n    s.Group("/api.v2", func(group *ghttp.RouterGroup) {\n        group.ALL("/user/list", func(r *ghttp.Request) {\n            panic("db error: sql is xxxxxxx")\n        })\n    })\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["After execution, let's give it a try with the ",(0,o.jsx)(t.code,{children:"curl"})," tool:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'$ curl -v "http://127.0.0.1:8199/api.v2/user/list"\n> GET /api.v2/user/list HTTP/1.1\n> Host: 127.0.0.1:8199\n> User-Agent: curl/7.61.1\n> Accept: */*\n>\n< HTTP/1.1 500 Internal Server Error\n< Server: GoFrame HTTP Server\n< Date: Sun, 19 Jul 2020 07:44:30 GMT\n< Content-Length: 52\n< Content-Type: text/plain; charset=utf-8\n<\nThe server is having a hiccup. Please try again later!\n'})}),"\n",(0,o.jsx)(t.h2,{id:"retrieving-exception-stacks",children:"Retrieving Exception Stacks"}),"\n",(0,o.jsx)(t.h3,{id:"exception-stack-information",children:"Exception Stack Information"}),"\n",(0,o.jsxs)(t.p,{children:["When the ",(0,o.jsx)(t.code,{children:"WebServer"})," itself captures an exception, if the thrown exception information does not include stack content, the ",(0,o.jsx)(t.code,{children:"WebServer"})," will automatically capture the stack of the point where the exception occurred (the ",(0,o.jsx)(t.code,{children:"panic"})," location) and create a new error object containing that stack information. Let's look at an example."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\nfunc MiddlewareErrorHandler(r *ghttp.Request) {\n    r.Middleware.Next()\n    if err := r.GetError(); err != nil {\n        r.Response.ClearBuffer()\n        r.Response.Writef("%+v", err)\n    }\n}\n\nfunc main() {\n    s := g.Server()\n    s.Use(MiddlewareErrorHandler)\n    s.Group("/api.v2", func(group *ghttp.RouterGroup) {\n        group.ALL("/user/list", func(r *ghttp.Request) {\n            panic("db error: sql is xxxxxxx")\n        })\n    })\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["You can see that we use the ",(0,o.jsx)(t.code,{children:"%+v"})," formatted print to retrieve the stack information from the exception error; for the specific principle, please refer to the chapter: ",(0,o.jsx)(t.a,{href:"/en/docs/core/gerror-stack",children:"Error Handling - Stack"}),". After execution, we will test it with the ",(0,o.jsx)(t.code,{children:"curl"})," tool:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'$ curl "http://127.0.0.1:8199/api.v2/user/list"\ndb error: sql is xxxxxxx\n1. db error: sql is xxxxxxx\n   1).  main.main.func1.1\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/.example/other/test.go:25\n   2).  github.com/gogf/gf/v2/net/ghttp.(*middleware).Next.func1.8\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:111\n   3).  github.com/gogf/gf/v2/net/ghttp.niceCallFunc\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_func.go:46\n   4).  github.com/gogf/gf/v2/net/ghttp.(*middleware).Next.func1\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:110\n   5).  github.com/gogf/gf/v2/util/gutil.TryCatch\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/util/gutil/gutil.go:46\n   6).  github.com/gogf/gf/v2/net/ghttp.(*middleware).Next\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:47\n   7).  main.MiddlewareErrorHandler\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/.example/other/test.go:10\n   8).  github.com/gogf/gf/v2/net/ghttp.(*middleware).Next.func1.9\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:117\n   9).  github.com/gogf/gf/v2/net/ghttp.niceCallFunc\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_func.go:46\n   10). github.com/gogf/gf/v2/net/ghttp.(*middleware).Next.func1\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:116\n   11). github.com/gogf/gf/v2/util/gutil.TryCatch\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/util/gutil/gutil.go:46\n   12). github.com/gogf/gf/v2/net/ghttp.(*middleware).Next\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:47\n   13). github.com/gogf/gf/v2/net/ghttp.(*Server).ServeHTTP\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_server_handler.go:122\n'})}),"\n",(0,o.jsx)(t.h3,{id:"error-stack-information",children:"Error Stack Information"}),"\n",(0,o.jsxs)(t.p,{children:["If the thrown exception is an error object created via the ",(0,o.jsx)(t.code,{children:"gerror"})," component, or an error object implementing the stack print API, since the error object already contains complete stack information, the ",(0,o.jsx)(t.code,{children:"WebServer"})," will directly return that error object and not automatically create a new error object. Let's look at an example."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/errors/gerror"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\nfunc MiddlewareErrorHandler(r *ghttp.Request) {\n    r.Middleware.Next()\n    if err := r.GetError(); err != nil {\n        r.Response.ClearBuffer()\n        r.Response.Writef("%+v", err)\n    }\n}\n\nfunc DbOperation() error {\n    // ...\n    return gerror.New("DbOperation error: sql is xxxxxxx")\n}\n\nfunc UpdateData() {\n    err := DbOperation()\n    if err != nil {\n        panic(gerror.Wrap(err, "UpdateData error"))\n    }\n}\n\nfunc main() {\n    s := g.Server()\n    s.Use(MiddlewareErrorHandler)\n    s.Group("/api.v2", func(group *ghttp.RouterGroup) {\n        group.ALL("/user/list", func(r *ghttp.Request) {\n            UpdateData()\n        })\n    })\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["After execution, we will test it with the ",(0,o.jsx)(t.code,{children:"curl"})," tool:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'$ curl "http://127.0.0.1:8199/api.v2/user/list"\nUpdateData error: DbOperation error: sql is xxxxxxx\n1. UpdateData error\n   1).  main.UpdateData\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/.example/other/test.go:25\n   2).  main.main.func1.1\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/.example/other/test.go:34\n   3).  github.com/gogf/gf/v2/net/ghttp.(*middleware).Next.func1.8\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:111\n   4).  github.com/gogf/gf/v2/net/ghttp.niceCallFunc\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_func.go:46\n   5).  github.com/gogf/gf/v2/net/ghttp.(*middleware).Next.func1\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:110\n   6).  github.com/gogf/gf/v2/util/gutil.TryCatch\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/util/gutil/gutil.go:46\n   7).  github.com/gogf/gf/v2/net/ghttp.(*middleware).Next\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:47\n   8).  main.MiddlewareErrorHandler\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/.example/other/test.go:10\n   9).  github.com/gogf/gf/v2/net/ghttp.(*middleware).Next.func1.9\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:117\n   10). github.com/gogf/gf/v2/net/ghttp.niceCallFunc\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_func.go:46\n   11). github.com/gogf/gf/v2/net/ghttp.(*middleware).Next.func1\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:116\n   12). github.com/gogf/gf/v2/util/gutil.TryCatch\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/util/gutil/gutil.go:46\n   13). github.com/gogf/gf/v2/net/ghttp.(*middleware).Next\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:47\n   14). github.com/gogf/gf/v2/net/ghttp.(*Server).ServeHTTP\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_server_handler.go:122\n2. DbOperation error: sql is xxxxxxx\n   1).  main.DbOperation\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/.example/other/test.go:19\n   2).  main.UpdateData\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/.example/other/test.go:23\n   3).  main.main.func1.1\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/.example/other/test.go:34\n   4).  github.com/gogf/gf/v2/net/ghttp.(*middleware).Next.func1.8\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:111\n   5).  github.com/gogf/gf/v2/net/ghttp.niceCallFunc\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_func.go:46\n   6).  github.com/gogf/gf/v2/net/ghttp.(*middleware).Next.func1\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:110\n   7).  github.com/gogf/gf/v2/util/gutil.TryCatch\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/util/gutil/gutil.go:46\n   8).  github.com/gogf/gf/v2/net/ghttp.(*middleware).Next\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:47\n   9).  main.MiddlewareErrorHandler\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/.example/other/test.go:10\n   10). github.com/gogf/gf/v2/net/ghttp.(*middleware).Next.func1.9\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:117\n   11). github.com/gogf/gf/v2/net/ghttp.niceCallFunc\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_func.go:46\n   12). github.com/gogf/gf/v2/net/ghttp.(*middleware).Next.func1\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:116\n   13). github.com/gogf/gf/v2/util/gutil.TryCatch\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/util/gutil/gutil.go:46\n   14). github.com/gogf/gf/v2/net/ghttp.(*middleware).Next\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_request_middleware.go:47\n   15). github.com/gogf/gf/v2/net/ghttp.(*Server).ServeHTTP\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/net/ghttp/ghttp_server_handler.go:122\n'})})]})}function h(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},250065:function(e,t,r){r.d(t,{Z:function(){return c},a:function(){return s}});var n=r(667294);let o={},i=n.createContext(o);function s(e){let t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);