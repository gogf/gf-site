"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["5862"],{254336:function(e,n,o){o.r(n),o.d(n,{metadata:()=>t,contentTitle:()=>s,default:()=>m,assets:()=>p,toc:()=>i,frontMatter:()=>c});var t=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5B89\u5168\u7C7B\u578B-gtype/\u5B89\u5168\u7C7B\u578B-\u6027\u80FD\u6D4B\u8BD5","title":"Safe Type - Performance","description":"The performance benchmark results of safe types in the gtype package of the GoFrame framework are presented, analyzing the execution efficiency of different data type methods through detailed test data comparison, providing a reference for Go language developers to enhance data processing capabilities in concurrent programming.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5B89\u5168\u7C7B\u578B-gtype/\u5B89\u5168\u7C7B\u578B-\u6027\u80FD\u6D4B\u8BD5.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5B89\u5168\u7C7B\u578B-gtype","slug":"/docs/components/container-gtype-benchmark","permalink":"/en/docs/components/container-gtype-benchmark","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5B89\u5168\u7C7B\u578B-gtype/\u5B89\u5168\u7C7B\u578B-\u6027\u80FD\u6D4B\u8BD5.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":1,"frontMatter":{"slug":"/docs/components/container-gtype-benchmark","title":"Safe Type - Performance","sidebar_position":1,"hide_title":true,"keywords":["GoFrame","GoFrame framework","benchmark","performance testing","safe types","concurrent programming","data types","Go language","code optimization","test results"],"description":"The performance benchmark results of safe types in the gtype package of the GoFrame framework are presented, analyzing the execution efficiency of different data type methods through detailed test data comparison, providing a reference for Go language developers to enhance data processing capabilities in concurrent programming."},"sidebar":"mainSidebar","previous":{"title":"Safe Type - Usage","permalink":"/en/docs/components/container-gtype-example"},"next":{"title":"Queue","permalink":"/en/docs/components/container-gqueue"}}'),a=o("785893"),r=o("250065");let c={slug:"/docs/components/container-gtype-benchmark",title:"Safe Type - Performance",sidebar_position:1,hide_title:!0,keywords:["GoFrame","GoFrame framework","benchmark","performance testing","safe types","concurrent programming","data types","Go language","code optimization","test results"],description:"The performance benchmark results of safe types in the gtype package of the GoFrame framework are presented, analyzing the execution efficiency of different data type methods through detailed test data comparison, providing a reference for Go language developers to enhance data processing capabilities in concurrent programming."},s=void 0,p={},i=[];function l(e){let n={code:"code",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"The benchmark test results are as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'john@john-B85M:~/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/container/gtype$ go test -bench=".*"  -benchmem\ngoos: linux\ngoarch: amd64\npkg: github.com/gogf/gf/v2/container/gtype\nBenchmarkInt_Set-4            300000000           5.87 ns/op        0 B/op        0 allocs/op\nBenchmarkInt_Val-4            2000000000          0.46 ns/op        0 B/op        0 allocs/op\nBenchmarkInt_Add-4            300000000           5.86 ns/op        0 B/op        0 allocs/op\nBenchmarkInt32_Set-4          300000000           5.87 ns/op        0 B/op        0 allocs/op\nBenchmarkInt32_Val-4          2000000000          0.47 ns/op        0 B/op        0 allocs/op\nBenchmarkInt32_Add-4          300000000           5.85 ns/op        0 B/op        0 allocs/op\nBenchmarkInt64_Set-4          300000000           5.88 ns/op        0 B/op        0 allocs/op\nBenchmarkInt64_Val-4          2000000000          0.46 ns/op        0 B/op        0 allocs/op\nBenchmarkInt64_Add-4          300000000           5.88 ns/op        0 B/op        0 allocs/op\nBenchmarkUint_Set-4           300000000           5.88 ns/op        0 B/op        0 allocs/op\nBenchmarkUint_Val-4           2000000000          0.46 ns/op        0 B/op        0 allocs/op\nBenchmarkUint_Add-4           300000000           5.87 ns/op        0 B/op        0 allocs/op\nBenchmarkUint32_Set-4         300000000           5.86 ns/op        0 B/op        0 allocs/op\nBenchmarkUint32_Val-4         2000000000          0.50 ns/op        0 B/op        0 allocs/op\nBenchmarkUint32_Add-4         200000000           5.86 ns/op        0 B/op        0 allocs/op\nBenchmarkUint64_Set-4         300000000           5.86 ns/op        0 B/op        0 allocs/op\nBenchmarkUint64_Val-4         2000000000          0.47 ns/op        0 B/op        0 allocs/op\nBenchmarkUint64_Add-4         300000000           5.85 ns/op        0 B/op        0 allocs/op\nBenchmarkBool_Set-4           300000000           5.85 ns/op        0 B/op        0 allocs/op\nBenchmarkBool_Val-4           2000000000          0.46 ns/op        0 B/op        0 allocs/op\nBenchmarkString_Set-4         20000000            90.1 ns/op       23 B/op        1 allocs/op\nBenchmarkString_Val-4         2000000000          1.58 ns/op        0 B/op        0 allocs/op\nBenchmarkBytes_Set-4          20000000            76.2 ns/op       35 B/op        2 allocs/op\nBenchmarkBytes_Val-4          2000000000          1.58 ns/op        0 B/op        0 allocs/op\nBenchmarkInterface_Set-4      50000000            30.7 ns/op        8 B/op        0 allocs/op\nBenchmarkInterface_Val-4      2000000000          0.74 ns/op        0 B/op        0 allocs/op\nBenchmarkAtomicValue_Store-4  50000000            27.3 ns/op        8 B/op        0 allocs/op\nBenchmarkAtomicValue_Load-4   2000000000          0.73 ns/op        0 B/op        0 allocs/op\nPASS\nok   github.com/gogf/gf/v2/container/gtype 49.454s\n'})})]})}function m(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},250065:function(e,n,o){o.d(n,{Z:function(){return s},a:function(){return c}});var t=o(667294);let a={},r=t.createContext(a);function c(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);