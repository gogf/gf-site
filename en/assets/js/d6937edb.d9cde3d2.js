"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["99528"],{704026:function(e,t,r){r.r(t),r.d(t,{metadata:()=>n,contentTitle:()=>c,default:()=>h,assets:()=>l,toc:()=>d,frontMatter:()=>s});var n=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree/\u6811\u5F62\u7C7B\u578B-gtree","title":"Tree","description":"This document introduces the tree container components provided by the GoFrame framework, including data structures such as RedBlackTree, AVLTree, and BTree. Tree containers support concurrency safety and ordered traversal, making them suitable for large data storage needs. With the GoFrame framework, developers can efficiently implement scenarios such as associative arrays, sorted key-value pairs, and large data volume memory CRUD.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree/\u6811\u5F62\u7C7B\u578B-gtree.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree","slug":"/docs/components/container-gtree","permalink":"/en/docs/components/container-gtree","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree/\u6811\u5F62\u7C7B\u578B-gtree.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1733708461000,"sidebarPosition":7,"frontMatter":{"slug":"/docs/components/container-gtree","title":"Tree","sidebar_position":7,"hide_title":true,"keywords":["GoFrame","tree container","gtree","concurrency-safe","Red-black tree","AVL tree","BTree","sorting","big data processing","data structure"],"description":"This document introduces the tree container components provided by the GoFrame framework, including data structures such as RedBlackTree, AVLTree, and BTree. Tree containers support concurrency safety and ordered traversal, making them suitable for large data storage needs. With the GoFrame framework, developers can efficiently implement scenarios such as associative arrays, sorted key-value pairs, and large data volume memory CRUD."},"sidebar":"mainSidebar","previous":{"title":"Queue - Performance","permalink":"/en/docs/components/container-gqueue-benchmark"},"next":{"title":"Tree - Usage","permalink":"/en/docs/components/container-gtree-example"}}'),a=r("785893"),o=r("250065"),i=r("203105");let s={slug:"/docs/components/container-gtree",title:"Tree",sidebar_position:7,hide_title:!0,keywords:["GoFrame","tree container","gtree","concurrency-safe","Red-black tree","AVL tree","BTree","sorting","big data processing","data structure"],description:"This document introduces the tree container components provided by the GoFrame framework, including data structures such as RedBlackTree, AVLTree, and BTree. Tree containers support concurrency safety and ordered traversal, making them suitable for large data storage needs. With the GoFrame framework, developers can efficiently implement scenarios such as associative arrays, sorted key-value pairs, and large data volume memory CRUD."},c=void 0,l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Documentation",id:"documentation",level:2}];function u(e){let t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsxs)(t.p,{children:["Concurrent-safe feature support for tree containers, with the characteristics of tree data structures supporting ordered traversal, low memory consumption, stable complexity, and suitability for large data storage. This module includes tree containers for multiple data structures: ",(0,a.jsx)(t.code,{children:"RedBlackTree"}),", ",(0,a.jsx)(t.code,{children:"AVLTree"}),", and ",(0,a.jsx)(t.code,{children:"BTree"}),"."]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Type"}),(0,a.jsx)(t.th,{children:"Data Structure"}),(0,a.jsx)(t.th,{children:"Average Complexity"}),(0,a.jsx)(t.th,{children:"Supports Sorting"}),(0,a.jsx)(t.th,{children:"Ordered Traversal"}),(0,a.jsx)(t.th,{children:"Description"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"RedBlackTree"})}),(0,a.jsx)(t.td,{children:"Red-black tree"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"O(log N)"})}),(0,a.jsx)(t.td,{children:"Yes"}),(0,a.jsx)(t.td,{children:"Yes"}),(0,a.jsx)(t.td,{children:"Good write performance"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"AVLTree"})}),(0,a.jsx)(t.td,{children:"Height-balanced tree"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"O(log N)"})}),(0,a.jsx)(t.td,{children:"Yes"}),(0,a.jsx)(t.td,{children:"Yes"}),(0,a.jsx)(t.td,{children:"Good search performance"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"BTree"})}),(0,a.jsx)(t.td,{children:"B-tree/B-tree"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"O(log N)"})}),(0,a.jsx)(t.td,{children:"Yes"}),(0,a.jsx)(t.td,{children:"Yes"}),(0,a.jsx)(t.td,{children:"Commonly used for external storage"})]})]})]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["Reference link: ",(0,a.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Binary_tree",children:"https://en.wikipedia.org/wiki/Binary_tree"})]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Usage Scenarios"}),":"]}),"\n",(0,a.jsx)(t.p,{children:"Associative array scenarios, sorted key-value pair scenarios, large data volume memory CRUD scenarios, etc."}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Usage Method"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-go",children:'import "github.com/gogf/gf/v2/container/gtree"\n'})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"API Documentation"}),":"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/container/gtree",children:"https://pkg.go.dev/github.com/gogf/gf/v2/container/gtree"})}),"\n",(0,a.jsx)(t.p,{children:"The API methods for several containers are very similar, characterized by needing to provide methods for sorting during initialization."}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"gutil"})," module provides some common basic type comparison methods that can be directly used in the program, and examples are also available later."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-go",children:"func ComparatorByte(a, b interface{}) int\nfunc ComparatorFloat32(a, b interface{}) int\nfunc ComparatorFloat64(a, b interface{}) int\nfunc ComparatorInt(a, b interface{}) int\nfunc ComparatorInt16(a, b interface{}) int\nfunc ComparatorInt32(a, b interface{}) int\nfunc ComparatorInt64(a, b interface{}) int\nfunc ComparatorInt8(a, b interface{}) int\nfunc ComparatorRune(a, b interface{}) int\nfunc ComparatorString(a, b interface{}) int\nfunc ComparatorTime(a, b interface{}) int\nfunc ComparatorUint(a, b interface{}) int\nfunc ComparatorUint16(a, b interface{}) int\nfunc ComparatorUint32(a, b interface{}) int\nfunc ComparatorUint64(a, b interface{}) int\nfunc ComparatorUint8(a, b interface{}) int\n"})}),"\n",(0,a.jsx)(t.h2,{id:"documentation",children:"Documentation"}),"\n","\n",(0,a.jsx)(i.Z,{})]})}function h(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},203105:function(e,t,r){r.d(t,{Z:()=>j});var n=r("785893");r("667294");var a=r("467026"),o=r("96693"),i=r("531183"),s=r("633876"),c=r("266026"),l=r("434751"),d=r("58608");let u={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function h(e){let{href:t,children:r}=e;return(0,n.jsx)(i.Z,{href:t,className:(0,a.Z)("card padding--lg",u.cardContainer),children:r})}function m(e){let{href:t,icon:r,title:o,description:i}=e;return(0,n.jsxs)(h,{href:t,children:[(0,n.jsxs)(d.Z,{as:"h2",className:(0,a.Z)("text--truncate",u.cardTitle),title:o,children:[r," ",o]}),i&&(0,n.jsx)("p",{className:(0,a.Z)("text--truncate",u.cardDescription),title:i,children:i})]})}function p(e){let{item:t}=e,r=(0,o.LM)(t),a=function(){let{selectMessage:e}=(0,s.c)();return t=>e(t,(0,l.I)({message:"1 item|{count} items",id:"theme.docs.DocCard.categoryDescription.plurals",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t}))}();return r?(0,n.jsx)(m,{href:r,icon:"\uD83D\uDDC3\uFE0F",title:t.label,description:t.description??a(t.items.length)}):null}function f(e){let{item:t}=e,r=(0,c.Z)(t.href)?"\uD83D\uDCC4\uFE0F":"\uD83D\uDD17",a=(0,o.xz)(t.docId??void 0);return(0,n.jsx)(m,{href:t.href,icon:r,title:t.label,description:t.description??a?.description})}function g(e){let{item:t}=e;switch(t.type){case"link":return(0,n.jsx)(f,{item:t});case"category":return(0,n.jsx)(p,{item:t});default:throw Error(`unknown item type ${JSON.stringify(t)}`)}}function x(e){let{className:t}=e,r=(0,o.jA)();return(0,n.jsx)(j,{items:r.items,className:t})}function j(e){let{items:t,className:r}=e;if(!t)return(0,n.jsx)(x,{...e});let i=(0,o.MN)(t);return(0,n.jsx)("section",{className:(0,a.Z)("row",r),children:i.map((e,t)=>(0,n.jsx)("article",{className:"col col--6 margin-bottom--lg",children:(0,n.jsx)(g,{item:e})},t))})}},633876:function(e,t,r){r.d(t,{c:function(){return c}});var n=r(667294),a=r(49931);let o=["zero","one","two","few","many","other"];function i(e){return o.filter(t=>e.includes(t))}let s={locale:"en",pluralForms:i(["one","other"]),select:e=>1===e?"one":"other"};function c(){let e=function(){let{i18n:{currentLocale:e}}=(0,a.Z)();return(0,n.useMemo)(()=>{try{return function(e){let t=new Intl.PluralRules(e);return{locale:e,pluralForms:i(t.resolvedOptions().pluralCategories),select:e=>t.select(e)}}(e)}catch(t){return console.error(`Failed to use Intl.PluralRules for locale "${e}".
Docusaurus will fallback to the default (English) implementation.
Error: ${t.message}
`),s}},[e])}();return{selectMessage:(t,r)=>(function(e,t,r){let n=e.split("|");if(1===n.length)return n[0];n.length>r.pluralForms.length&&console.error(`For locale=${r.locale}, a maximum of ${r.pluralForms.length} plural forms are expected (${r.pluralForms.join(",")}), but the message contains ${n.length}: ${e}`);let a=r.select(t);return n[Math.min(r.pluralForms.indexOf(a),n.length-1)]})(r,t,e)}}},250065:function(e,t,r){r.d(t,{Z:function(){return s},a:function(){return i}});var n=r(667294);let a={},o=n.createContext(a);function i(e){let t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);