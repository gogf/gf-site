"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["81507"],{303618:function(e,t,r){r.r(t),r.d(t,{metadata:()=>n,contentTitle:()=>s,default:()=>g,assets:()=>d,toc:()=>a,frontMatter:()=>c});var n=JSON.parse('{"id":"docs/\u5FAE\u670D\u52A1\u5F00\u53D1/\u670D\u52A1\u6CE8\u518C\u53D1\u73B0","title":"Service Registry and Discovery","description":"The use and implementation of the service registry and discovery components within the GoFrame framework, managed by the gsvc component, supports multiple implementations such as etcd, zookeeper, and polaris. Proper configuration enables global service registry and discovery, enhancing the flexibility and scalability of service calls, which is an important guide for developing microservice architectures.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u5FAE\u670D\u52A1\u5F00\u53D1/\u670D\u52A1\u6CE8\u518C\u53D1\u73B0.md","sourceDirName":"docs/\u5FAE\u670D\u52A1\u5F00\u53D1","slug":"/docs/micro-service/registry-discovery","permalink":"/en/docs/micro-service/registry-discovery","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u5FAE\u670D\u52A1\u5F00\u53D1/\u670D\u52A1\u6CE8\u518C\u53D1\u73B0.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":5,"frontMatter":{"slug":"/docs/micro-service/registry-discovery","title":"Service Registry and Discovery","sidebar_position":5,"hide_title":true,"description":"The use and implementation of the service registry and discovery components within the GoFrame framework, managed by the gsvc component, supports multiple implementations such as etcd, zookeeper, and polaris. Proper configuration enables global service registry and discovery, enhancing the flexibility and scalability of service calls, which is an important guide for developing microservice architectures.","keywords":["GoFrame framework","service registry","service discovery","microservice architecture","gsvc component","etcd","zookeeper","polaris","flexibility","scalability"]},"sidebar":"mainSidebar","previous":{"title":"GRPC Interceptor Component","permalink":"/en/docs/micro-service/interceptor"},"next":{"title":"Service Load Balancing","permalink":"/en/docs/micro-service/load-balance"}}'),i=r("785893"),o=r("250065");let c={slug:"/docs/micro-service/registry-discovery",title:"Service Registry and Discovery",sidebar_position:5,hide_title:!0,description:"The use and implementation of the service registry and discovery components within the GoFrame framework, managed by the gsvc component, supports multiple implementations such as etcd, zookeeper, and polaris. Proper configuration enables global service registry and discovery, enhancing the flexibility and scalability of service calls, which is an important guide for developing microservice architectures.",keywords:["GoFrame framework","service registry","service discovery","microservice architecture","gsvc component","etcd","zookeeper","polaris","flexibility","scalability"]},s=void 0,d={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Component Activation",id:"component-activation",level:2},{value:"Common Components",id:"common-components",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"<code>HTTP</code>",id:"http",level:3},{value:"<code>GRPC</code>",id:"grpc",level:3},{value:"Frequently Asked Questions",id:"frequently-asked-questions",level:2},{value:"How to disable the discovery feature for specific requests when globally enabling the service registry and discovery",id:"how-to-disable-the-discovery-feature-for-specific-requests-when-globally-enabling-the-service-registry-and-discovery",level:3}];function l(e){let t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"GoFrame"})," framework provides service registry and discovery components managed by the ",(0,i.jsx)(t.code,{children:"gsvc"})," component, which primarily defines the interface for registry and discovery. The specific implementation is provided by community components: ",(0,i.jsx)(t.a,{href:"https://github.com/gogf/gf/tree/master/contrib/registry",children:"https://github.com/gogf/gf/tree/master/contrib/registry"}),". Currently, community components offer multiple implementations for registry and discovery, such as ",(0,i.jsx)(t.code,{children:"etcd, zookeeper, polaris"}),", etc. Developers can use them interchangeably as needed or implement their own registry and discovery components according to the API definition of the ",(0,i.jsx)(t.code,{children:"gsvc"})," component."]}),"\n",(0,i.jsx)(t.h2,{id:"component-activation",children:"Component Activation"}),"\n",(0,i.jsxs)(t.p,{children:["The registry and discovery components are activated only when a specific interface implementation is introduced. For example, using ",(0,i.jsx)(t.code,{children:"etcd"})," to implement registry and discovery:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/contrib/registry/etcd/v2"\n    "github.com/gogf/gf/v2/net/gsvc"\n)\n\nfunc main() {\n    gsvc.SetRegistry(etcd.New(`127.0.0.1:2379`))\n\n    // ...\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"common-components",children:"Common Components"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Component Name"}),(0,i.jsx)(t.th,{children:"Documentation"}),(0,i.jsx)(t.th,{children:"Remarks"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"file"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://github.com/gogf/gf/tree/master/contrib/registry/file",children:"https://github.com/gogf/gf/tree/master/contrib/registry/file"})}),(0,i.jsx)(t.td,{children:"Only for single-machine testing"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"etcd"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://github.com/gogf/gf/tree/master/contrib/registry/etcd",children:"https://github.com/gogf/gf/tree/master/contrib/registry/etcd"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"polaris"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://github.com/gogf/gf/tree/master/contrib/registry/polaris",children:"https://github.com/gogf/gf/tree/master/contrib/registry/polaris"})}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"zookeeper"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://github.com/gogf/gf/tree/master/contrib/registry/zookeeper",children:"https://github.com/gogf/gf/tree/master/contrib/registry/zookeeper"})}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsxs)(t.p,{children:["For more components, refer to: ",(0,i.jsx)(t.a,{href:"https://github.com/gogf/gf/tree/master/contrib/registry",children:"https://github.com/gogf/gf/tree/master/contrib/registry"})]}),"\n",(0,i.jsx)(t.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(t.h3,{id:"http",children:(0,i.jsx)(t.code,{children:"HTTP"})}),"\n",(0,i.jsxs)(t.p,{children:["You can use ",(0,i.jsx)(t.code,{children:"gsvc.SetRegistry(etcd.New(`127.0.0.1:2379`))"})," to set the registry and discovery with ",(0,i.jsx)(t.code,{children:"etcd"}),". The ",(0,i.jsx)(t.code,{children:"etcd.New"})," in this case denotes creating an interface implementation object of ",(0,i.jsx)(t.code,{children:"gsvc.Registry"})," through a community component, and setting the global default registry and discovery interface implementation object via the ",(0,i.jsx)(t.code,{children:"gsvc.SetRegistry"})," method."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"server.go"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/contrib/registry/etcd/v2"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n    "github.com/gogf/gf/v2/net/gsvc"\n)\n\nfunc main() {\n    gsvc.SetRegistry(etcd.New(`127.0.0.1:2379`))\n\n    s := g.Server(`hello.svc`)\n    s.BindHandler("/", func(r *ghttp.Request) {\n        g.Log().Info(r.Context(), `request received`)\n        r.Response.Write(`Hello world`)\n    })\n    s.Run()\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"client.go"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/contrib/registry/etcd/v2"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/gsvc"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nfunc main() {\n    gsvc.SetRegistry(etcd.New(`127.0.0.1:2379`))\n    ctx := gctx.New()\n    res := g.Client().GetContent(ctx, `http://hello.svc/`)\n    g.Log().Info(ctx, res)\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"After execution, the server output:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'$ go run server.go\n2023-03-15 20:55:56.256 [INFO] pid[3358]: http server started listening on [:60700]\n2023-03-15 20:55:56.256 [INFO] openapi specification is disabled\n2023-03-15 20:55:56.256 [DEBU] service register: &{Head: Deployment: Namespace: Name:hello.svc Version: Endpoints:10.35.12.81:60700 Metadata:map[insecure:true protocol:http]}\n2023-03-15 20:55:56.297 [DEBU] etcd put success with key "/service/default/default/hello.svc/latest/10.35.12.81:60700", value "{"insecure":true,"protocol":"http"}", lease "7587869265945813002"\n\n   SERVER   | DOMAIN  | ADDRESS | METHOD | ROUTE |                             HANDLER                             |    MIDDLEWARE\n------------|---------|---------|--------|-------|-----------------------------------------------------------------|--------------------\n  hello.svc | default | :60700  | ALL    | /     | main.main.func1                                                 |\n------------|---------|---------|--------|-------|-----------------------------------------------------------------|--------------------\n  hello.svc | default | :60700  | ALL    | /*    | github.com/gogf/gf/v2/net/ghttp.internalMiddlewareServerTracing | GLOBAL MIDDLEWARE\n------------|---------|---------|--------|-------|-----------------------------------------------------------------|--------------------\n\n2023-03-15 20:56:45.739 [INFO] {880eaa8104994c17ffb384495cd4c613} request received\n'})}),"\n",(0,i.jsx)(t.p,{children:"Client output:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ go run client.go\n2023-03-15 20:56:45.739 [INFO] {880eaa8104994c17ffb384495cd4c613} Hello world\n"})}),"\n",(0,i.jsx)(t.h3,{id:"grpc",children:(0,i.jsx)(t.code,{children:"GRPC"})}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsxs)(t.p,{children:["For the ",(0,i.jsx)(t.code,{children:"GRPC"})," protocol, you must use the ",(0,i.jsx)(t.code,{children:"grpcx.Resolver"})," module from ",(0,i.jsx)(t.code,{children:"grpcx"})," to set the service registry and discovery component. On the ",(0,i.jsx)(t.code,{children:"Server"})," side, if the ",(0,i.jsx)(t.code,{children:"grpc.name"})," value is not set in the ",(0,i.jsx)(t.code,{children:"config.yaml"}),", the default value is ",(0,i.jsx)(t.code,{children:"default"}),"."]})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"server.go"})}),"\n",(0,i.jsxs)(t.p,{children:["In the code, ",(0,i.jsx)(t.code,{children:"etcd.New"})," denotes creating an interface implementation object of ",(0,i.jsx)(t.code,{children:"gsvc.Registry"})," through a community component, and setting the global ",(0,i.jsx)(t.code,{children:"grpc"})," registry and discovery interface implementation object via ",(0,i.jsx)(t.code,{children:"grpcx.Resolver.Register"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/contrib/registry/etcd/v2"\n    "github.com/gogf/gf/contrib/rpc/grpcx/v2"\n    "github.com/gogf/gf/example/registry/etcd/grpc/controller"\n)\n\nfunc main() {\n    grpcx.Resolver.Register(etcd.New("127.0.0.1:2379"))\n\n    s := grpcx.Server.New()\n    controller.Register(s)\n    s.Run()\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"config.yaml"}),"\n",(0,i.jsx)(t.p,{children:"The default configuration file for the server:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'grpc:\n  name:             "demo"  # Service name\n  address:          ":8000" # Custom service listening address\n  logPath:          "./log" # Log storage directory path\n  logStdout:        true    # Whether the log is output to the terminal\n  errorLogEnabled:  true    # Whether to enable error log recording\n  accessLogEnabled: true    # Whether to enable access log recording\n  errorStack:       true    # Whether to record the error stack when an error occurs\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"client.go"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/contrib/registry/etcd/v2"\n    "github.com/gogf/gf/contrib/rpc/grpcx/v2"\n    "github.com/gogf/gf/example/registry/etcd/grpc/protobuf"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nfunc main() {\n    grpcx.Resolver.Register(etcd.New("127.0.0.1:2379"))\n\n    var (\n        ctx    = gctx.New()\n        conn   = grpcx.Client.MustNewGrpcClientConn("demo")\n        client = protobuf.NewGreeterClient(conn)\n    )\n    res, err := client.SayHello(ctx, &protobuf.HelloRequest{Name: "World"})\n    if err != nil {\n        g.Log().Error(ctx, err)\n        return\n    }\n    g.Log().Debug(ctx, "Response:", res.Message)\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"After execution, the server output:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'$ go run server.go\n2023-03-15 21:06:57.204 [DEBU] service register: &{Head: Deployment: Namespace: Name:demo Version: Endpoints:10.35.12.81:61978 Metadata:map[protocol:grpc]}\n2023-03-15 21:06:57.257 [DEBU] etcd put success with key "/service/default/default/demo/latest/10.35.12.81:61978", value "{"protocol":"grpc"}", lease "7587869265945813015"\n2023-03-15 21:06:57.257 [INFO] pid[5786]: grpc server started listening on [:61978]\n2023-03-15 21:07:04.955 {08f0aead94994c1731591d2b653ddc18} /protobuf.Greeter/SayHello, 0.002ms, name:"World", message:"Hello World"\n'})}),"\n",(0,i.jsx)(t.p,{children:"Client output:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'$ go run client.go\n2023-03-15 21:07:04.950 [DEBU] Watch key "/service/default/default/demo/latest/"\n2023-03-15 21:07:04.952 [DEBU] client conn updated with addresses [{"Addr":"10.35.12.81:61978","ServerName":"demo","Attributes":{},"BalancerAttributes":null,"Type":0,"Metadata":null}]\n2023-03-15 21:07:04.953 [DEBU] client conn updated with addresses [{"Addr":"10.35.12.81:61978","ServerName":"demo","Attributes":{},"BalancerAttributes":null,"Type":0,"Metadata":null}]\n2023-03-15 21:07:04.955 [DEBU] {08f0aead94994c1731591d2b653ddc18} Response: Hello World\n'})}),"\n",(0,i.jsx)(t.h2,{id:"frequently-asked-questions",children:"Frequently Asked Questions"}),"\n",(0,i.jsx)(t.h3,{id:"how-to-disable-the-discovery-feature-for-specific-requests-when-globally-enabling-the-service-registry-and-discovery",children:"How to disable the discovery feature for specific requests when globally enabling the service registry and discovery"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Question"}),": When using ",(0,i.jsx)(t.code,{children:"gclient"}),", if the service registry and discovery feature are globally enabled, all requests from ",(0,i.jsx)(t.code,{children:"gclient"})," will go through the discovery service. However, for services that are not maintained in the service registry and discovery, such as a request to an ",(0,i.jsx)(t.code,{children:"IP:PORT"})," address or an external network service request, it will also go through the discovery service, resulting in a service not found error. How can this be avoided?"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Answer"}),": When globally enabling the discovery feature, ",(0,i.jsx)(t.code,{children:"gclient"})," requests will by default use the globally set discovery service. If a specific request does not use the discovery service, you can disable the discovery service for the current request using the ",(0,i.jsx)(t.code,{children:"Discovery(nil)"})," chain operation method of ",(0,i.jsx)(t.code,{children:"gclient.Client"})," or disable the discovery service for the current client using the ",(0,i.jsx)(t.code,{children:"SetDiscovery(nil)"})," configuration method. This way, the request will not go through the discovery service."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'// Disable the discovery service for the current request via chain operation method\ng.Client().Discovery(nil).Get(ctx, "http://192.168.1.1/api/v1/user")\n\n// Disable the discovery service for the current client via configuration method\nclient := g.Client()\nclient.SetDiscovery(nil)\nclient.Get(ctx, "http://192.168.1.1/api/v1/user")\n'})})]})}function g(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},250065:function(e,t,r){r.d(t,{Z:function(){return s},a:function(){return c}});var n=r(667294);let i={},o=n.createContext(i);function c(e){let t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);