"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["421203"],{249535:function(e,t,r){r.r(t),r.d(t,{metadata:()=>n,contentTitle:()=>a,default:()=>l,assets:()=>c,toc:()=>u,frontMatter:()=>s});var n=JSON.parse('{"id":"docs/\u670D\u52A1\u53EF\u89C2\u6D4B\u6027/\u670D\u52A1\u76D1\u63A7\u544A\u8B66/\u76D1\u63A7\u544A\u8B66-\u6307\u6807\u5C5E\u6027","title":"Metrics - Attributes","description":"Use metric attributes for filtering, aggregation, and statistics in the monitoring alerts component of the GoFrame framework. It provides three attribute injection methods: constant attributes, variable attributes, and global attributes, and demonstrates through specific examples how to apply these attributes in different scenarios. Combined with OpenTelemetry and Prometheus, it shows how to define and apply metric attributes to achieve flexible and efficient data monitoring and analysis.","source":"@site/i18n/en/docusaurus-plugin-content-docs/version-2.8.x/docs/\u670D\u52A1\u53EF\u89C2\u6D4B\u6027/\u670D\u52A1\u76D1\u63A7\u544A\u8B66/\u76D1\u63A7\u544A\u8B66-\u6307\u6807\u5C5E\u6027.md","sourceDirName":"docs/\u670D\u52A1\u53EF\u89C2\u6D4B\u6027/\u670D\u52A1\u76D1\u63A7\u544A\u8B66","slug":"/docs/obs/metrics-attributes","permalink":"/en/2.8.x/docs/obs/metrics-attributes","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/versioned_docs/version-2.8.x/docs/\u670D\u52A1\u53EF\u89C2\u6D4B\u6027/\u670D\u52A1\u76D1\u63A7\u544A\u8B66/\u76D1\u63A7\u544A\u8B66-\u6307\u6807\u5C5E\u6027.md","tags":[],"version":"2.8.x","lastUpdatedBy":"John Guo","lastUpdatedAt":1742194305000,"sidebarPosition":4,"frontMatter":{"slug":"/docs/obs/metrics-attributes","title":"Metrics - Attributes","sidebar_position":4,"hide_title":true,"keywords":["Monitoring Alerts","Metric Attributes","GoFrame","Constant Attributes","Variable Attributes","Global Attributes","OpenTelemetry","Prometheus","Meter","Metric Injection"],"description":"Use metric attributes for filtering, aggregation, and statistics in the monitoring alerts component of the GoFrame framework. It provides three attribute injection methods: constant attributes, variable attributes, and global attributes, and demonstrates through specific examples how to apply these attributes in different scenarios. Combined with OpenTelemetry and Prometheus, it shows how to define and apply metric attributes to achieve flexible and efficient data monitoring and analysis."},"sidebar":"mainSidebar","previous":{"title":"Metrics - Asynchronous Metrics","permalink":"/en/2.8.x/docs/obs/metrics-async"},"next":{"title":"Metrics - Built-in Metrics","permalink":"/en/2.8.x/docs/obs/metrics-builtin"}}'),i=r("785893"),o=r("250065");let s={slug:"/docs/obs/metrics-attributes",title:"Metrics - Attributes",sidebar_position:4,hide_title:!0,keywords:["Monitoring Alerts","Metric Attributes","GoFrame","Constant Attributes","Variable Attributes","Global Attributes","OpenTelemetry","Prometheus","Meter","Metric Injection"],description:"Use metric attributes for filtering, aggregation, and statistics in the monitoring alerts component of the GoFrame framework. It provides three attribute injection methods: constant attributes, variable attributes, and global attributes, and demonstrates through specific examples how to apply these attributes in different scenarios. Combined with OpenTelemetry and Prometheus, it shows how to define and apply metric attributes to achieve flexible and efficient data monitoring and analysis."},a=void 0,c={},u=[{value:"Constant Attributes",id:"constant-attributes",level:2},{value:"Variable Attributes",id:"variable-attributes",level:2},{value:"Global Attributes",id:"global-attributes",level:2}];function m(e){let t={a:"a",admonition:"admonition",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Metric attributes are used for filtering, aggregation, statistical, and other high-level operations in higher-level metric usage. In the monitoring alerts component of the ",(0,i.jsx)(t.code,{children:"GoFrame"})," framework, three types of attribute injection methods are provided: ",(0,i.jsx)(t.strong,{children:"constant attributes"}),", ",(0,i.jsx)(t.strong,{children:"variable attributes"}),", and ",(0,i.jsx)(t.strong,{children:"global attributes"}),"."]}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["In ",(0,i.jsx)(t.code,{children:"OpenTelemetry"}),", they are called metric attributes (",(0,i.jsx)(t.code,{children:"attributes"}),"), but in ",(0,i.jsx)(t.code,{children:"Prometheus"}),", they are called metric labels (",(0,i.jsx)(t.code,{children:"labels"}),"), both meaning the same."]})}),"\n",(0,i.jsx)(t.h2,{id:"constant-attributes",children:"Constant Attributes"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Constant attributes"})," are a set of fixed attribute key-value pairs that can be bound to a ",(0,i.jsx)(t.code,{children:"Meter"})," or directly to a metric object. If bound to a ",(0,i.jsx)(t.code,{children:"Meter"}),", all metric objects created under the ",(0,i.jsx)(t.code,{children:"Meter"})," carry this attribute key-value pair. If bound to a metric object, it will only be effective on the current metric. Let's look at an example:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "go.opentelemetry.io/otel/exporters/prometheus"\n\n    "github.com/gogf/gf/contrib/metric/otelmetric/v2"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gctx"\n    "github.com/gogf/gf/v2/os/gmetric"\n)\n\nconst (\n    instrument        = "github.com/gogf/gf/example/metric/basic"\n    instrumentVersion = "v1.0"\n)\n\nvar (\n    meter = gmetric.GetGlobalProvider().Meter(gmetric.MeterOption{\n        Instrument:        instrument,\n        InstrumentVersion: instrumentVersion,\n        Attributes: gmetric.Attributes{\n            gmetric.NewAttribute("meter_const_attr_1", 1),\n        },\n    })\n    counter = meter.MustCounter(\n        "goframe.metric.demo.counter",\n        gmetric.MetricOption{\n            Help: "This is a simple demo for Counter usage",\n            Unit: "bytes",\n            Attributes: gmetric.Attributes{\n                gmetric.NewAttribute("metric_const_attr_1", 1),\n            },\n        },\n    )\n    observableCounter = meter.MustObservableCounter(\n        "goframe.metric.demo.observable_counter",\n        gmetric.MetricOption{\n            Help: "This is a simple demo for ObservableCounter usage",\n            Unit: "%",\n            Attributes: gmetric.Attributes{\n                gmetric.NewAttribute("metric_const_attr_2", 2),\n            },\n        },\n    )\n)\n\nfunc main() {\n    var ctx = gctx.New()\n    // Callback for observable metrics.\n    meter.MustRegisterCallback(func(ctx context.Context, obs gmetric.Observer) error {\n        obs.Observe(observableCounter, 10)\n        return nil\n    }, observableCounter)\n\n    // Prometheus exporter to export metrics as Prometheus format.\n    exporter, err := prometheus.New(\n        prometheus.WithoutCounterSuffixes(),\n        prometheus.WithoutUnits(),\n    )\n    if err != nil {\n        g.Log().Fatal(ctx, err)\n    }\n\n    // OpenTelemetry provider.\n    provider := otelmetric.MustProvider(\n        otelmetric.WithReader(exporter),\n    )\n    provider.SetAsGlobal()\n    defer provider.Shutdown(ctx)\n\n    // Counter.\n    counter.Inc(ctx)\n    counter.Add(ctx, 10)\n\n    // HTTP Server for metrics exporting.\n    otelmetric.StartPrometheusMetricsServer(8000, "/metrics")\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["As you can see, we specify constant attributes through the ",(0,i.jsx)(t.code,{children:"Attributes"})," attribute field in the ",(0,i.jsx)(t.code,{children:"MeterOption"})," or ",(0,i.jsx)(t.code,{children:"MetricOption"})," parameters when creating a ",(0,i.jsx)(t.code,{children:"Meter"})," object or a ",(0,i.jsx)(t.code,{children:"Metric"})," object."]}),"\n",(0,i.jsxs)(t.p,{children:["Once executed, we visit ",(0,i.jsx)(t.a,{href:"http://127.0.0.1:8000/metrics",children:"http://127.0.0.1:8000/metrics"})," to see the results. The constant attributes bound to the ",(0,i.jsx)(t.code,{children:"Meter"})," took effect on both metrics, but the constant attributes bound to each metric only took effect on the corresponding metric."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:r(394468).Z+"",width:"2966",height:"2014"})}),"\n",(0,i.jsx)(t.h2,{id:"variable-attributes",children:"Variable Attributes"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Variable attributes"})," are attribute key-value pairs specified at runtime, usually determined only at runtime, and might vary based on different execution scenarios, hence called variable attributes."]}),"\n",(0,i.jsx)(t.p,{children:"Let's look at an example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "go.opentelemetry.io/otel/exporters/prometheus"\n\n    "github.com/gogf/gf/contrib/metric/otelmetric/v2"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gctx"\n    "github.com/gogf/gf/v2/os/gmetric"\n)\n\nconst (\n    instrument        = "github.com/gogf/gf/example/metric/basic"\n    instrumentVersion = "v1.0"\n)\n\nvar (\n    meter = gmetric.GetGlobalProvider().Meter(gmetric.MeterOption{\n        Instrument:        instrument,\n        InstrumentVersion: instrumentVersion,\n        Attributes: gmetric.Attributes{\n            gmetric.NewAttribute("meter_const_attr_1", 1),\n        },\n    })\n    counter = meter.MustCounter(\n        "goframe.metric.demo.counter",\n        gmetric.MetricOption{\n            Help: "This is a simple demo for Counter usage",\n            Unit: "bytes",\n            Attributes: gmetric.Attributes{\n                gmetric.NewAttribute("metric_const_attr_1", 1),\n            },\n        },\n    )\n    observableCounter = meter.MustObservableCounter(\n        "goframe.metric.demo.observable_counter",\n        gmetric.MetricOption{\n            Help: "This is a simple demo for ObservableCounter usage",\n            Unit: "%",\n            Attributes: gmetric.Attributes{\n                gmetric.NewAttribute("metric_const_attr_2", 2),\n            },\n        },\n    )\n)\n\nfunc main() {\n    var ctx = gctx.New()\n    // Callback for observable metrics.\n    meter.MustRegisterCallback(func(ctx context.Context, obs gmetric.Observer) error {\n        obs.Observe(observableCounter, 10, gmetric.Option{\n            Attributes: gmetric.Attributes{\n                gmetric.NewAttribute("dynamic_attr_1", 1),\n            },\n        })\n        return nil\n    }, observableCounter)\n\n    // Prometheus exporter to export metrics as Prometheus format.\n    exporter, err := prometheus.New(\n        prometheus.WithoutCounterSuffixes(),\n        prometheus.WithoutUnits(),\n    )\n    if err != nil {\n        g.Log().Fatal(ctx, err)\n    }\n\n    // OpenTelemetry provider.\n    provider := otelmetric.MustProvider(\n        otelmetric.WithReader(exporter),\n    )\n    provider.SetAsGlobal()\n    defer provider.Shutdown(ctx)\n\n    // Counter.\n    counter.Inc(ctx, gmetric.Option{\n        Attributes: gmetric.Attributes{\n            gmetric.NewAttribute("dynamic_attr_2", 2),\n        },\n    })\n    counter.Add(ctx, 10, gmetric.Option{\n        Attributes: gmetric.Attributes{\n            gmetric.NewAttribute("dynamic_attr_3", 3),\n        },\n    })\n\n    // HTTP Server for metrics exporting.\n    otelmetric.StartPrometheusMetricsServer(8000, "/metrics")\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["As shown, we specify metric variable attributes at runtime through the ",(0,i.jsx)(t.code,{children:"Attributes"})," attribute field in the ",(0,i.jsx)(t.code,{children:"Option"})," parameter. Variable attributes are quite flexible, and the same metric can use different variable attributes."]}),"\n",(0,i.jsxs)(t.p,{children:["Similarly, after execution, we visit ",(0,i.jsx)(t.a,{href:"http://127.0.0.1:8000/metrics",children:"http://127.0.0.1:8000/metrics"})," to see the results."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:r(41266).Z+"",width:"2966",height:"2014"})}),"\n",(0,i.jsx)(t.h2,{id:"global-attributes",children:"Global Attributes"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Global attributes"})," are a more flexible metric attribute injection method, which can be automatically injected based on ",(0,i.jsx)(t.code,{children:"Instrument"})," information and can determine whether to inject metric attributes into all metrics under a given ",(0,i.jsx)(t.code,{children:"Instrument"})," based on regex matches of the ",(0,i.jsx)(t.code,{children:"Instrument"})," name."]}),"\n",(0,i.jsx)(t.p,{children:"Let's look at an example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "go.opentelemetry.io/otel/exporters/prometheus"\n\n    "github.com/gogf/gf/contrib/metric/otelmetric/v2"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gctx"\n    "github.com/gogf/gf/v2/os/gmetric"\n)\n\nconst (\n    instrument        = "github.com/gogf/gf/example/metric/basic"\n    instrumentVersion = "v1.0"\n)\n\nvar (\n    meter = gmetric.GetGlobalProvider().Meter(gmetric.MeterOption{\n        Instrument:        instrument,\n        InstrumentVersion: instrumentVersion,\n        Attributes: gmetric.Attributes{\n            gmetric.NewAttribute("meter_const_attr_1", 1),\n        },\n    })\n    counter = meter.MustCounter(\n        "goframe.metric.demo.counter",\n        gmetric.MetricOption{\n            Help: "This is a simple demo for Counter usage",\n            Unit: "bytes",\n            Attributes: gmetric.Attributes{\n                gmetric.NewAttribute("metric_const_attr_1", 1),\n            },\n        },\n    )\n    observableCounter = meter.MustObservableCounter(\n        "goframe.metric.demo.observable_counter",\n        gmetric.MetricOption{\n            Help: "This is a simple demo for ObservableCounter usage",\n            Unit: "%",\n            Attributes: gmetric.Attributes{\n                gmetric.NewAttribute("metric_const_attr_2", 2),\n            },\n        },\n    )\n)\n\nfunc main() {\n    var ctx = gctx.New()\n\n    gmetric.SetGlobalAttributes(gmetric.Attributes{\n        gmetric.NewAttribute("global_attr_1", 1),\n    }, gmetric.SetGlobalAttributesOption{\n        Instrument:        instrument,\n        InstrumentVersion: instrumentVersion,\n        InstrumentPattern: "",\n    })\n\n    // Callback for observable metrics.\n    meter.MustRegisterCallback(func(ctx context.Context, obs gmetric.Observer) error {\n        obs.Observe(observableCounter, 10, gmetric.Option{\n            Attributes: gmetric.Attributes{\n                gmetric.NewAttribute("dynamic_attr_1", 1),\n            },\n        })\n        return nil\n    }, observableCounter)\n\n    // Prometheus exporter to export metrics as Prometheus format.\n    exporter, err := prometheus.New(\n        prometheus.WithoutCounterSuffixes(),\n        prometheus.WithoutUnits(),\n    )\n    if err != nil {\n        g.Log().Fatal(ctx, err)\n    }\n\n    // OpenTelemetry provider.\n    provider := otelmetric.MustProvider(\n        otelmetric.WithReader(exporter),\n    )\n    provider.SetAsGlobal()\n    defer provider.Shutdown(ctx)\n\n    // Counter.\n    counter.Inc(ctx, gmetric.Option{\n        Attributes: gmetric.Attributes{\n            gmetric.NewAttribute("dynamic_attr_2", 2),\n        },\n    })\n    counter.Add(ctx, 10, gmetric.Option{\n        Attributes: gmetric.Attributes{\n            gmetric.NewAttribute("dynamic_attr_3", 3),\n        },\n    })\n\n    // HTTP Server for metrics exporting.\n    otelmetric.StartPrometheusMetricsServer(8000, "/metrics")\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Set global attributes through the ",(0,i.jsx)(t.code,{children:"gmetric.SetGlobalAttributes"})," method, and restrict the affected metric range based on the parameter ",(0,i.jsx)(t.code,{children:"gmetric.SetGlobalAttributesOption"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Similarly, after execution, visit ",(0,i.jsx)(t.a,{href:"http://127.0.0.1:8000/metrics",children:"http://127.0.0.1:8000/metrics"})," to see the results. You can see that the global attributes have been automatically added to the metrics."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:r(26819).Z+"",width:"2966",height:"2014"})})]})}function l(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},41266:function(e,t,r){r.d(t,{Z:function(){return n}});let n=r.p+"assets/images/17cd106aa40f6ca397486301bdaf16cd-d911aa6a01e4505632cce93328ce1cef.png"},394468:function(e,t,r){r.d(t,{Z:function(){return n}});let n=r.p+"assets/images/7604946c482b5592bf13db15e99486f5-75d69059171e18ddcc8037c4a6bf053a.png"},26819:function(e,t,r){r.d(t,{Z:function(){return n}});let n=r.p+"assets/images/dfc79773cb999c35208fe27c98e1ab48-4dc78437e183e52ebba5275526a76aa1.png"},250065:function(e,t,r){r.d(t,{Z:function(){return a},a:function(){return s}});var n=r(667294);let i={},o=n.createContext(i);function s(e){let t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);