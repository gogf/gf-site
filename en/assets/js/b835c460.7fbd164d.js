"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["66744"],{553397:function(e,n,t){t.r(n),t.d(n,{metadata:()=>o,contentTitle:()=>c,default:()=>h,assets:()=>d,toc:()=>i,frontMatter:()=>a});var o=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u7F16\u7801\u89E3\u7801/\u901A\u7528\u7F16\u89E3\u7801-gjson/\u901A\u7528\u7F16\u89E3\u7801-\u5BF9\u8C61\u521B\u5EFA","title":"General Codec - Creation","description":"Using the gjson module of the GoFrame framework to create JSON objects. Supports multiple data formats such as JSON and XML, and provides New and Load* methods for users to call. Demonstrates methods for creating JSON objects from JSON, XML, and struct objects with sample code to help developers understand and apply.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u7F16\u7801\u89E3\u7801/\u901A\u7528\u7F16\u89E3\u7801-gjson/\u901A\u7528\u7F16\u89E3\u7801-\u5BF9\u8C61\u521B\u5EFA.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u7F16\u7801\u89E3\u7801/\u901A\u7528\u7F16\u89E3\u7801-gjson","slug":"/docs/components/encoding-gjson-creation","permalink":"/en/docs/components/encoding-gjson-creation","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u7F16\u7801\u89E3\u7801/\u901A\u7528\u7F16\u89E3\u7801-gjson/\u901A\u7528\u7F16\u89E3\u7801-\u5BF9\u8C61\u521B\u5EFA.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/components/encoding-gjson-creation","title":"General Codec - Creation","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","gjson","Object Creation","JSON","XML","Data Format","Struct Objects","Go Development","Data Parsing"],"description":"Using the gjson module of the GoFrame framework to create JSON objects. Supports multiple data formats such as JSON and XML, and provides New and Load* methods for users to call. Demonstrates methods for creating JSON objects from JSON, XML, and struct objects with sample code to help developers understand and apply."},"sidebar":"mainSidebar","previous":{"title":"General Codec","permalink":"/en/docs/components/encoding-gjson"},"next":{"title":"General Codec - Nested Visiting","permalink":"/en/docs/components/encoding-gjson-nested-visiting"}}'),s=t("785893"),r=t("250065");let a={slug:"/docs/components/encoding-gjson-creation",title:"General Codec - Creation",sidebar_position:0,hide_title:!0,keywords:["GoFrame","GoFrame Framework","gjson","Object Creation","JSON","XML","Data Format","Struct Objects","Go Development","Data Parsing"],description:"Using the gjson module of the GoFrame framework to create JSON objects. Supports multiple data formats such as JSON and XML, and provides New and Load* methods for users to call. Demonstrates methods for creating JSON objects from JSON, XML, and struct objects with sample code to help developers understand and apply."},c=void 0,d={},i=[{value:"Creating with the <code>New</code> Method",id:"creating-with-the-new-method",level:3},{value:"Creating from <code>JSON</code> Data",id:"creating-from-json-data",level:4},{value:"Creating from <code>XML</code> Data",id:"creating-from-xml-data",level:4},{value:"Creating from a <code>Struct</code> Object",id:"creating-from-a-struct-object",level:4},{value:"Custom <code>Struct</code> Conversion Tags",id:"custom-struct-conversion-tags",level:4},{value:"Creating with the <code>Load*</code> Method",id:"creating-with-the-load-method",level:3},{value:"Creating with the <code>Load</code> Method",id:"creating-with-the-load-method-1",level:4},{value:"Creating with <code>LoadContent</code>",id:"creating-with-loadcontent",level:4}];function l(e){let n={a:"a",code:"code",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"gjson"})," module not only supports creating ",(0,s.jsx)(n.code,{children:"Json"})," objects from the basic ",(0,s.jsx)(n.code,{children:"JSON"})," data format but also supports creating ",(0,s.jsx)(n.code,{children:"Json"})," objects from common data formats. Supported data formats include: ",(0,s.jsx)(n.code,{children:"JSON"}),", ",(0,s.jsx)(n.code,{children:"XML"}),", ",(0,s.jsx)(n.code,{children:"INI"}),", ",(0,s.jsx)(n.code,{children:"YAML"}),", ",(0,s.jsx)(n.code,{children:"TOML"}),", ",(0,s.jsx)(n.code,{children:"PROPERTIES"}),". Additionally, it also supports creating ",(0,s.jsx)(n.code,{children:"Json"})," objects directly from ",(0,s.jsx)(n.code,{children:"struct"})," objects."]}),"\n",(0,s.jsxs)(n.p,{children:["The commonly used methods for object creation are ",(0,s.jsx)(n.code,{children:"New"})," and ",(0,s.jsx)(n.code,{children:"Load*"}),". For more methods, please refer to the interface documentation: ",(0,s.jsx)(n.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/encoding/gjson",children:"https://pkg.go.dev/github.com/gogf/gf/v2/encoding/gjson"})]}),"\n",(0,s.jsxs)(n.h3,{id:"creating-with-the-new-method",children:["Creating with the ",(0,s.jsx)(n.code,{children:"New"})," Method"]}),"\n",(0,s.jsxs)(n.h4,{id:"creating-from-json-data",children:["Creating from ",(0,s.jsx)(n.code,{children:"JSON"})," Data"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'jsonContent := `{"name":"john", "score":"100"}`\nj := gjson.New(jsonContent)\nfmt.Println(j.Get("name"))\nfmt.Println(j.Get("score"))\n// Output:\n// john\n// 100\n'})}),"\n",(0,s.jsxs)(n.h4,{id:"creating-from-xml-data",children:["Creating from ",(0,s.jsx)(n.code,{children:"XML"})," Data"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'jsonContent := `<?xml version="1.0" encoding="UTF-8"?><doc><name>john</name><score>100</score></doc>`\nj := gjson.New(jsonContent)\n// Note that there\'s root node in the XML content.\nfmt.Println(j.Get("doc.name"))\nfmt.Println(j.Get("doc.score"))\n// Output:\n// john\n// 100\n'})}),"\n",(0,s.jsxs)(n.h4,{id:"creating-from-a-struct-object",children:["Creating from a ",(0,s.jsx)(n.code,{children:"Struct"})," Object"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'type Me struct {\n    Name  string `json:"name"`\n    Score int    `json:"score"`\n}\nme := Me{\n    Name:  "john",\n    Score: 100,\n}\nj := gjson.New(me)\nfmt.Println(j.Get("name"))\nfmt.Println(j.Get("score"))\n// Output:\n// john\n// 100\n'})}),"\n",(0,s.jsxs)(n.h4,{id:"custom-struct-conversion-tags",children:["Custom ",(0,s.jsx)(n.code,{children:"Struct"})," Conversion Tags"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'type Me struct {\n    Name  string `tag:"name"`\n    Score int    `tag:"score"`\n    Title string\n}\nme := Me{\n    Name:  "john",\n    Score: 100,\n    Title: "engineer",\n}\n// The parameter <tags> specifies custom priority tags for struct conversion to map,\n// multiple tags joined with char \',\'.\nj := gjson.NewWithTag(me, "tag")\nfmt.Println(j.Get("name"))\nfmt.Println(j.Get("score"))\nfmt.Println(j.Get("Title"))\n// Output:\n// john\n// 100\n// engineer\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"creating-with-the-load-method",children:["Creating with the ",(0,s.jsx)(n.code,{children:"Load*"})," Method"]}),"\n",(0,s.jsxs)(n.p,{children:["The most commonly used methods are ",(0,s.jsx)(n.code,{children:"Load"})," and ",(0,s.jsx)(n.code,{children:"LoadContent"}),", the former reads from a file path, and the latter creates a ",(0,s.jsx)(n.code,{children:"Json"})," object from given content. The methods automatically recognize the data format internally, and automatically parse and convert them to ",(0,s.jsx)(n.code,{children:"Json"})," objects."]}),"\n",(0,s.jsxs)(n.h4,{id:"creating-with-the-load-method-1",children:["Creating with the ",(0,s.jsx)(n.code,{children:"Load"})," Method"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JSON"})," File"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'    jsonFilePath := gtest.DataPath("json", "data1.json")\n    j, _ := gjson.Load(jsonFilePath)\n    fmt.Println(j.Get("name"))\n    fmt.Println(j.Get("score"))\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"XML"})," File"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'    jsonFilePath := gtest.DataPath("xml", "data1.xml")\n    j, _ := gjson.Load(jsonFilePath)\n    fmt.Println(j.Get("doc.name"))\n    fmt.Println(j.Get("doc.score"))\n'})}),"\n",(0,s.jsxs)(n.h4,{id:"creating-with-loadcontent",children:["Creating with ",(0,s.jsx)(n.code,{children:"LoadContent"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'jsonContent := `{"name":"john", "score":"100"}`\nj, _ := gjson.LoadContent(jsonContent)\nfmt.Println(j.Get("name"))\nfmt.Println(j.Get("score"))\n// Output:\n// john\n// 100\n'})})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return c},a:function(){return a}});var o=t(667294);let s={},r=o.createContext(s);function a(e){let n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);