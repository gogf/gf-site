"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["57502"],{959267:function(e,n,t){t.r(n),t.d(n,{metadata:()=>i,contentTitle:()=>a,default:()=>u,assets:()=>l,toc:()=>s,frontMatter:()=>c});var i=JSON.parse('{"id":"course/proxima-book/\u7B2C\u56DB\u7AE0-\u4E1A\u52A1\u7F51\u5173/4.4.gRPC\u5BA2\u6237\u7AEF","title":"4.4 Implementing the gRPC Client","description":"A detailed guide on implementing and configuring gRPC clients in the API Gateway for communication with microservices, including client initialization and service discovery functionality.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/course/proxima-book/\u7B2C\u56DB\u7AE0-\u4E1A\u52A1\u7F51\u5173/4.4.gRPC\u5BA2\u6237\u7AEF.md","sourceDirName":"course/proxima-book/\u7B2C\u56DB\u7AE0-\u4E1A\u52A1\u7F51\u5173","slug":"/course/proxima-book/gateway-client","permalink":"/en/course/proxima-book/gateway-client","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/course/proxima-book/\u7B2C\u56DB\u7AE0-\u4E1A\u52A1\u7F51\u5173/4.4.gRPC\u5BA2\u6237\u7AEF.md","tags":[],"version":"current","lastUpdatedBy":"oldme","lastUpdatedAt":1734398801000,"frontMatter":{"title":"4.4 Implementing the gRPC Client","hide_title":true,"slug":"/course/proxima-book/gateway-client","keywords":["GoFrame","gRPC client","microservices communication","client configuration","service discovery","etcd integration"],"description":"A detailed guide on implementing and configuring gRPC clients in the API Gateway for communication with microservices, including client initialization and service discovery functionality."},"sidebar":"courseProximaBookSidebar","previous":{"title":"4.3 Service Startup","permalink":"/en/course/proxima-book/gateway-run"},"next":{"title":"4.5 Calling Microservices","permalink":"/en/course/proxima-book/gateway-call"}}'),r=t("785893"),o=t("250065");let c={title:"4.4 Implementing the gRPC Client",hide_title:!0,slug:"/course/proxima-book/gateway-client",keywords:["GoFrame","gRPC client","microservices communication","client configuration","service discovery","etcd integration"],description:"A detailed guide on implementing and configuring gRPC clients in the API Gateway for communication with microservices, including client initialization and service discovery functionality."},a=void 0,l={},s=[{value:"Client Implementation",id:"client-implementation",level:2},{value:"Interceptors",id:"interceptors",level:2},{value:"Defining the Interceptor",id:"defining-the-interceptor",level:3},{value:"Using the Interceptor",id:"using-the-interceptor",level:3}];function p(e){let n={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"client-implementation",children:"Client Implementation"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"The API Gateway acts as a gRPC client, while each microservice acts as a gRPC server. We'll define the gRPC client in our controller properties for later use."}),"\n",(0,r.jsxs)(n.p,{children:["The client is defined using ",(0,r.jsx)(n.code,{children:"grpcx.Client.MustNewGrpcClientConn(service, opts...)"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"app/gateway/internal/controller/user/user_new.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package user  \n  \nimport (  \n    "github.com/gogf/gf/contrib/rpc/grpcx/v2"  \n    "proxima/app/gateway/api/user"\n    v1 "proxima/app/user/api/account/v1"  \n)  \n  \ntype ControllerV1 struct {  \n    AccountClient v1.AccountClient  \n}  \n  \nfunc NewV1() user.IUserV1 {  \n    var conn = grpcx.Client.MustNewGrpcClientConn("user")  \n  \n    return &ControllerV1{  \n       AccountClient: v1.NewAccountClient(conn),  \n    }  \n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"app/gateway/internal/controller/words/words_new.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package words  \n  \nimport (  \n    "github.com/gogf/gf/contrib/rpc/grpcx/v2"  \n    "proxima/app/gateway/api/words"\n    v1 "proxima/app/word/api/words/v1"  \n)  \n  \ntype ControllerV1 struct {  \n    WordsClient v1.WordsClient  \n}  \n  \nfunc NewV1() words.IWordsV1 {  \n    var conn = grpcx.Client.MustNewGrpcClientConn("word")  \n  \n    return &ControllerV1{  \n       WordsClient: v1.NewWordsClient(conn),  \n    }  \n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"interceptors",children:"Interceptors"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"Currently, our client doesn't have timeout handling, and gRPC's default timeout threshold is very high. If the gRPC server, etcd service, or network encounters issues, the API Gateway could hang indefinitely. Let's add a timeout interceptor to handle these situations."}),"\n",(0,r.jsx)(n.h3,{id:"defining-the-interceptor",children:"Defining the Interceptor"}),"\n",(0,r.jsx)(n.p,{children:"The timeout mechanism is simple, implemented using Go's context."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"app/gateway/utility/grpc.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package utility  \n  \nimport (  \n    "context"  \n    "time"  \n    "google.golang.org/grpc"\n)  \n  \nfunc GrpcClientTimeout(ctx context.Context, method string, req, reply interface{},  \n    cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption,  \n) error {  \n    ctx, cancel := context.WithTimeout(ctx, 3*time.Second)  \n    defer cancel()  \n  \n    err := invoker(ctx, method, req, reply, cc, opts...)  \n    return err  \n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"using-the-interceptor",children:"Using the Interceptor"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"app/gateway/internal/controller/user/user_new.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package user  \n  \nimport (  \n    "github.com/gogf/gf/contrib/rpc/grpcx/v2"  \n    "proxima/app/gateway/api/user"\n    "proxima/app/gateway/utility"\n    v1 "proxima/app/user/api/account/v1"  \n)  \n  \ntype ControllerV1 struct {  \n    AccountClient v1.AccountClient  \n}  \n  \nfunc NewV1() user.IUserV1 {  \n    var conn = grpcx.Client.MustNewGrpcClientConn("user", grpcx.Client.ChainUnary( \n        utility.GrpcClientTimeout,  \n    ))  \n  \n    return &ControllerV1{  \n       AccountClient: v1.NewAccountClient(conn),  \n    }  \n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"app/gateway/internal/controller/words/words_new.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package words  \n  \nimport (  \n    "github.com/gogf/gf/contrib/rpc/grpcx/v2"  \n    "proxima/app/gateway/api/words"\n    "proxima/app/gateway/utility"\n    v1 "proxima/app/word/api/words/v1"  \n)  \n  \ntype ControllerV1 struct {  \n    WordsClient v1.WordsClient  \n}  \n  \nfunc NewV1() words.IWordsV1 {  \n    var conn = grpcx.Client.MustNewGrpcClientConn("word", grpcx.Client.ChainUnary( \n        utility.GrpcClientTimeout,  \n    ))\n  \n    return &ControllerV1{  \n       WordsClient: v1.NewWordsClient(conn),  \n    }  \n}\n'})})]})}function u(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return c}});var i=t(667294);let r={},o=i.createContext(r);function c(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);