"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["70356"],{975584:function(e,n,r){r.r(n),r.d(n,{metadata:()=>t,contentTitle:()=>s,default:()=>h,assets:()=>l,toc:()=>c,frontMatter:()=>o});var t=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6A21\u677F\u5F15\u64CE/\u6A21\u677F\u5F15\u64CE-\u6A21\u677F\u51FD\u6570/\u6A21\u677F\u51FD\u6570-\u57FA\u7840\u51FD\u6570","title":"Template Funcs - Intro","description":"Basic functions from the Golang standard library and their improved usage in the GoFrame framework. Practical examples demonstrate how to pass parameters between different template functions and how to flexibly call functions. The usage of and, or, not, call, index functions, as well as the improved automatic type conversion for eq/ne/lt/le/gt/ge comparison functions in the GoFrame framework, are detailed.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6A21\u677F\u5F15\u64CE/\u6A21\u677F\u5F15\u64CE-\u6A21\u677F\u51FD\u6570/\u6A21\u677F\u51FD\u6570-\u57FA\u7840\u51FD\u6570.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6A21\u677F\u5F15\u64CE/\u6A21\u677F\u5F15\u64CE-\u6A21\u677F\u51FD\u6570","slug":"/docs/core/gview-funcs-index","permalink":"/en/docs/core/gview-funcs-index","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6A21\u677F\u5F15\u64CE/\u6A21\u677F\u5F15\u64CE-\u6A21\u677F\u51FD\u6570/\u6A21\u677F\u51FD\u6570-\u57FA\u7840\u51FD\u6570.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/core/gview-funcs-index","title":"Template Funcs - Intro","sidebar_position":0,"hide_title":true,"keywords":["Golang","GoFrame","template engine","basic functions","logical operations","data comparison","parameter passing","function call","standard library","template rendering"],"description":"Basic functions from the Golang standard library and their improved usage in the GoFrame framework. Practical examples demonstrate how to pass parameters between different template functions and how to flexibly call functions. The usage of and, or, not, call, index functions, as well as the improved automatic type conversion for eq/ne/lt/le/gt/ge comparison functions in the GoFrame framework, are detailed."},"sidebar":"mainSidebar","previous":{"title":"Template Engine - Funcs","permalink":"/en/docs/core/gview-funcs"},"next":{"title":"Template Funcs - Built-In","permalink":"/en/docs/core/gview-funcs-builtin"}}'),i=r("785893"),a=r("250065");let o={slug:"/docs/core/gview-funcs-index",title:"Template Funcs - Intro",sidebar_position:0,hide_title:!0,keywords:["Golang","GoFrame","template engine","basic functions","logical operations","data comparison","parameter passing","function call","standard library","template rendering"],description:"Basic functions from the Golang standard library and their improved usage in the GoFrame framework. Practical examples demonstrate how to pass parameters between different template functions and how to flexibly call functions. The usage of and, or, not, call, index functions, as well as the improved automatic type conversion for eq/ne/lt/le/gt/ge comparison functions in the GoFrame framework, are detailed."},s=void 0,l={},c=[{value:"<code>and</code>",id:"and",level:2},{value:"<code>call</code>",id:"call",level:2},{value:"<code>index</code>",id:"index",level:2},{value:"<code>len</code>",id:"len",level:2},{value:"<code>not</code>",id:"not",level:2},{value:"<code>or</code>",id:"or",level:2},{value:"<code>print</code>",id:"print",level:2},{value:"<code>printf</code>",id:"printf",level:2},{value:"<code>println</code>",id:"println",level:2},{value:"<code>urlquery</code>",id:"urlquery",level:2},{value:"<code>eq / ne / lt / le / gt / ge</code>",id:"eq--ne--lt--le--gt--ge",level:2},{value:"Comparison Function Improvements",id:"comparison-function-improvements",level:3},{value:"Improved Execution Example",id:"improved-execution-example",level:3}];function d(e){let n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Below are some basic syntax and basic functions from the Golang standard library. The GoFrame framework has made necessary improvements to some basic functions."})}),"\n",(0,i.jsxs)(n.p,{children:["Variables can be passed between functions using the ",(0,i.jsx)(n.code,{children:"|"})," symbol"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"{{.value | Func1 | Func2}}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Use parentheses"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{{printf "nums is %s %d" (printf "%d %d" 1 2) 3}}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"and",children:(0,i.jsx)(n.code,{children:"and"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"{{and .X .Y .Z}}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"and"})," will evaluate each argument and return the first empty argument, otherwise, it returns the last non-empty argument."]}),"\n",(0,i.jsx)(n.h2,{id:"call",children:(0,i.jsx)(n.code,{children:"call"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"{{call .Field.Func .Arg1 .Arg2}}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"call"})," can invoke a function and pass in parameters."]}),"\n",(0,i.jsxs)(n.p,{children:["The called function needs to return 1 or 2 values. When returning two values, the second value is used to return an error of type ",(0,i.jsx)(n.code,{children:"error"}),". Execution will terminate if the returned error is not ",(0,i.jsx)(n.code,{children:"nil"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"index",children:(0,i.jsx)(n.code,{children:"index"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"index"})," supports ",(0,i.jsx)(n.code,{children:"map"}),", ",(0,i.jsx)(n.code,{children:"slice"}),", ",(0,i.jsx)(n.code,{children:"array"}),", ",(0,i.jsx)(n.code,{children:"string"}),", and reads the value of the specified index for these types."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{{index .Maps "name"}}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"len",children:(0,i.jsx)(n.code,{children:"len"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{{printf "The content length is %d" (.Content|len)}}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the length of the corresponding type, supporting types: ",(0,i.jsx)(n.code,{children:"map"}),", ",(0,i.jsx)(n.code,{children:"slice"}),", ",(0,i.jsx)(n.code,{children:"array"}),", ",(0,i.jsx)(n.code,{children:"string"}),", ",(0,i.jsx)(n.code,{children:"chan"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"not",children:(0,i.jsx)(n.code,{children:"not"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"not"})," returns the negation of the input argument."]}),"\n",(0,i.jsx)(n.p,{children:"For example, to determine if a variable is empty:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{{if not .Var}}\n// Executes when empty (.Var is empty, like: nil, 0, "", slice/map of length 0)\n{{else}}\n// Executes when not empty (.Var is not empty)\n{{end}}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"or",children:(0,i.jsx)(n.code,{children:"or"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"{{or .X .Y .Z}}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"or"})," will evaluate each argument and return the first non-empty argument, otherwise, it returns the last argument."]}),"\n",(0,i.jsx)(n.h2,{id:"print",children:(0,i.jsx)(n.code,{children:"print"})}),"\n",(0,i.jsxs)(n.p,{children:["Same as ",(0,i.jsx)(n.code,{children:"fmt.Sprint"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"printf",children:(0,i.jsx)(n.code,{children:"printf"})}),"\n",(0,i.jsxs)(n.p,{children:["Same as ",(0,i.jsx)(n.code,{children:"fmt.Sprintf"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"println",children:(0,i.jsx)(n.code,{children:"println"})}),"\n",(0,i.jsxs)(n.p,{children:["Same as ",(0,i.jsx)(n.code,{children:"fmt.Sprintln"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"urlquery",children:(0,i.jsx)(n.code,{children:"urlquery"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{{urlquery "http://johng.cn"}}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Will return"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"http%3A%2F%2Fjohng.cn\n"})}),"\n",(0,i.jsx)(n.h2,{id:"eq--ne--lt--le--gt--ge",children:(0,i.jsx)(n.code,{children:"eq / ne / lt / le / gt / ge"})}),"\n",(0,i.jsxs)(n.p,{children:["These functions are generally used within an ",(0,i.jsx)(n.code,{children:"if"})," statement"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"`eq`: arg1 == arg2\n`ne`: arg1 != arg2\n`lt`: arg1 < arg2\n`le`: arg1 <= arg2\n`gt`: arg1 > arg2\n`ge`: arg1 >= arg2\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"eq"})," function is different from the others in that it supports multiple arguments."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"{{eq arg1 arg2 arg3 arg4}}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Is the same as the following logical evaluation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"arg1==arg2 || arg1==arg3 || arg1==arg4 ...\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Used with ",(0,i.jsx)(n.code,{children:"if"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"{{if eq true .Var1 .Var2 .Var3}}...{{end}}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"{{if lt 100 200}}...{{end}}\n"})}),"\n",(0,i.jsx)(n.p,{children:"For example, executing when the variable is not empty:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{{if .Var}}\n// Executes when not empty (.Var is not empty)\n{{else}}\n// Executes when empty (.Var is empty, like: nil, 0, "", slice/map of length 0)\n{{end}}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"comparison-function-improvements",children:"Comparison Function Improvements"}),"\n",(0,i.jsxs)(n.p,{children:["The GoFrame framework's template engine has made necessary improvements to the standard library's comparison template functions ",(0,i.jsx)(n.code,{children:"eq/ne/lt/le/gt/ge"}),", to support comparison of any data type. For instance, the following comparison in the standard library template:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{{eq 1 "1"}}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Will cause an error:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'panic: template: at <eq 1 "1">: error calling eq: incompatible types for comparison\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Because the two parameters being compared are not of the same data type, a ",(0,i.jsx)(n.code,{children:"panic"})," error is triggered."]}),"\n",(0,i.jsx)(n.p,{children:"In the GoFrame framework's template engine, the two parameters will be automatically converted to the same data type before comparison, providing a better development experience and greater flexibility. If both parameters are integer variables (or integer strings), they will be converted to integers for comparison; otherwise, they will be converted to string variables for comparison (case-sensitive)."}),"\n",(0,i.jsx)(n.h3,{id:"improved-execution-example",children:"Improved Execution Example"}),"\n",(0,i.jsx)(n.p,{children:"Let's look at an example of running comparison template functions in the GoFrame framework's template engine."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "fmt"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    tplContent := `\neq:\neq "a" "a": {{eq "a" "a"}}\neq "1" "1": {{eq "1" "1"}}\neq  1  "1": {{eq  1  "1"}}\n\nne:\nne  1  "1": {{ne  1  "1"}}\nne "a" "a": {{ne "a" "a"}}\nne "a" "b": {{ne "a" "b"}}\n\nlt:\nlt  1  "2": {{lt  1  "2"}}\nlt  2   2 : {{lt  2   2 }}\nlt "a" "b": {{lt "a" "b"}}\n\nle:\nle  1  "2": {{le  1  "2"}}\nle  2   1 : {{le  2   1 }}\nle "a" "a": {{le "a" "a"}}\n\ngt:\ngt  1  "2": {{gt  1  "2"}}\ngt  2   1 : {{gt  2   1 }}\ngt "a" "a": {{gt "a" "a"}}\n\nge:\nge  1  "2": {{ge  1  "2"}}\nge  2   1 : {{ge  2   1 }}\nge "a" "a": {{ge "a" "a"}}\n`\n    content, err := g.View().ParseContent(context.TODO(), tplContent, nil)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(content)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"After running, the output result is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'eq:\neq "a" "a": true\neq "1" "1": true\neq  1  "1": true\n\nne:\nne  1  "1": false\nne "a" "a": false\nne "a" "b": true\n\nlt:\nlt  1  "2": true\nlt  2   2 : false\nlt "a" "b": true\n\nle:\nle  1  "2": true\nle  2   1 : false\nle "a" "a": true\n\ngt:\ngt  1  "2": false\ngt  2   1 : true\ngt "a" "a": false\n\nge:\nge  1  "2": false\nge  2   1 : true\nge "a" "a": true\n'})})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return s},a:function(){return o}});var t=r(667294);let i={},a=t.createContext(i);function o(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);