"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["16422"],{681071:function(e,i,n){n.r(i),n.d(i,{metadata:()=>s,contentTitle:()=>o,default:()=>h,assets:()=>d,toc:()=>l,frontMatter:()=>c});var s=JSON.parse('{"id":"docs/\u6846\u67B6\u8BBE\u8BA1/\u5DE5\u7A0B\u5F00\u53D1\u8BBE\u8BA1/\u5DE5\u7A0B\u76EE\u5F55\u8BBE\u8BA1","title":"Project Structure\uD83D\uDD25","description":"The method of project directory design in the GoFrame framework, based on the three-layer architecture model and improved with modern engineering practices to provide a universal and flexible directory structure design for complex business projects. Directory components include modules such as api, internal, dao, and logic, supporting various business scenarios while encouraging developers to flexibly add or remove directories for specific application implementations.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6846\u67B6\u8BBE\u8BA1/\u5DE5\u7A0B\u5F00\u53D1\u8BBE\u8BA1/\u5DE5\u7A0B\u76EE\u5F55\u8BBE\u8BA1.md","sourceDirName":"docs/\u6846\u67B6\u8BBE\u8BA1/\u5DE5\u7A0B\u5F00\u53D1\u8BBE\u8BA1","slug":"/docs/design/project-structure","permalink":"/en/docs/design/project-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6846\u67B6\u8BBE\u8BA1/\u5DE5\u7A0B\u5F00\u53D1\u8BBE\u8BA1/\u5DE5\u7A0B\u76EE\u5F55\u8BBE\u8BA1.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1733708461000,"sidebarPosition":1,"frontMatter":{"slug":"/docs/design/project-structure","title":"Project Structure\uD83D\uDD25","sidebar_position":1,"hide_title":true,"keywords":["GoFrame","project structure design","code layering","framework design","business logic","directory structure","project development","three-layer architecture","data access","modularization"],"description":"The method of project directory design in the GoFrame framework, based on the three-layer architecture model and improved with modern engineering practices to provide a universal and flexible directory structure design for complex business projects. Directory components include modules such as api, internal, dao, and logic, supporting various business scenarios while encouraging developers to flexibly add or remove directories for specific application implementations."},"sidebar":"mainSidebar","previous":{"title":"Code Layering","permalink":"/en/docs/design/project-layer"},"next":{"title":"DAO Encapsulation","permalink":"/en/docs/design/project-dao"}}'),r=n("785893"),t=n("250065");let c={slug:"/docs/design/project-structure",title:"Project Structure\uD83D\uDD25",sidebar_position:1,hide_title:!0,keywords:["GoFrame","project structure design","code layering","framework design","business logic","directory structure","project development","three-layer architecture","data access","modularization"],description:"The method of project directory design in the GoFrame framework, based on the three-layer architecture model and improved with modern engineering practices to provide a universal and flexible directory structure design for complex business projects. Directory components include modules such as api, internal, dao, and logic, supporting various business scenarios while encouraging developers to flexibly add or remove directories for specific application implementations."},o=void 0,d={},l=[{value:"1. Project Directory Structure",id:"1-project-directory-structure",level:2},{value:"External Interface",id:"external-interface",level:3},{value:"Interface Definition - <code>api</code>",id:"interface-definition---api",level:4},{value:"Interface Implementation - <code>controller</code>",id:"interface-implementation---controller",level:4},{value:"Business Implementation",id:"business-implementation",level:3},{value:"Business Interface - <code>service</code>",id:"business-interface---service",level:4},{value:"Business Encapsulation - <code>logic</code>",id:"business-encapsulation---logic",level:4},{value:"Structure Model",id:"structure-model",level:3},{value:"Data Model - <code>entity</code>",id:"data-model---entity",level:4},{value:"Business Model - <code>model</code>",id:"business-model---model",level:4},{value:"Data Access - <code>dao</code>",id:"data-access---dao",level:3},{value:"2. Request Layer Flow",id:"2-request-layer-flow",level:2},{value:"cmd",id:"cmd",level:3},{value:"api",id:"api",level:3},{value:"controller",id:"controller",level:3},{value:"model",id:"model",level:3},{value:"service",id:"service",level:3},{value:"logic",id:"logic",level:3},{value:"dao",id:"dao",level:3},{value:"3. FAQ",id:"3-faq",level:2},{value:"Does the framework support common <code>MVC</code> development model",id:"does-the-framework-support-common-mvc-development-model",level:3},{value:"How to maintain when <code>api</code> and <code>model</code> layers have duplicate data structures",id:"how-to-maintain-when-api-and-model-layers-have-duplicate-data-structures",level:3},{value:"How to clearly define and manage the layering responsibilities between <code>service</code> and <code>controller</code>",id:"how-to-clearly-define-and-manage-the-layering-responsibilities-between-service-and-controller",level:3},{value:"How to clearly define and manage the layering responsibilities between <code>service</code> and <code>dao</code>",id:"how-to-clearly-define-and-manage-the-layering-responsibilities-between-service-and-dao",level:3},{value:"Why use the <code>internal</code> directory to contain business code",id:"why-use-the-internal-directory-to-contain-business-code",level:3}];function a(e){let i={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.p,{children:["Project directory design is a further implementation of code layering design. It is recommended that you read carefully first: ",(0,r.jsx)(i.a,{href:"/en/docs/design/project-layer",children:"Code Layering"})]}),"\n",(0,r.jsx)(i.admonition,{type:"tip",children:(0,r.jsxs)(i.p,{children:["This is a directory design for ",(0,r.jsx)(i.strong,{children:"business projects"})," with the ",(0,r.jsx)(i.code,{children:"GoFrame"})," framework. The main idea originates from the three-layer architecture but has been improved and refined in practice to better fit engineering practices and modern advancements."]})}),"\n",(0,r.jsx)(i.h2,{id:"1-project-directory-structure",children:"1. Project Directory Structure"}),"\n",(0,r.jsxs)(i.p,{children:["The basic directory structure of ",(0,r.jsx)(i.code,{children:"GoFrame"})," business projects is as follows (taking ",(0,r.jsx)(i.code,{children:"Single Repo"})," as an example):"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-text",children:"/\n\u251C\u2500\u2500 api\n\u251C\u2500\u2500 hack\n\u251C\u2500\u2500 internal\n\u2502   \u251C\u2500\u2500 cmd\n\u2502   \u251C\u2500\u2500 consts\n\u2502   \u251C\u2500\u2500 controller\n\u2502   \u251C\u2500\u2500 dao\n\u2502   \u251C\u2500\u2500 logic\n\u2502   \u251C\u2500\u2500 model\n\u2502   |   \u251C\u2500\u2500 do\n\u2502   \u2502   \u2514\u2500\u2500 entity\n\u2502   \u2514\u2500\u2500 service\n\u251C\u2500\u2500 manifest\n\u251C\u2500\u2500 resource\n\u251C\u2500\u2500 utility\n\u251C\u2500\u2500 go.mod\n\u2514\u2500\u2500 main.go\n"})}),"\n",(0,r.jsx)(i.admonition,{type:"info",children:(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"\uD83D\uDD25 Important Tip \uD83D\uDD25"}),": The framework's project directory adopts a ",(0,r.jsx)(i.strong,{children:"generalized design"})," to meet the needs of projects with varying levels of complexity, but you can ",(0,r.jsx)(i.strong,{children:"increase or decrease the default directories as needed"})," in actual projects. For example, in scenarios lacking ",(0,r.jsx)(i.code,{children:"i18n/template/protobuf"})," requirements, you can ",(0,r.jsx)(i.strong,{children:"directly delete the corresponding directories"}),". Similarly, for very simple business projects (such as validation/demonstration projects) that do not require strict use of ",(0,r.jsx)(i.code,{children:"dao/logic/model"})," directories and features, you can ",(0,r.jsx)(i.strong,{children:"directly delete the corresponding directories"})," and implement business logic directly in the ",(0,r.jsx)(i.code,{children:"controller"}),". ",(0,r.jsx)(i.strong,{children:"Everything can be flexibly chosen and assembled by the developer!"})]})}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Directory/File Name"}),(0,r.jsx)(i.th,{children:"Explanation"}),(0,r.jsx)(i.th,{children:"Description"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"api"})}),(0,r.jsx)(i.td,{children:"External Interface"}),(0,r.jsxs)(i.td,{children:["The input/output data structure definition for providing external services. Considering version management needs, it often exists as ",(0,r.jsx)(i.code,{children:"api/xxx/v1..."}),"."]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"hack"})}),(0,r.jsx)(i.td,{children:"Tool Script"}),(0,r.jsxs)(i.td,{children:["Contains project development tools, scripts, etc. For example, configuration for ",(0,r.jsx)(i.code,{children:"CLI"})," tools, and various ",(0,r.jsx)(i.code,{children:"shell/bat"})," script files."]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"internal"})}),(0,r.jsx)(i.td,{children:"Internal Logic"}),(0,r.jsxs)(i.td,{children:["The directory for storing business logic. Hidden visibility to the outside through ",(0,r.jsx)(i.code,{children:"Golang internal"})," feature."]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"\xa0 - cmd"})}),(0,r.jsx)(i.td,{children:"Entry Command"}),(0,r.jsx)(i.td,{children:"Directory for command-line management. Can manage multiple command lines."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"\xa0 - consts"})}),(0,r.jsx)(i.td,{children:"Constant Definitions"}),(0,r.jsx)(i.td,{children:"Defines all constants for the project."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"\xa0 - controller"})}),(0,r.jsx)(i.td,{children:"Interface Handling"}),(0,r.jsx)(i.td,{children:"Entrance/interface layer for receiving and parsing user input parameters."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"\xa0 - dao"})}),(0,r.jsx)(i.td,{children:"Data Access"}),(0,r.jsxs)(i.td,{children:["Data Access Object, an abstract object for interacting with the underlying database containing only the basic ",(0,r.jsx)(i.code,{children:"CRUD"})," methods."]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"\xa0 - logic"})}),(0,r.jsx)(i.td,{children:"Business Encapsulation"}),(0,r.jsx)(i.td,{children:"Management of business logic encapsulation, specific business logic implementation, and encapsulation, often the most complex part of the project."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"\xa0 - model"})}),(0,r.jsx)(i.td,{children:"Structure Model"}),(0,r.jsx)(i.td,{children:"Data structure management module, managing data entity objects and input/output data structure definitions."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"\xa0 \xa0 - do"})}),(0,r.jsx)(i.td,{children:"Domain Object"}),(0,r.jsxs)(i.td,{children:["Used for converting business models and instance models in ",(0,r.jsx)(i.code,{children:"dao"})," data operations, maintained by tools, and cannot be modified by users."]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"\xa0 \xa0 - entity"})}),(0,r.jsx)(i.td,{children:"Data Model"}),(0,r.jsx)(i.td,{children:"Data model is a one-to-one relationship between the model and data collection, maintained by tools, and cannot be modified by users."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"\xa0 - service"})}),(0,r.jsx)(i.td,{children:"Business Interface"}),(0,r.jsxs)(i.td,{children:["Interface definition layer for decoupling business modules. Specific interface implementations are injected in ",(0,r.jsx)(i.code,{children:"logic"}),"."]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"manifest"})}),(0,r.jsx)(i.td,{children:"Delivery Manifest"}),(0,r.jsx)(i.td,{children:"Contains files for program compilation, deployment, operation, and configuration. Common contents are:"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"\xa0 - config"})}),(0,r.jsx)(i.td,{children:"Configuration Management"}),(0,r.jsx)(i.td,{children:"Directory for storing configuration files."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"\xa0 - docker"})}),(0,r.jsx)(i.td,{children:"Image Files"}),(0,r.jsxs)(i.td,{children:["Files related to ",(0,r.jsx)(i.code,{children:"Docker"})," images, script files, etc."]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"\xa0 - deploy"})}),(0,r.jsx)(i.td,{children:"Deployment Files"}),(0,r.jsxs)(i.td,{children:["Files related to deployment. By default, provides a ",(0,r.jsx)(i.code,{children:"Yaml"})," template for ",(0,r.jsx)(i.code,{children:"Kubernetes"})," cluster deployment, managed through ",(0,r.jsx)(i.code,{children:"kustomize"}),"."]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"\xa0 - protobuf"})}),(0,r.jsx)(i.td,{children:"Protocol Files"}),(0,r.jsxs)(i.td,{children:[(0,r.jsx)(i.code,{children:"protobuf"})," protocol definition files used during ",(0,r.jsx)(i.code,{children:"GRPC"})," protocol, compiled protocol files are generated in ",(0,r.jsx)(i.code,{children:"api"})," directory."]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"resource"})}),(0,r.jsx)(i.td,{children:"Static Resources"}),(0,r.jsx)(i.td,{children:"Static resource files. These files can be injected into release files in the form of resource packing/image compilation."})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"go.mod"})}),(0,r.jsx)(i.td,{children:"Dependency Management"}),(0,r.jsxs)(i.td,{children:["Dependency description file using ",(0,r.jsx)(i.code,{children:"Go Module"})," package management."]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"main.go"})}),(0,r.jsx)(i.td,{children:"Entry File"}),(0,r.jsx)(i.td,{children:"Program entry file."})]})]})]}),"\n",(0,r.jsx)(i.h3,{id:"external-interface",children:"External Interface"}),"\n",(0,r.jsxs)(i.p,{children:["The external interface includes two parts: Interface Definition (",(0,r.jsx)(i.code,{children:"api"}),") + Interface Implementation (",(0,r.jsx)(i.code,{children:"controller"}),")."]}),"\n",(0,r.jsxs)(i.p,{children:["The responsibility of the service interface is similar to the ",(0,r.jsx)(i.code,{children:"UI"})," representation layer in three-layer architecture design, responsible for receiving and responding to client inputs and outputs, including filtering, converting, and validating input parameters, maintaining the output data structure, and calling ",(0,r.jsx)(i.code,{children:"service"})," for business logic processing."]}),"\n",(0,r.jsxs)(i.h4,{id:"interface-definition---api",children:["Interface Definition - ",(0,r.jsx)(i.code,{children:"api"})]}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"api"})," package is used for defining data structure inputs and outputs agreed with the client, often closely bound to specific business scenarios."]}),"\n",(0,r.jsxs)(i.h4,{id:"interface-implementation---controller",children:["Interface Implementation - ",(0,r.jsx)(i.code,{children:"controller"})]}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"controller"})," receives the input from the ",(0,r.jsx)(i.code,{children:"api"}),", can directly implement business logic within ",(0,r.jsx)(i.code,{children:"controller"}),", or call one or more ",(0,r.jsx)(i.code,{children:"service"})," packages to implement business logic and encapsulate the execution results into an agreed ",(0,r.jsx)(i.code,{children:"api"})," output data structure."]}),"\n",(0,r.jsx)(i.h3,{id:"business-implementation",children:"Business Implementation"}),"\n",(0,r.jsxs)(i.p,{children:["Business implementation includes two parts: business interface (",(0,r.jsx)(i.code,{children:"service"}),") + business encapsulation (",(0,r.jsx)(i.code,{children:"logic"}),")."]}),"\n",(0,r.jsxs)(i.p,{children:["The responsibility of business implementation is similar to the ",(0,r.jsx)(i.code,{children:"BLL"})," business logic layer in three-layer architecture design, responsible for implementing and encapsulating specific business logic."]}),"\n",(0,r.jsx)(i.admonition,{type:"info",children:(0,r.jsxs)(i.p,{children:["In the following chapters, we will uniformly refer to business implementation as ",(0,r.jsx)(i.code,{children:"service"}),", and note that it actually includes two parts."]})}),"\n",(0,r.jsxs)(i.h4,{id:"business-interface---service",children:["Business Interface - ",(0,r.jsx)(i.code,{children:"service"})]}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"service"})," package is used to decouple business module calls. Business modules often do not directly call the corresponding business module resources to implement business logic but do so by calling ",(0,r.jsx)(i.code,{children:"service"})," interfaces. The ",(0,r.jsx)(i.code,{children:"service"})," layer contains only interface definitions, with specific interface implementations injected into the business modules."]}),"\n",(0,r.jsxs)(i.h4,{id:"business-encapsulation---logic",children:["Business Encapsulation - ",(0,r.jsx)(i.code,{children:"logic"})]}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"logic"})," package is responsible for implementing and encapsulating specific business logic. Codes from various levels of the project do not directly call the business modules of the ",(0,r.jsx)(i.code,{children:"logic"})," layer but do so through the ",(0,r.jsx)(i.code,{children:"service"})," interface layer."]}),"\n",(0,r.jsx)(i.h3,{id:"structure-model",children:"Structure Model"}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"model"})," package serves a role similar to the ",(0,r.jsx)(i.code,{children:"Model"})," definition layer in the three-layer architecture. It only contains the global, common data structure definitions for reference by all business modules in the project."]}),"\n",(0,r.jsxs)(i.h4,{id:"data-model---entity",children:["Data Model - ",(0,r.jsx)(i.code,{children:"entity"})]}),"\n",(0,r.jsx)(i.p,{children:"Defined data structures bound to the data collection, often corresponding one-to-one with data tables."}),"\n",(0,r.jsxs)(i.h4,{id:"business-model---model",children:["Business Model - ",(0,r.jsx)(i.code,{children:"model"})]}),"\n",(0,r.jsx)(i.p,{children:"Common data structure definitions related to business, including most method input and output definitions."}),"\n",(0,r.jsxs)(i.h3,{id:"data-access---dao",children:["Data Access - ",(0,r.jsx)(i.code,{children:"dao"})]}),"\n",(0,r.jsxs)(i.p,{children:["The role of the ",(0,r.jsx)(i.code,{children:"dao"})," package is similar to the ",(0,r.jsx)(i.code,{children:"DAL"})," data access layer in three-layer architecture, responsible for converging all data access."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:n(692274).Z+"",width:"1492",height:"782"})}),"\n",(0,r.jsx)(i.p,{children:"Mapping relationship between three-layer architecture design and framework code layering"}),"\n",(0,r.jsx)(i.h2,{id:"2-request-layer-flow",children:"2. Request Layer Flow"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:n(604399).Z+"",width:"1158",height:"2014"})}),"\n",(0,r.jsx)(i.h3,{id:"cmd",children:"cmd"}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"cmd"})," layer is responsible for guiding the program startup, its significant tasks being initialization logic, registering route objects, starting the ",(0,r.jsx)(i.code,{children:"server"})," listener, and blocking the program operation until the ",(0,r.jsx)(i.code,{children:"server"})," exits."]}),"\n",(0,r.jsx)(i.h3,{id:"api",children:"api"}),"\n",(0,r.jsxs)(i.p,{children:["The upper layer ",(0,r.jsx)(i.code,{children:"server"})," service receives client requests, converts them to ",(0,r.jsx)(i.code,{children:"Req"})," receiving objects defined in ",(0,r.jsx)(i.code,{children:"api"}),", performs request parameter-to-",(0,r.jsx)(i.code,{children:"Req"})," object attribute type conversions, executes basic validation bound to ",(0,r.jsx)(i.code,{children:"Req"})," objects, and hands over the ",(0,r.jsx)(i.code,{children:"Req"})," request objects to the ",(0,r.jsx)(i.code,{children:"controller"})," layer."]}),"\n",(0,r.jsx)(i.h3,{id:"controller",children:"controller"}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"controller"})," layer is responsible for receiving ",(0,r.jsx)(i.code,{children:"Req"})," request objects, conducting some business logic validations, can directly implement business logic within ",(0,r.jsx)(i.code,{children:"controller"}),", or call one or more ",(0,r.jsx)(i.code,{children:"services"})," to implement business logic, and encapsulate results into the agreed ",(0,r.jsx)(i.code,{children:"Res"})," data structure objects for return."]}),"\n",(0,r.jsx)(i.h3,{id:"model",children:"model"}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"model"})," layer manages all common business models."]}),"\n",(0,r.jsx)(i.h3,{id:"service",children:"service"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"service"})," is an interface layer used for business module decoupling. ",(0,r.jsx)(i.code,{children:"service"})," contains no specific business logic implementation, relying on the ",(0,r.jsx)(i.code,{children:"logic"})," layer for injection of specific business logic."]}),"\n",(0,r.jsx)(i.h3,{id:"logic",children:"logic"}),"\n",(0,r.jsxs)(i.p,{children:["The business logic of the ",(0,r.jsx)(i.code,{children:"logic"})," layer needs to perform data operations by calling ",(0,r.jsx)(i.code,{children:"dao"}),". When calling ",(0,r.jsx)(i.code,{children:"dao"}),", ",(0,r.jsx)(i.code,{children:"do"})," data structure objects need to be passed for delivering query conditions and input data. After ",(0,r.jsx)(i.code,{children:"dao"})," execution, ",(0,r.jsx)(i.code,{children:"Entity"})," data models return data results to the ",(0,r.jsx)(i.code,{children:"service"})," layer."]}),"\n",(0,r.jsx)(i.h3,{id:"dao",children:"dao"}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"dao"})," layer interacts with the underlying real database through the ",(0,r.jsx)(i.code,{children:"ORM"})," abstraction component of the framework."]}),"\n",(0,r.jsx)(i.h2,{id:"3-faq",children:"3. FAQ"}),"\n",(0,r.jsxs)(i.h3,{id:"does-the-framework-support-common-mvc-development-model",children:["Does the framework support common ",(0,r.jsx)(i.code,{children:"MVC"})," development model"]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Of course!"})}),"\n",(0,r.jsxs)(i.p,{children:["As a foundational development framework with modular design, ",(0,r.jsx)(i.code,{children:"GoFrame"})," does not constrain code design patterns and provides a powerful template engine core component for rapid template rendering development commonly seen in ",(0,r.jsx)(i.code,{children:"MVC"})," mode. Compared to the ",(0,r.jsx)(i.code,{children:"MVC"})," development model, we recommend using the three-layer architecture design model in complex business scenarios."]}),"\n",(0,r.jsxs)(i.h3,{id:"how-to-maintain-when-api-and-model-layers-have-duplicate-data-structures",children:["How to maintain when ",(0,r.jsx)(i.code,{children:"api"})," and ",(0,r.jsx)(i.code,{children:"model"})," layers have duplicate data structures"]}),"\n",(0,r.jsxs)(i.p,{children:["Data structures defined in ",(0,r.jsx)(i.code,{children:"api"})," are ",(0,r.jsx)(i.strong,{children:"for external use"}),", bound to specific business scenarios (such as specific page interaction logic, single interface function), and data structures are pre-set by upper-layer display layers; data structures defined in ",(0,r.jsx)(i.code,{children:"model"})," are for ",(0,r.jsx)(i.strong,{children:"internal use only"}),", allowing for internal modifications without affecting external ",(0,r.jsx)(i.code,{children:"api"})," interface compatibility."]}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsxs)(i.strong,{children:["Note that data structures in ",(0,r.jsx)(i.code,{children:"model"})," should not be directly exposed for external use"]}),", and the framework's project design deliberately places the ",(0,r.jsx)(i.code,{children:"model"})," directory under the ",(0,r.jsx)(i.code,{children:"internal"})," directory. Nor should alias type definitions of ",(0,r.jsx)(i.code,{children:"model"})," data structures be provided in the ",(0,r.jsx)(i.code,{children:"api"})," layer for external access. Once the ",(0,r.jsx)(i.code,{children:"model"})," data structure is applied to the ",(0,r.jsx)(i.code,{children:"api"})," layer, changes to internal ",(0,r.jsx)(i.code,{children:"model"})," data structures will directly affect ",(0,r.jsx)(i.code,{children:"api"})," interface compatibility."]}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsxs)(i.strong,{children:["If duplicate data structures (or even constants, enumerations) appear in both, it is recommended to define data structures at the ",(0,r.jsx)(i.code,{children:"api"})," layer"]}),". Internal service logic can directly access data structures at the ",(0,r.jsx)(i.code,{children:"api"})," layer. The ",(0,r.jsx)(i.code,{children:"model"})," layer's data structures can also directly reference those from the ",(0,r.jsx)(i.code,{children:"api"})," layer, but not vice versa."]}),"\n",(0,r.jsx)(i.p,{children:"Let's see an example for better understanding:"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.img,{src:n(173616).Z+"",width:"2470",height:"1442"}),(0,r.jsx)(i.img,{src:n(111986).Z+"",width:"2470",height:"1442"})]}),"\n",(0,r.jsxs)(i.h3,{id:"how-to-clearly-define-and-manage-the-layering-responsibilities-between-service-and-controller",children:["How to clearly define and manage the layering responsibilities between ",(0,r.jsx)(i.code,{children:"service"})," and ",(0,r.jsx)(i.code,{children:"controller"})]}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"controller"})," layer handles ",(0,r.jsx)(i.code,{children:"Req/Res"})," external interface requests. It is responsible for receiving, validating request parameters, can directly implement business logic within ",(0,r.jsx)(i.code,{children:"controller"}),", or call ",(0,r.jsx)(i.strong,{children:"one or more"})," ",(0,r.jsx)(i.code,{children:"services"})," to implement business logic and encapsulate execution results into the agreed ",(0,r.jsx)(i.code,{children:"api"})," output data structures for return. The ",(0,r.jsx)(i.code,{children:"service"})," layer processes ",(0,r.jsx)(i.code,{children:"Input/Output"})," internal method calls. It is responsible for internal ",(0,r.jsx)(i.strong,{children:"reusable"})," business logic encapsulation, with methods often being more granular."]}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsxs)(i.strong,{children:["Typically, when developing an interface, only implementing the business logic in the ",(0,r.jsx)(i.code,{children:"controller"})," layer is needed, and when there is repetitive code logic, it is abstractly settled into the ",(0,r.jsx)(i.code,{children:"service"})," layer from various ",(0,r.jsx)(i.code,{children:"controller"})," interfaces"]}),". If ",(0,r.jsx)(i.code,{children:"Req"})," objects are directly passed from the ",(0,r.jsx)(i.code,{children:"controller"})," layer to ",(0,r.jsx)(i.code,{children:"service"}),", and ",(0,r.jsx)(i.code,{children:"service"})," directly returns ",(0,r.jsx)(i.code,{children:"Res"})," data structure objects, this approach is coupled with external interfaces and only serves external interface services, making it difficult to reuse, thus increasing technical debt costs."]}),"\n",(0,r.jsxs)(i.h3,{id:"how-to-clearly-define-and-manage-the-layering-responsibilities-between-service-and-dao",children:["How to clearly define and manage the layering responsibilities between ",(0,r.jsx)(i.code,{children:"service"})," and ",(0,r.jsx)(i.code,{children:"dao"})]}),"\n",(0,r.jsx)(i.p,{children:"This is a classic question."}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Pain Point:"})}),"\n",(0,r.jsxs)(i.p,{children:["Commonly, developers encapsulate ",(0,r.jsx)(i.strong,{children:"business logic related to data"})," within ",(0,r.jsx)(i.code,{children:"dao"})," code layer while ",(0,r.jsx)(i.code,{children:"service"})," code layer only makes simple ",(0,r.jsx)(i.code,{children:"dao"})," calls. This approach can make the ",(0,r.jsx)(i.code,{children:"dao"})," layer, originally meant to maintain data, more burdensome, while the business logic ",(0,r.jsx)(i.code,{children:"service"})," layer code appears light. Developers are confused, questioning where to put their business logic code, in ",(0,r.jsx)(i.code,{children:"dao"})," or ",(0,r.jsx)(i.code,{children:"service"}),"?"]}),"\n",(0,r.jsxs)(i.p,{children:["Often, business logic mostly involves ",(0,r.jsx)(i.code,{children:"CRUD"})," operations on data, causing nearly all business logic to gradually accumulate in the ",(0,r.jsx)(i.code,{children:"dao"})," layer. Business logic changes frequently necessitate modifications to ",(0,r.jsx)(i.code,{children:"dao"})," layer code. For instance: for data query requirements, initially it may seem like a simple logic to place code in ",(0,r.jsx)(i.code,{children:"dao"}),", but as query requirements increase or change complexity, inevitably, existing ",(0,r.jsx)(i.code,{children:"dao"})," code requires further maintenance and modifications, possibly leading to updates in ",(0,r.jsx)(i.code,{children:"service"})," code as well. Originally limited to ",(0,r.jsx)(i.code,{children:"service"})," layer business logic code responsibility becomes unclear and heavily coupled with ",(0,r.jsx)(i.code,{children:"dao"})," layer code responsibilities, leading to increased development and maintenance costs later in the project."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Suggestion:"})}),"\n",(0,r.jsxs)(i.p,{children:["Our suggestion: ",(0,r.jsx)(i.code,{children:"dao"})," layer code should strive to maintain general applicability, with most scenarios not requiring additional methods, instead assembling with some generalized chain operation methods. Business logic, including what appears to be simple data operation logic, should be encapsulated within ",(0,r.jsx)(i.code,{children:"service"}),". ",(0,r.jsx)(i.code,{children:"service"})," contains multiple business modules, with each module managing its ",(0,r.jsx)(i.code,{children:"dao"})," object independently. Ideally, ",(0,r.jsx)(i.code,{children:"service"})," communicates data through method calls between ",(0,r.jsx)(i.code,{children:"services"})," rather than arbitrarily calling ",(0,r.jsx)(i.code,{children:"dao"})," objects of other ",(0,r.jsx)(i.code,{children:"service"})," modules."]}),"\n",(0,r.jsxs)(i.h3,{id:"why-use-the-internal-directory-to-contain-business-code",children:["Why use the ",(0,r.jsx)(i.code,{children:"internal"})," directory to contain business code"]}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"internal"})," directory is a feature unique to ",(0,r.jsx)(i.code,{children:"Golang"})," language that prevents references from directories outside the peer directory. The purpose of this directory in business projects is to avoid unlimited unrestricted access between multiple projects if there are multiple sub-projects (especially in large repository management mode), making it difficult to prevent coupling of packages across different projects."]})]})}function h(e={}){let{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},692274:function(e,i,n){n.d(i,{Z:function(){return s}});let s=n.p+"assets/images/1e1bb98778823124dc5bf35c57e8f4cb-8db671a4ec3b5aa9695638f0da758a3a.png"},111986:function(e,i,n){n.d(i,{Z:function(){return s}});let s=n.p+"assets/images/36794a54e02c2be6c0edbcf07bb8821a-fb277a7ce471fac6223245b79094a979.png"},173616:function(e,i,n){n.d(i,{Z:function(){return s}});let s=n.p+"assets/images/4d95fb64e06bb72a5456fb684704b891-9f08ea34314b332e9c365d35f050eca9.png"},604399:function(e,i,n){n.d(i,{Z:function(){return s}});let s=n.p+"assets/images/df7dd9a93cb541a8ca126b5b051002ab-24a5be32553691527485981a6f24f829.png"},250065:function(e,i,n){n.d(i,{Z:function(){return o},a:function(){return c}});var s=n(667294);let r={},t=s.createContext(r);function c(e){let i=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(t.Provider,{value:i},e.children)}}}]);