"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["77759"],{738912:function(e,n,t){t.r(n),t.d(n,{metadata:()=>o,contentTitle:()=>c,default:()=>m,assets:()=>a,toc:()=>l,frontMatter:()=>s});var o=JSON.parse('{"id":"course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1/2.2.\u4E1A\u52A1\u903B\u8F91","title":"2.2 Business Logic","description":"Detailed explanation of business logic implementation in the user service, including core functionality code implementation and best practices for user registration and management.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1/2.2.\u4E1A\u52A1\u903B\u8F91.md","sourceDirName":"course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1","slug":"/course/proxima-book/user-logic","permalink":"/en/course/proxima-book/user-logic","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1/2.2.\u4E1A\u52A1\u903B\u8F91.md","tags":[],"version":"current","lastUpdatedBy":"oldme","lastUpdatedAt":1734398801000,"frontMatter":{"title":"2.2 Business Logic","hide_title":true,"slug":"/course/proxima-book/user-logic","keywords":["GoFrame","business logic","user registration","account management","microservices logic","user service implementation"],"description":"Detailed explanation of business logic implementation in the user service, including core functionality code implementation and best practices for user registration and management."},"sidebar":"courseProximaBookSidebar","previous":{"title":"2.1 Prerequisites","permalink":"/en/course/proxima-book/user-overview"},"next":{"title":"2.3 Protocol Files","permalink":"/en/course/proxima-book/user-protocol"}}'),i=t("785893"),r=t("250065");let s={title:"2.2 Business Logic",hide_title:!0,slug:"/course/proxima-book/user-logic",keywords:["GoFrame","business logic","user registration","account management","microservices logic","user service implementation"],description:"Detailed explanation of business logic implementation in the user service, including core functionality code implementation and best practices for user registration and management."},c=void 0,a={},l=[];function u(e){let n={code:"code",em:"em",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Like monolithic services, microservice business logic is stored in the ",(0,i.jsx)(n.code,{children:"*/internal/logic"})," directory. As we're all experienced developers, I'll keep this simple and provide a basic example."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"app/user/internal/logic/account/account.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package account  \n  \nimport (  \n    "context"  \n  \n    "github.com/gogf/gf/v2/os/gtime"\n    "proxima/app/user/internal/dao"\n    "proxima/app/user/internal/model/entity"\n)  \n  \nfunc Register(ctx context.Context) (id int, err error) {  \n    return 1, nil  \n}  \n  \nfunc Login(ctx context.Context) (token string, err error) {  \n    return "I am token", nil\n}  \n  \n// Info get user info\nfunc Info(ctx context.Context, token string) (user *entity.Users, err error) {  \n    return &entity.Users{  \n       Id:        1,  \n       Username:  "oldme",  \n       Password:  "123456",  \n       Email:     "tyyn1022@gmail.com",  \n       CreatedAt: gtime.New("2024-12-05 22:00:00"),  \n       UpdatedAt: gtime.New("2024-12-05 22:00:00"),  \n    }, nil  \n}\n'})})]})}function m(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return c},a:function(){return s}});var o=t(667294);let i={},r=o.createContext(i);function s(e){let n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);