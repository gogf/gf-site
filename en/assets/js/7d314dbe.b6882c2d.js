"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["74412"],{599193:function(e,n,t){t.r(n),t.d(n,{metadata:()=>r,contentTitle:()=>o,default:()=>u,assets:()=>d,toc:()=>l,frontMatter:()=>s});var r=JSON.parse('{"id":"docs/WEB\u670D\u52A1\u5F00\u53D1/HTTPClient/HTTPClient-\u62E6\u622A\u5668\u4E2D\u95F4\u4EF6","title":"HTTPClient - Middleware","description":"The HTTPClient interceptor/middleware feature in the GoFrame framework can be used for global request interception and parameter validation. Through middleware, developers can insert custom logic in the pre and post phases of requests, modify submitted parameters or returned parameters, implement signature parameter injection, and more, ensuring the security of API parameters.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/WEB\u670D\u52A1\u5F00\u53D1/HTTPClient/HTTPClient-\u62E6\u622A\u5668\u4E2D\u95F4\u4EF6.md","sourceDirName":"docs/WEB\u670D\u52A1\u5F00\u53D1/HTTPClient","slug":"/docs/web/http-client-middleware","permalink":"/en/docs/web/http-client-middleware","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/WEB\u670D\u52A1\u5F00\u53D1/HTTPClient/HTTPClient-\u62E6\u622A\u5668\u4E2D\u95F4\u4EF6.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732451468000,"sidebarPosition":8,"frontMatter":{"slug":"/docs/web/http-client-middleware","title":"HTTPClient - Middleware","sidebar_position":8,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","HTTPClient","Interceptor","Middleware","Client Request","Parameter Validation","Signature Generation","API Security","Request Interception"],"description":"The HTTPClient interceptor/middleware feature in the GoFrame framework can be used for global request interception and parameter validation. Through middleware, developers can insert custom logic in the pre and post phases of requests, modify submitted parameters or returned parameters, implement signature parameter injection, and more, ensuring the security of API parameters."},"sidebar":"mainSidebar","previous":{"title":"HTTPClient - Proxy","permalink":"/en/docs/web/http-client-proxy"},"next":{"title":"HTTPClient - FAQ","permalink":"/en/docs/web/http-client-faq"}}'),i=t("785893"),a=t("250065");let s={slug:"/docs/web/http-client-middleware",title:"HTTPClient - Middleware",sidebar_position:8,hide_title:!0,keywords:["GoFrame","GoFrame Framework","HTTPClient","Interceptor","Middleware","Client Request","Parameter Validation","Signature Generation","API Security","Request Interception"],description:"The HTTPClient interceptor/middleware feature in the GoFrame framework can be used for global request interception and parameter validation. Through middleware, developers can insert custom logic in the pre and post phases of requests, modify submitted parameters or returned parameters, implement signature parameter injection, and more, ensuring the security of API parameters."},o=void 0,d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Types of Middleware",id:"types-of-middleware",level:2},{value:"Pre-middleware",id:"pre-middleware",level:3},{value:"Post-middleware",id:"post-middleware",level:3},{value:"Usage Example",id:"usage-example",level:2},{value:"Server",id:"server",level:3},{value:"Client",id:"client",level:3},{value:"Run Test",id:"run-test",level:3}];function c(e){let n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"HTTPClient"})," supports a powerful interceptor/middleware feature, which makes global request interception and injection for the client possible, such as modifying/injecting submitted parameters, modifying/injecting returned parameters, client-based parameter validation, etc. Middleware injection is implemented through the following method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (c *Client) Use(handlers ...HandlerFunc) *Client\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In middleware, execute the next step of the process through the ",(0,i.jsx)(n.code,{children:"Next"})," method, which is defined as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (c *Client) Next(req *http.Request) (*Response, error)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"types-of-middleware",children:"Types of Middleware"}),"\n",(0,i.jsxs)(n.p,{children:["The middleware feature in ",(0,i.jsx)(n.code,{children:"HTTPClient"})," is similar to the middleware feature in ",(0,i.jsx)(n.code,{children:"HTTPServer"}),", and is also divided into pre-middleware and post-middleware."]}),"\n",(0,i.jsx)(n.h3,{id:"pre-middleware",children:"Pre-middleware"}),"\n",(0,i.jsxs)(n.p,{children:["Processing logic is before the ",(0,i.jsx)(n.code,{children:"Next"})," method, formatted as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"c := g.Client()\nc.Use(func(c *gclient.Client, r *http.Request) (resp *gclient.Response, err error) {\n    // Custom processing logic\n    resp, err = c.Next(r)\n    return resp, err\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"post-middleware",children:"Post-middleware"}),"\n",(0,i.jsxs)(n.p,{children:["Processing logic is after the ",(0,i.jsx)(n.code,{children:"Next"})," method, formatted as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"c := g.Client()\nc.Use(func(c *gclient.Client, r *http.Request) (resp *gclient.Response, err error) {\n    resp, err = c.Next(r)\n    // Custom processing logic\n    return resp, err\n})\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(n.p,{children:"Let's use a code example to better illustrate usage. This example adds an interceptor to the client, injecting custom additional parameters into the submitted JSON data. These additional parameters implement signature generation for the submitted parameters, essentially achieving a simple API parameter security validation."}),"\n",(0,i.jsx)(n.h3,{id:"server",children:"Server"}),"\n",(0,i.jsxs)(n.p,{children:["The server logic is straightforward, it parses the client's submitted ",(0,i.jsx)(n.code,{children:"JSON"})," parameters as a ",(0,i.jsx)(n.code,{children:"map"})," and then constructs a ",(0,i.jsx)(n.code,{children:"JSON"})," string to return to the client."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Often, the server also needs to perform signature validation through middleware, but here I've taken a shortcut and directly returned the data submitted by the client. Please understand the documentation maintainer\uD83D\uDE38."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\nfunc main() {\n    s := g.Server()\n    s.Group("/", func(group *ghttp.RouterGroup) {\n        group.ALL("/", func(r *ghttp.Request) {\n            r.Response.Write(r.GetMap())\n        })\n    })\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"client",children:"Client"}),"\n",(0,i.jsx)(n.p,{children:"The client logic implements basic client parameter submission, interceptor injection, signature-related parameter injection, and signature parameter generation."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "bytes"\n    "fmt"\n    "io/ioutil"\n    "net/http"\n\n    "github.com/gogf/gf/v2/container/garray"\n    "github.com/gogf/gf/v2/crypto/gmd5"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/internal/json"\n    "github.com/gogf/gf/v2/net/gclient"\n    "github.com/gogf/gf/v2/os/gctx"\n    "github.com/gogf/gf/v2/os/gtime"\n    "github.com/gogf/gf/v2/util/gconv"\n    "github.com/gogf/gf/v2/util/guid"\n    "github.com/gogf/gf/v2/util/gutil"\n)\n\nconst (\n    appId     = "123"\n    appSecret = "456"\n)\n\n// Inject unified API signature parameters\nfunc injectSignature(jsonContent []byte) []byte {\n    var m map[string]interface{}\n    _ = json.Unmarshal(jsonContent, &m)\n    if len(m) > 0 {\n        m["appid"] = appId\n        m["nonce"] = guid.S()\n        m["timestamp"] = gtime.Timestamp()\n        var (\n            keyArray   = garray.NewSortedStrArrayFrom(gutil.Keys(m))\n            sigContent string\n        )\n        keyArray.Iterator(func(k int, v string) bool {\n            sigContent += v\n            sigContent += gconv.String(m[v])\n            return true\n        })\n        m["signature"] = gmd5.MustEncryptString(gmd5.MustEncryptString(sigContent) + appSecret)\n        jsonContent, _ = json.Marshal(m)\n    }\n    return jsonContent\n}\n\nfunc main() {\n    c := g.Client()\n    c.Use(func(c *gclient.Client, r *http.Request) (resp *gclient.Response, err error) {\n        bodyBytes, _ := ioutil.ReadAll(r.Body)\n        if len(bodyBytes) > 0 {\n            // Inject signature-related parameters, modify the original submission parameters of the Request\n            bodyBytes = injectSignature(bodyBytes)\n            r.Body = ioutil.NopCloser(bytes.NewBuffer(bodyBytes))\n            r.ContentLength = int64(len(bodyBytes))\n        }\n        return c.Next(r)\n    })\n    content := c.ContentJson().PostContent(gctx.New(), "http://127.0.0.1:8199/", g.Map{\n        "name": "goframe",\n        "site": "https://goframe.org",\n    })\n    fmt.Println(content)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"run-test",children:"Run Test"}),"\n",(0,i.jsx)(n.p,{children:"First, run the server:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ go run server.go\n\n  SERVER  | DOMAIN  | ADDRESS | METHOD | ROUTE |      HANDLER      | MIDDLEWARE\n----------|---------|---------|--------|-------|-------------------|-------------\n  default | default | :8199   | ALL    | /     | main.main.func1.1 |\n----------|---------|---------|--------|-------|-------------------|-------------\n\n2021-05-18 09:23:41.865 97906: http server started listening on [:8199]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then, run the client:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'$ go run client.go\n{"appid":"123","name":"goframe","nonce":"12vd8tx23l6cbfz9k59xehk1002pixfo","signature":"578a90b67bdc63d551d6a18635307ba2","site":"https://goframe.org","timestamp":1621301076}\n$\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can see that the server received parameters with several additional items, including ",(0,i.jsx)(n.code,{children:"appid/nonce/timestamp/signature"}),", which are often parameters required by the signature verification algorithm."]})]})}function u(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return s}});var r=t(667294);let i={},a=r.createContext(i);function s(e){let n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);