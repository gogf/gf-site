"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["78358"],{558222:function(e,n,r){r.r(n),r.d(n,{metadata:()=>t,contentTitle:()=>d,default:()=>u,assets:()=>a,toc:()=>l,frontMatter:()=>s});var t=JSON.parse('{"id":"course/starbook/\u7B2C\u56DB\u7AE0-\u5355\u8BCD\u7BA1\u7406/4.5.\u5355\u8BCD\u5206\u9875\u5217\u8868","title":"4.5 Word Pagination","description":"Retrieve a paginated list of words using the GET method with fuzzy search functionality. Define a structure to store word fields, including ID, word, definition, and proficiency level. Write Logic in the GoFrame framework for querying and paginating data operations. Invoke Logic through the Controller to achieve data retrieval and return, supporting comprehensive interface testing.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/course/starbook/\u7B2C\u56DB\u7AE0-\u5355\u8BCD\u7BA1\u7406/4.5.\u5355\u8BCD\u5206\u9875\u5217\u8868.md","sourceDirName":"course/starbook/\u7B2C\u56DB\u7AE0-\u5355\u8BCD\u7BA1\u7406","slug":"/course/starbook/word-list","permalink":"/en/course/starbook/word-list","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/course/starbook/\u7B2C\u56DB\u7AE0-\u5355\u8BCD\u7BA1\u7406/4.5.\u5355\u8BCD\u5206\u9875\u5217\u8868.md","tags":[],"version":"current","lastUpdatedBy":"oldme","lastUpdatedAt":1735822233000,"frontMatter":{"title":"4.5 Word Pagination","hide_title":true,"slug":"/course/starbook/word-list","keywords":["GoFrame","Word Query","API Pagination","Fuzzy Search","Data Structure","Word List","Interface Testing","GoFrame Framework","API Request","Data Processing"],"description":"Retrieve a paginated list of words using the GET method with fuzzy search functionality. Define a structure to store word fields, including ID, word, definition, and proficiency level. Write Logic in the GoFrame framework for querying and paginating data operations. Invoke Logic through the Controller to achieve data retrieval and return, supporting comprehensive interface testing."},"sidebar":"courseStarBookSidebar","previous":{"title":"4.4 Edit Word","permalink":"/en/course/starbook/word-update"},"next":{"title":"4.6 Word Detail","permalink":"/en/course/starbook/word-detail"}}'),i=r("785893"),o=r("250065");let s={title:"4.5 Word Pagination",hide_title:!0,slug:"/course/starbook/word-list",keywords:["GoFrame","Word Query","API Pagination","Fuzzy Search","Data Structure","Word List","Interface Testing","GoFrame Framework","API Request","Data Processing"],description:"Retrieve a paginated list of words using the GET method with fuzzy search functionality. Define a structure to store word fields, including ID, word, definition, and proficiency level. Write Logic in the GoFrame framework for querying and paginating data operations. Invoke Logic through the Controller to achieve data retrieval and return, supporting comprehensive interface testing."},d=void 0,a={},l=[{value:"Add Api",id:"add-api",level:2},{value:"Write Logic",id:"write-logic",level:2},{value:"Controller Calls Logic",id:"controller-calls-logic",level:2},{value:"Interface Testing",id:"interface-testing",level:2}];function c(e){let n={code:"code",em:"em",h2:"h2",hr:"hr",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Retrieve a paginated list of words using the ",(0,i.jsx)(n.code,{children:"GET"})," method, providing some input parameters:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field Name"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"json"}),(0,i.jsx)(n.th,{children:"valid"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Word"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'json:"word"'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"length:1,100"})}),(0,i.jsx)(n.td,{children:"Fuzzy search word"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Page"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"int"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'json:"page"'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"min:1"})}),(0,i.jsx)(n.td,{children:"Page number, default 1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Size"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"int"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'json:"size"'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"between:1,100"})}),(0,i.jsx)(n.td,{children:"Number per page, default 10"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"add-api",children:"Add Api"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"First, define a structure to store the fields of a word."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"api/words/v1/words_struct.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package v1  \n  \nimport "github.com/gogf/gf/v2/os/gtime"  \n  \ntype List struct {  \n    Id               uint        `json:"id"`  \n    Word             string      `json:"word"`  \n    Definition       string      `json:"definition"`  \n    ProficiencyLevel uint        `json:"proficiencyLevel"`\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.code,{children:"ListRes"}),", return a slice of ",(0,i.jsx)(n.code,{children:"List"}),", representing the word list, and ",(0,i.jsx)(n.code,{children:"Total"})," indicates the total number of all words for pagination operations at the frontend."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"api/words/v1/words.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'...\n\ntype ListReq struct {  \n    g.Meta `path:"words" method:"get" sm:"List" tags:"Word"`  \n    Word   string `json:"word" v:"length:1,100" dc:"Fuzzy search word"`  \n    Page   int    `json:"page" v:"min:1" dc:"Page number, default 1"`  \n    Size   int    `json:"size" v:"between:1,100" dc:"Number per page, default 10"`  \n}  \n  \ntype ListRes struct {  \n    List  []List `json:"list"`  \n    Total uint   `json:"total"`  \n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"write-logic",children:"Write Logic"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["First, define a ",(0,i.jsx)(n.code,{children:"Query"})," structure to be used as input for the query list, strictly implementing redefined data structures at each layer."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"internal/model/words.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"...\n\ntype WordQuery struct {  \n    Uid  uint  \n    Word string  \n    Page int  \n    Size int  \n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"internal/logic/words/words.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'...\n\nfunc (w *Words) List(ctx context.Context, query *model.WordQuery) (list []entity.Words, total uint, err error) {  \n    if query == nil {  \n       query = &model.WordQuery{}  \n    }  \n    // Handling initial values for queries  \n    if query.Page == 0 {  \n       query.Page = 1  \n    }  \n    if query.Size == 0 {  \n       query.Size = 15  \n    }  \n  \n    // Compose the query chain  \n    db := dao.Words.Ctx(ctx)  \n    if query.Uid > 0 {  \n       db = db.Where("uid", query.Uid)  \n    }  \n  \n    // Fuzzy search  \n    if len(query.Word) != 0 {  \n       db = db.WhereLike("word", fmt.Sprintf("%%%s%%", query.Word))  \n    }  \n    db = db.Order("created_at desc, id desc").Page(query.Page, query.Size)  \n  \n    data, totalInt, err := db.AllAndCount(true)  \n    if err != nil {  \n       return  \n    }  \n  \n    list = []entity.Words{}  \n    _ = data.Structs(&list)  \n    total = uint(totalInt)  \n  \n    return  \n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The above code uses ",(0,i.jsx)(n.code,{children:'db.WhereLike("word", fmt.Sprintf("%%%s%%", query.Word))'}),", which means fuzzy search. It generates a ",(0,i.jsx)(n.code,{children:"word LIKE '%{word}%'"})," clause."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"AllAndCount"})," is used to query the data record list and total number simultaneously, commonly used in pagination scenarios to simplify pagination query logic."]}),"\n",(0,i.jsx)(n.h2,{id:"controller-calls-logic",children:"Controller Calls Logic"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"internal/controller/words/words_v1_list.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package words  \n  \nimport (  \n    "context"  \n  \n    "star/api/words/v1"\n    "star/internal/model"\n)  \n  \nfunc (c *ControllerV1) List(ctx context.Context, req *v1.ListReq) (res *v1.ListRes, err error) {  \n    uid, err := c.users.GetUid(ctx)  \n    if err != nil {  \n       return nil, err  \n    }  \n  \n    query := &model.WordQuery{  \n       Uid:  uid,  \n       Word: req.Word,  \n       Page: req.Page,  \n       Size: req.Size,  \n    }  \n    wordList, total, err := c.words.List(ctx, query)  \n    if err != nil {  \n       return nil, err  \n    }  \n  \n    var list []v1.List  \n    for _, v := range wordList {  \n       list = append(list, v1.List{  \n          Id:               v.Id,  \n          Word:             v.Word,  \n          Definition:       v.Definition,  \n          ProficiencyLevel: model.ProficiencyLevel(v.ProficiencyLevel),  \n       })  \n    }  \n  \n    return &v1.ListRes{  \n       List:  list,  \n       Total: total,  \n    }, nil  \n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"interface-testing",children:"Interface Testing"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'$ curl -X GET http://127.0.0.1:8000/v1/words \\\n     -H "Authorization: eyJhbGci...5U" \\\n     -H "Content-Type: application/json" \\\n\n{\n    "code": 0,\n    "message": "",\n    "data": {\n        "list": [\n            {\n                "id": 1,\n                "word": "example_update",\n                "definition": "A representative form or pattern.",\n                "proficiencyLevel": 3\n            }\n        ],\n        "total": 1\n    }\n}\n'})})]})}function u(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return d},a:function(){return s}});var t=r(667294);let i={},o=t.createContext(i);function s(e){let n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);