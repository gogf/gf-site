"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["69961"],{308145:function(e,n,t){t.r(n),t.d(n,{metadata:()=>i,contentTitle:()=>s,default:()=>l,assets:()=>d,toc:()=>c,frontMatter:()=>a});var i=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u94FE\u5F0F\u64CD\u4F5C/ORM\u94FE\u5F0F\u64CD\u4F5C-\u6570\u636E\u67E5\u8BE2/ORM\u67E5\u8BE2-ScanAndCount","title":"Model Query - ScanAndCount","description":"When using the GoFrame framework for ORM queries, simplify pagination query scenarios. With the ScanAndCount method, data queries and total count queries can be completed in a single operation, effectively reducing code redundancy and improving development efficiency. Suitable for situations where both data and its total count need to be obtained, such as pagination queries.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u94FE\u5F0F\u64CD\u4F5C/ORM\u94FE\u5F0F\u64CD\u4F5C-\u6570\u636E\u67E5\u8BE2/ORM\u67E5\u8BE2-ScanAndCount.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u94FE\u5F0F\u64CD\u4F5C/ORM\u94FE\u5F0F\u64CD\u4F5C-\u6570\u636E\u67E5\u8BE2","slug":"/docs/core/gdb-chaining-query-scan-and-count","permalink":"/en/docs/core/gdb-chaining-query-scan-and-count","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u94FE\u5F0F\u64CD\u4F5C/ORM\u94FE\u5F0F\u64CD\u4F5C-\u6570\u636E\u67E5\u8BE2/ORM\u67E5\u8BE2-ScanAndCount.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":4,"frontMatter":{"slug":"/docs/core/gdb-chaining-query-scan-and-count","title":"Model Query - ScanAndCount","sidebar_position":4,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","ORM Query","ScanAndCount","Pagination Query","Limit","Page","Data Query","Total Count Query","Chaining Query"],"description":"When using the GoFrame framework for ORM queries, simplify pagination query scenarios. With the ScanAndCount method, data queries and total count queries can be completed in a single operation, effectively reducing code redundancy and improving development efficiency. Suitable for situations where both data and its total count need to be obtained, such as pagination queries."},"sidebar":"mainSidebar","previous":{"title":"Model Query - Scan","permalink":"/en/docs/core/gdb-chaining-query-scan"},"next":{"title":"Model Query - Join","permalink":"/en/docs/core/gdb-chaining-query-join"}}'),o=t("785893"),r=t("250065");let a={slug:"/docs/core/gdb-chaining-query-scan-and-count",title:"Model Query - ScanAndCount",sidebar_position:4,hide_title:!0,keywords:["GoFrame","GoFrame Framework","ORM Query","ScanAndCount","Pagination Query","Limit","Page","Data Query","Total Count Query","Chaining Query"],description:"When using the GoFrame framework for ORM queries, simplify pagination query scenarios. With the ScanAndCount method, data queries and total count queries can be completed in a single operation, effectively reducing code redundancy and improving development efficiency. Suitable for situations where both data and its total count need to be obtained, such as pagination queries."},s=void 0,d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Notes",id:"notes",level:2}];function u(e){let n={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(n.p,{children:["In pagination query scenarios, we often need to first call the ",(0,o.jsx)(n.code,{children:"Scan"})," method combined with the ",(0,o.jsx)(n.code,{children:"Limit/Page"})," chaining operation method to query the list, and then remove the ",(0,o.jsx)(n.code,{children:"Limit/Page"})," chaining operation method to query the total count. This process is quite cumbersome, so from version ",(0,o.jsx)(n.code,{children:"v2.5.0"}),", the framework provides the ",(0,o.jsx)(n.code,{children:"ScanAndCount"})," method to simplify pagination query scenarios."]}),"\n",(0,o.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"The sample code is derived from business project cases and is for reference and understanding only, it cannot run independently."})}),"\n",(0,o.jsx)(n.p,{children:"Using traditional pagination query logic code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"// GetList retrieves the user list of the instance.\nfunc (s sUserInfo) GetList(ctx context.Context, in model.UserInfoGetListInput) (items []entity.UserInfo, total int, err error) {\n    items = make([]entity.UserInfo, 0)\n    orm := dao.UserInfo.Ctx(ctx).Where(do.UserInfo{\n        ResourceId: in.ResourceId,\n        Status:     in.Statuses,\n    })\n    err = orm.Order(in.OrderBy, in.OrderDirection).Limit(in.Offset, in.Limit).Scan(&items)\n    if err != nil {\n        return\n    }\n    total, err = orm.Count()\n    return\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Using the ",(0,o.jsx)(n.code,{children:"ScanAndCount"})," method for pagination queries:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"// GetList retrieves the user list of the instance.\nfunc (s sUserInfo) GetList(ctx context.Context, in model.UserInfoGetListInput) (items []entity.UserInfo, total int, err error) {\n    items = make([]entity.UserInfo, 0)\n    err = dao.UserInfo.Ctx(ctx).Where(do.UserInfo{\n            ResourceId: in.ResourceId,\n            Status:     in.Statuses,\n        }).\n        Order(in.OrderBy, in.OrderDirection).\n        Limit(in.Offset, in.Limit).\n        ScanAndCount(&items, &total, false)\n    return\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"It is only used in scenarios where both data and total count need to be queried, generally in pagination scenarios."}),"\n",(0,o.jsxs)(n.li,{children:["The third parameter of ",(0,o.jsx)(n.code,{children:"ScanAndCount"}),", ",(0,o.jsx)(n.code,{children:"useFieldForCount"}),", indicates whether to use ",(0,o.jsx)(n.code,{children:"Fields"})," as the parameter for ",(0,o.jsx)(n.code,{children:"Count"})," operation. Generally, it should be ",(0,o.jsx)(n.code,{children:"false"}),", meaning that the ",(0,o.jsx)(n.code,{children:"COUNT(1)"})," query is performed for the total count. Passing ",(0,o.jsx)(n.code,{children:"true"})," means using the fields of the query as the parameter for the ",(0,o.jsx)(n.code,{children:"COUNT"})," method."]}),"\n"]})]})}function l(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return s},a:function(){return a}});var i=t(667294);let o={},r=i.createContext(o);function a(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);