"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["32907"],{993675:function(e,n,s){s.r(n),s.d(n,{metadata:()=>t,contentTitle:()=>a,default:()=>d,assets:()=>c,toc:()=>o,frontMatter:()=>l});var t=JSON.parse('{"id":"examples/httpserver/sse/sse","title":"Server-Sent Events(SSE)","description":"A Server-Sent Events implementation using GoFrame framework","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/examples/httpserver/sse/sse.md","sourceDirName":"examples/httpserver/sse","slug":"/examples/httpserver/sse","permalink":"/en/examples/httpserver/sse","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/examples/httpserver/sse/sse.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1743315092000,"frontMatter":{"title":"Server-Sent Events(SSE)","slug":"/examples/httpserver/sse","keywords":["http","server","sse","server-sent events","streaming","goframe"],"description":"A Server-Sent Events implementation using GoFrame framework","hide_title":true},"sidebar":"examplesSidebar","previous":{"title":"Response with JSON Array","permalink":"/en/examples/httpserver/response-json-array"},"next":{"title":"Swagger Auth","permalink":"/en/examples/httpserver/swagger-auth"}}'),r=s("785893"),i=s("250065");let l={title:"Server-Sent Events(SSE)",slug:"/examples/httpserver/sse",keywords:["http","server","sse","server-sent events","streaming","goframe"],description:"A Server-Sent Events implementation using GoFrame framework",hide_title:!0},a="Server-Sent Events(SSE)",c={},o=[{value:"Description",id:"description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Structure",id:"structure",level:2},{value:"Features",id:"features",level:2},{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Notes",id:"notes",level:2}];function h(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"server-sent-eventssse",children:"Server-Sent Events(SSE)"})}),"\n",(0,r.jsxs)(n.p,{children:["Github Source: ",(0,r.jsx)(n.a,{href:"https://github.com/gogf/examples/tree/main/httpserver/sse",children:"https://github.com/gogf/examples/tree/main/httpserver/sse"})]}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["This example demonstrates how to implement Server-Sent Events (SSE) using ",(0,r.jsx)(n.code,{children:"GoFrame"}),". Server-Sent Events is a technology that allows a server to push updates to a client via ",(0,r.jsx)(n.code,{children:"HTTP"})," connection. Unlike ",(0,r.jsx)(n.code,{children:"WebSocket"}),", ",(0,r.jsx)(n.code,{children:"SSE"})," is unidirectional - only the server can send data to the client."]}),"\n",(0,r.jsxs)(n.p,{children:["The example implements a simple ",(0,r.jsx)(n.code,{children:"SSE"})," server that streams responses character by character, simulating a real-time typing effect commonly seen in modern AI chat applications."]}),"\n",(0,r.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://golang.org/dl/",children:"Go"})," ",(0,r.jsx)(n.code,{children:"1.22"})," or higher"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://git-scm.com/downloads",children:"Git"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://goframe.org",children:"GoFrame"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"structure",children:"Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"- go.mod: The Go module file.\n- main.go: The main application entry point with SSE implementation.\n"})}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Server-Sent Events implementation"}),"\n",(0,r.jsx)(n.li,{children:"Character-by-character streaming response for simulated AI chat"}),"\n",(0,r.jsx)(n.li,{children:"Proper HTTP headers for SSE"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Clone the repository:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/gogf/examples.git\ncd examples/httpserver/sse\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Install the dependencies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"go mod tidy\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Run the application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"go run main.go\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Run the example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"go run main.go\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The server will start at: ",(0,r.jsx)(n.a,{href:"http://127.0.0.1:8000",children:"http://127.0.0.1:8000"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Access the SSE endpoint:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In a browser, navigate to: ",(0,r.jsx)(n.a,{href:"http://127.0.0.1:8000/ai/chat",children:"http://127.0.0.1:8000/ai/chat"})]}),"\n",(0,r.jsx)(n.li,{children:"You should see words appearing one by one with a typing effect"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,r.jsx)(n.p,{children:"The SSE implementation includes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Setting the correct HTTP headers for SSE:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Content-Type: text/event-stream"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Cache-Control: no-cache"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Connection: keep-alive"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Streaming response with proper flushing"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Simulated typing delay using ",(0,r.jsx)(n.code,{children:"time.Sleep"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Simple HTTP routing with GoFrame's router"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SSE"})," connections remain open until explicitly closed by the client"]}),"\n",(0,r.jsx)(n.li,{children:"The server must flush the response buffer after each message"}),"\n",(0,r.jsx)(n.li,{children:"For production use, consider implementing reconnection logic and event IDs"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SSE"})," works over regular ",(0,r.jsx)(n.code,{children:"HTTP/HTTPS"})," and supports automatic reconnection in browsers"]}),"\n"]})]})}function d(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return a},a:function(){return l}});var t=s(667294);let r={},i=t.createContext(r);function l(e){let n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);