"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["6253"],{948176:function(e,t,n){n.r(t),n.d(t,{metadata:()=>r,contentTitle:()=>o,default:()=>u,assets:()=>c,toc:()=>l,frontMatter:()=>s});var r=JSON.parse('{"id":"quick/\u5FEB\u901F\u5F00\u59CB/\u8BF7\u6C42\u6570\u636E\u7ED3\u6784","title":"Parameters Structure","description":"Resolving the hardcoding problem of parameter names through data structuring, this introduces how to define request objects to receive client parameters, achieving parameter mapping and validation through the GoFrame framework to improve code maintainability. Additionally, the example program demonstrates methods to avoid redundant validation logic and explores more concise solutions.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/quick/\u5FEB\u901F\u5F00\u59CB/\u8BF7\u6C42\u6570\u636E\u7ED3\u6784.md","sourceDirName":"quick/\u5FEB\u901F\u5F00\u59CB","slug":"/quick/request-struct","permalink":"/en/quick/request-struct","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/quick/\u5FEB\u901F\u5F00\u59CB/\u8BF7\u6C42\u6570\u636E\u7ED3\u6784.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732612158000,"sidebarPosition":4,"frontMatter":{"slug":"/quick/request-struct","title":"Parameters Structure","hide_title":true,"sidebar_position":4,"keywords":["GoFrame","GoFrame Framework","Request Data Structure","Structured Request","Parameter Mapping","Data Validation","Web Server","Request Object","Hardcoding Parameter Names","API Optimization"],"description":"Resolving the hardcoding problem of parameter names through data structuring, this introduces how to define request objects to receive client parameters, achieving parameter mapping and validation through the GoFrame framework to improve code maintainability. Additionally, the example program demonstrates methods to avoid redundant validation logic and explores more concise solutions."},"sidebar":"quickSidebar","previous":{"title":"Parameters Retrieving","permalink":"/en/quick/request-input"},"next":{"title":"Standard Routing","permalink":"/en/quick/strict-router"}}'),i=n("785893"),a=n("250065");let s={slug:"/quick/request-struct",title:"Parameters Structure",hide_title:!0,sidebar_position:4,keywords:["GoFrame","GoFrame Framework","Request Data Structure","Structured Request","Parameter Mapping","Data Validation","Web Server","Request Object","Hardcoding Parameter Names","API Optimization"],description:"Resolving the hardcoding problem of parameter names through data structuring, this introduces how to define request objects to receive client parameters, achieving parameter mapping and validation through the GoFrame framework to improve code maintainability. Additionally, the example program demonstrates methods to avoid redundant validation logic and explores more concise solutions."},o=void 0,c={},l=[{value:"Request Structure",id:"request-structure",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Testing the API",id:"testing-the-api",level:2},{value:"Room for Improvement",id:"room-for-improvement",level:2}];function d(e){let t={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"In this chapter, we'll improve upon our previous example by introducing structured data handling to eliminate hardcoded parameter names."}),"\n",(0,i.jsx)(t.h2,{id:"request-structure",children:"Request Structure"}),"\n",(0,i.jsx)(t.p,{children:"Let's define a structure to handle client parameters:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:"type HelloReq struct {\n    Name string // User's name\n    Age  int    // User's age\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"This approach allows us to document our parameters and specify their types explicitly, eliminating the need for hardcoded parameter names."}),"\n",(0,i.jsx)(t.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(t.p,{children:"Here's our updated web server implementation:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\ntype HelloReq struct {\n    Name string // User\'s name\n    Age  int    // User\'s age\n}\n\nfunc main() {\n    s := g.Server()\n    s.BindHandler("/", func(r *ghttp.Request) {\n        var req HelloReq\n        if err := r.Parse(&req); err != nil {\n            r.Response.Write(err.Error())\n            return\n        }\n        if req.Name == "" {\n            r.Response.Write("name should not be empty")\n            return\n        }\n        if req.Age <= 0 {\n            r.Response.Write("invalid age value")\n            return\n        }\n        r.Response.Writef(\n            "Hello %s! Your Age is %d",\n            req.Name,\n            req.Age,\n        )\n    })\n    s.SetPort(8000)\n    s.Run()\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Key improvements in this version:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["We use ",(0,i.jsx)(t.code,{children:"r.Parse"})," to automatically map request parameters to our struct. This method handles the parameter parsing and assignment based on predefined mapping rules (which we'll cover in detail in the type conversion documentation)."]}),"\n",(0,i.jsxs)(t.li,{children:["We've added input validation to ensure both ",(0,i.jsx)(t.code,{children:"Name"})," and ",(0,i.jsx)(t.code,{children:"Age"})," parameters contain valid values."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"testing-the-api",children:"Testing the API"}),"\n",(0,i.jsxs)(t.p,{children:["When we visit ",(0,i.jsx)(t.a,{href:"http://127.0.0.1:8000/?name=john&age=18",children:"http://127.0.0.1:8000/?name=john&age=18"}),", we get the expected response:"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"img.png",src:n(442915).Z+"",width:"1024",height:"226"})}),"\n",(0,i.jsxs)(t.p,{children:["Let's test the validation by making a request without parameters to ",(0,i.jsx)(t.a,{href:"http://127.0.0.1:8000/",children:"http://127.0.0.1:8000/"}),":"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"img_2.png",src:n(917135).Z+"",width:"730",height:"224"})}),"\n",(0,i.jsx)(t.h2,{id:"room-for-improvement",children:"Room for Improvement"}),"\n",(0,i.jsx)(t.p,{children:"While we've made progress by using structured data, there are still several areas we can enhance:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"r.Parse"})," operation is boilerplate code that should be separated from our business logic"]}),"\n",(0,i.jsxs)(t.li,{children:["Having to call ",(0,i.jsx)(t.code,{children:"r.Parse"})," in every API handler becomes repetitive"]}),"\n",(0,i.jsxs)(t.li,{children:["The manual validation using multiple ",(0,i.jsx)(t.code,{children:"if"})," statements can become unwieldy as the number of parameters grows"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Can we make this code more elegant and maintainable? Absolutely! In the next chapter, we'll explore a more streamlined approach to handle these concerns."})]})}function u(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},442915:function(e,t,n){n.d(t,{Z:function(){return r}});let r=n.p+"assets/images/img-0c2fc34c17e9ca5ab24ca490b332cc85.png"},917135:function(e,t,n){n.d(t,{Z:function(){return r}});let r=n.p+"assets/images/img_2-d1bceea3752c3a5f31dab695c6bc36ec.png"},250065:function(e,t,n){n.d(t,{Z:function(){return o},a:function(){return s}});var r=n(667294);let i={},a=r.createContext(i);function s(e){let t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);