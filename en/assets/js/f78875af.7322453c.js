"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["53814"],{324532:function(e,n,c){c.r(n),c.d(n,{metadata:()=>t,contentTitle:()=>l,default:()=>x,assets:()=>a,toc:()=>d,frontMatter:()=>s});var t=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u7F13\u5B58\u7BA1\u7406/\u7F13\u5B58\u7BA1\u7406-\u65B9\u6CD5\u4ECB\u7ECD","title":"Caching - Methods","description":"Methods for using cache management in the GoFrame framework, including basic set and get operations, adapter setup methods, and cache update strategies. Users can learn how to efficiently manage and operate cache data in the GoFrame framework through example code.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u7F13\u5B58\u7BA1\u7406/\u7F13\u5B58\u7BA1\u7406-\u65B9\u6CD5\u4ECB\u7ECD.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u7F13\u5B58\u7BA1\u7406","slug":"/docs/core/gcache-funcs","permalink":"/en/docs/core/gcache-funcs","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u7F13\u5B58\u7BA1\u7406/\u7F13\u5B58\u7BA1\u7406-\u65B9\u6CD5\u4ECB\u7ECD.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":3,"frontMatter":{"slug":"/docs/core/gcache-funcs","title":"Caching - Methods","sidebar_position":3,"hide_title":true,"keywords":["GoFrame","cache management","data storage","methods introduction","efficient caching","Go language","interface implementation","cache adapter","data processing","cache updating"],"description":"Methods for using cache management in the GoFrame framework, including basic set and get operations, adapter setup methods, and cache update strategies. Users can learn how to efficiently manage and operate cache data in the GoFrame framework through example code."},"sidebar":"mainSidebar","previous":{"title":"Caching - Redis","permalink":"/en/docs/core/gcache-redis"},"next":{"title":"Template Engine","permalink":"/en/docs/core/gview"}}'),r=c("785893"),i=c("250065");let s={slug:"/docs/core/gcache-funcs",title:"Caching - Methods",sidebar_position:3,hide_title:!0,keywords:["GoFrame","cache management","data storage","methods introduction","efficient caching","Go language","interface implementation","cache adapter","data processing","cache updating"],description:"Methods for using cache management in the GoFrame framework, including basic set and get operations, adapter setup methods, and cache update strategies. Users can learn how to efficiently manage and operate cache data in the GoFrame framework through example code."},l=void 0,a={},d=[{value:"<code>Set</code>",id:"set",level:2},{value:"<code>SetAdapter</code>",id:"setadapter",level:2},{value:"<code>SetIfNotExist</code>",id:"setifnotexist",level:2},{value:"<code>SetMap</code>",id:"setmap",level:2},{value:"<code>Size</code>",id:"size",level:2},{value:"<code>Update</code>",id:"update",level:2},{value:"<code>UpdateExpire</code>",id:"updateexpire",level:2},{value:"<code>Values</code>",id:"values",level:2},{value:"<code>Close</code>",id:"close",level:2},{value:"<code>Contains</code>",id:"contains",level:2},{value:"<code>Data</code>",id:"data",level:2},{value:"<code>Get</code>",id:"get",level:2},{value:"<code>GetExpire</code>",id:"getexpire",level:2},{value:"<code>GetOrSet</code>",id:"getorset",level:2},{value:"<code>GetOrSetFunc</code>",id:"getorsetfunc",level:2},{value:"<code>GetOrSetFuncLock</code>",id:"getorsetfunclock",level:2},{value:"<code>Keys</code>",id:"keys",level:2},{value:"<code>KeyStrings</code>",id:"keystrings",level:2},{value:"<code>Remove</code>",id:"remove",level:2},{value:"<code>Removes</code>",id:"removes",level:2},{value:"<code>Clear</code>",id:"clear",level:2},{value:"<code>MustGet</code>",id:"mustget",level:2},{value:"<code>MustGetOrSet</code>",id:"mustgetorset",level:2},{value:"<code>MustGetOrSetFunc</code>",id:"mustgetorsetfunc",level:2},{value:"<code>MustGetOrSetFuncLock</code>",id:"mustgetorsetfunclock",level:2},{value:"<code>MustContains</code>",id:"mustcontains",level:2},{value:"<code>MustGetExpire</code>",id:"mustgetexpire",level:2},{value:"<code>MustSize</code>",id:"mustsize",level:2},{value:"<code>MustData</code>",id:"mustdata",level:2},{value:"<code>MustKeys</code>",id:"mustkeys",level:2},{value:"<code>MustKeyStrings</code>",id:"mustkeystrings",level:2},{value:"<code>MustValues</code>",id:"mustvalues",level:2}];function o(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["The following is a list of commonly used methods. The documentation may lag behind new features in the code. For more methods and examples, please refer to the code documentation: ",(0,r.jsx)(n.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/os/gcache",children:"https://pkg.go.dev/github.com/gogf/gf/v2/os/gcache"})]})}),"\n",(0,r.jsx)(n.h2,{id:"set",children:(0,r.jsx)(n.code,{children:"Set"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: Use ",(0,r.jsx)(n.code,{children:"key-value"})," pairs to set cache, and key-values can be of any type."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"Set(ctx context.Context, key interface{}, value interface{}, duration time.Duration) error\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example: Set the ",(0,r.jsx)(n.code,{children:"slice"})," to cache with the key name ",(0,r.jsx)(n.code,{children:"k1"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_Set() {\n      c := gcache.New()\n      c.Set(ctx, "k1", g.Slice{1, 2, 3, 4, 5, 6, 7, 8, 9}, 0)\n      fmt.Println(c.Get(ctx, "k1"))\n\n      // Output:\n      // [1,2,3,4,5,6,7,8,9] <nil>\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"setadapter",children:(0,r.jsx)(n.code,{children:"SetAdapter"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"SetAdapter"})," changes the underlying adapter of this cache object. Note that this setup function is not concurrency safe."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"SetAdapter(adapter Adapter)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example: You can implement any cache adapter according to your needs by implementing the interface method."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_SetAdapter() {\n      c := gcache.New()\n      adapter := gcache.New()\n      c.SetAdapter(adapter)\n      c.Set(ctx, "k1", g.Slice{1, 2, 3, 4, 5, 6, 7, 8, 9}, 0)\n      fmt.Println(c.Get(ctx, "k1"))\n\n      // Output:\n      // [1,2,3,4,5,6,7,8,9] <nil>\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"setifnotexist",children:(0,r.jsx)(n.code,{children:"SetIfNotExist"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: Sets the corresponding key value ",(0,r.jsx)(n.code,{children:"value"})," and returns ",(0,r.jsx)(n.code,{children:"true"})," when the specified ",(0,r.jsx)(n.code,{children:"key"})," does not exist. Otherwise, it does nothing and returns ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"SetIfNotExist(ctx context.Context, key interface{}, value interface{}, duration time.Duration) (ok bool, err error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example: Directly ",(0,r.jsx)(n.code,{children:"judging and writing"})," through ",(0,r.jsx)(n.code,{children:"SetIfNotExist"}),", and set the expiration time."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_SetIfNotExist() {\n      c := gcache.New()\n      // Write when the key name does not exist, and set the expiration time to 1000 milliseconds\n      k1, err := c.SetIfNotExist(ctx, "k1", "v1", 1000*time.Millisecond)\n      fmt.Println(k1, err)\n\n      // Returns false when the key name already exists\n      k2, err := c.SetIfNotExist(ctx, "k1", "v2", 1000*time.Millisecond)\n      fmt.Println(k2, err)\n\n      // Print the current list of key values\n      keys1, _ := c.Keys(ctx)\n      fmt.Println(keys1)\n\n      // It does not expire if `duration` == 0. It deletes the `key` if `duration` < 0 or given `value` is nil.\n      c.SetIfNotExist(ctx, "k1", 0, -10000)\n\n      // Wait 1 second for K1: V1 to expire automatically\n      time.Sleep(1200 * time.Millisecond)\n\n      // Print the current key-value pair again and find that K1: V1 has expired\n      keys2, _ := c.Keys(ctx)\n      fmt.Println(keys2)\n\n      // Output:\n      // true <nil>\n      // false <nil>\n      // [k1]\n      // [<nil>]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"setmap",children:(0,r.jsx)(n.code,{children:"SetMap"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: Set key-value pairs in batches, the input parameter type is ",(0,r.jsx)(n.code,{children:"map[interface{}]interface{}"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"SetMap(ctx context.Context, data map[interface{}]interface{}, duration time.Duration) error\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_SetMap() {\n       c := gcache.New()\n      // map[interface{}]interface{}\n      data := g.MapAnyAny{\n          "k1": "v1",\n          "k2": "v2",\n          "k3": "v3",\n      }\n      c.SetMap(ctx, data, 1000*time.Millisecond)\n\n      // Gets the specified key value\n      v1, _ := c.Get(ctx, "k1")\n      v2, _ := c.Get(ctx, "k2")\n      v3, _ := c.Get(ctx, "k3")\n\n      fmt.Println(v1, v2, v3)\n\n      // Output:\n      // v1 v2 v3\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"size",children:(0,r.jsx)(n.code,{children:"Size"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Size"})," returns the ",(0,r.jsx)(n.code,{children:"number of items"})," in the cache."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"Size(ctx context.Context) (size int, err error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func ExampleCache_Size() {\n      c := gcache.New()\n\n      // Add 10 elements without expiration\n      for i := 0; i < 10; i++ {\n          c.Set(ctx, i, i, 0)\n      }\n\n      // Size returns the number of items in the cache.\n      n, _ := c.Size(ctx)\n      fmt.Println(n)\n\n      // Output:\n      // 10\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"update",children:(0,r.jsx)(n.code,{children:"Update"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Update"})," updates the value corresponding to the ",(0,r.jsx)(n.code,{children:"key"})," without changing its ",(0,r.jsx)(n.code,{children:"expiration time"}),", and returns the old value. If ",(0,r.jsx)(n.code,{children:"key"})," does not exist in the cache, the returned ",(0,r.jsx)(n.code,{children:"exist"})," value is ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"Update(ctx context.Context, key interface{}, value interface{}) (oldValue *gvar.Var, exist bool, err error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example: Add multiple caches through ",(0,r.jsx)(n.code,{children:"SetMap"})," and modify ",(0,r.jsx)(n.code,{children:"value"})," through ",(0,r.jsx)(n.code,{children:"Update"})," with the specified ",(0,r.jsx)(n.code,{children:"key"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_Update() {\n      c := gcache.New()\n      c.SetMap(ctx, g.MapAnyAny{"k1": "v1", "k2": "v2", "k3": "v3"}, 0)\n\n      k1, _ := c.Get(ctx, "k1")\n      fmt.Println(k1)\n      k2, _ := c.Get(ctx, "k2")\n      fmt.Println(k2)\n      k3, _ := c.Get(ctx, "k3")\n      fmt.Println(k3)\n\n      re, exist, _ := c.Update(ctx, "k1", "v11")\n      fmt.Println(re, exist)\n\n      re1, exist1, _ := c.Update(ctx, "k4", "v44")\n      fmt.Println(re1, exist1)\n\n      kup1, _ := c.Get(ctx, "k1")\n      fmt.Println(kup1)\n      kup2, _ := c.Get(ctx, "k2")\n      fmt.Println(kup2)\n      kup3, _ := c.Get(ctx, "k3")\n      fmt.Println(kup3)\n\n      // Output:\n      // v1\n      // v2\n      // v3\n      // v1 true\n      //  false\n      // v11\n      // v2\n      // v3\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"updateexpire",children:(0,r.jsx)(n.code,{children:"UpdateExpire"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"UpdateExpire"})," updates the expiration time of the ",(0,r.jsx)(n.code,{children:"key"})," and returns the old expiration time value. If ",(0,r.jsx)(n.code,{children:"key"})," does not exist in the cache, it returns ",(0,r.jsx)(n.code,{children:"-1"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"UpdateExpire(ctx context.Context, key interface{}, duration time.Duration) (oldDuration time.Duration, err error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example: Update the expiration time of ",(0,r.jsx)(n.code,{children:"key"})," through ",(0,r.jsx)(n.code,{children:"UpdateExpire"})," and print to check."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_UpdateExpire() {\n      c := gcache.New()\n      c.Set(ctx, "k1", "v1", 1000*time.Millisecond)\n      expire, _ := c.GetExpire(ctx, "k1")\n      fmt.Println(expire)\n\n      c.UpdateExpire(ctx, "k1", 500*time.Millisecond)\n\n      expire1, _ := c.GetExpire(ctx, "k1")\n      fmt.Println(expire1)\n\n      // Output:\n      // 1s\n      // 500ms\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"values",children:(0,r.jsx)(n.code,{children:"Values"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: Get all values in the cache via ",(0,r.jsx)(n.code,{children:"Values"}),", returned in slice form."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"Values(ctx context.Context) (values []interface{}, err error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_Values() {\n      c := gcache.New()\n\n      c.Set(ctx, "k1", g.Map{"k1": "v1", "k2": "v2"}, 0)\n\n      // Values returns all values in the cache as slice.\n      data, _ := c.Values(ctx)\n      fmt.Println(data)\n\n      // May Output:\n      // [map[k1:v1 k2:v2]]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"close",children:(0,r.jsx)(n.code,{children:"Close"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: Close the cache and let ",(0,r.jsx)(n.code,{children:"GC"})," reclaim resources, by default ",(0,r.jsx)(n.code,{children:"no need to close"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"Close(ctx context.Context) error\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example: Close the cache by ",(0,r.jsx)(n.code,{children:"Close"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_Close() {\n       c := gcache.New()\n\n      c.Set(ctx, "k1", "v", 0)\n      data, _ := c.Get(ctx, "k1")\n      fmt.Println(data)\n\n      // Close closes the cache if necessary.\n      c.Close(ctx)\n\n      data1, _ := c.Get(ctx, "k1")\n\n      fmt.Println(data1)\n\n       // Output:\n      // v\n      // v\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"contains",children:(0,r.jsx)(n.code,{children:"Contains"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Contains"})," returns ",(0,r.jsx)(n.code,{children:"true"})," if the specified ",(0,r.jsx)(n.code,{children:"key"})," exists in the cache, otherwise it returns ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"Contains(ctx context.Context, key interface{}) (bool, error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_Contains() {\n       c := gcache.New()\n\n      // Set Cache\n      c.Set(ctx, "k", "v", 0)\n\n      data, _ := c.Contains(ctx, "k")\n      fmt.Println(data)\n\n      // return false\n      data1, _ := c.Contains(ctx, "k1")\n      fmt.Println(data1)\n\n       // Output:\n      // true\n      // false\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"data",children:(0,r.jsx)(n.code,{children:"Data"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: Data is returned as a ",(0,r.jsx)(n.code,{children:"map"})," type with a copy of all ",(0,r.jsx)(n.code,{children:"key-value pairs"})," ('key':'value') in the cache."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"Data(ctx context.Context) (data map[interface{}]interface{}, err error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example: Get all cached data and return it as ",(0,r.jsx)(n.code,{children:"map[interface{}]interface{}"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_Data() {\n        c := gcache.New()\n\n      c.Set(ctx, "k5", "v5", 0)\n\n      data, _ := c.Data(ctx)\n      fmt.Println(data)\n\n       // Output:\n      // map[k1:v1]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"get",children:(0,r.jsx)(n.code,{children:"Get"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Get"})," retrieves and returns the associated value for a given ",(0,r.jsx)(n.code,{children:"key"}),". If it doesn't exist, the value is zero or has expired; it returns ",(0,r.jsx)(n.code,{children:"nil"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"Get(ctx context.Context, key interface{}) (*gvar.Var, error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_Get() {\n         c := gcache.New()\n\n      // Set Cache Object\n      c.Set(ctx, "k1", "v1", 0)\n\n      data, _ := c.Get(ctx, "k1")\n      fmt.Println(data)\n       // Output:\n      // v1\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"getexpire",children:(0,r.jsx)(n.code,{children:"GetExpire"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"GetExpire"})," retrieves and returns the expiration time of ",(0,r.jsx)(n.code,{children:"key"})," in the cache. Note that if ",(0,r.jsx)(n.code,{children:"key"})," never expires, it returns ",(0,r.jsx)(n.code,{children:"0"}),". If ",(0,r.jsx)(n.code,{children:"key"})," does not exist in the cache, it returns ",(0,r.jsx)(n.code,{children:"-1"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"GetExpire(ctx context.Context, key interface{}) (time.Duration, error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_GetExpire() {\n      c := gcache.New()\n\n      // Set cache without expiration\n      c.Set(ctx, "k", "v", 10000*time.Millisecond)\n\n      expire, _ := c.GetExpire(ctx, "k")\n      fmt.Println(expire)\n\n       // Output:\n      // 10s\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"getorset",children:(0,r.jsx)(n.code,{children:"GetOrSet"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: Retrieve and return the value of ",(0,r.jsx)(n.code,{children:"key"}),", or set the ",(0,r.jsx)(n.code,{children:"key-value"})," pair directly if ",(0,r.jsx)(n.code,{children:"key"})," does not exist in the cache."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"GetOrSet(ctx context.Context, key interface{}, value interface{}, duration time.Duration) (result *gvar.Var, err error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example: Use ",(0,r.jsx)(n.code,{children:"GetOrSet"})," to determine if ",(0,r.jsx)(n.code,{children:"key"})," does not exist, then set it directly, and set the ",(0,r.jsx)(n.code,{children:"duration"})," time."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_GetOrSet() {\n      c := gcache.New()\n\n      data, _ := c.GetOrSet(ctx, "k", "v", 10000*time.Millisecond)\n      fmt.Println(data)\n\n      data1, _ := c.Get(ctx, "k")\n      fmt.Println(data1)\n\n      // Output:\n      // v\n      // v\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"getorsetfunc",children:(0,r.jsx)(n.code,{children:"GetOrSetFunc"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: Retrieve and return the value of ",(0,r.jsx)(n.code,{children:"key"}),"; if the value corresponding to ",(0,r.jsx)(n.code,{children:"key"})," does not exist, set ",(0,r.jsx)(n.code,{children:"key"})," with the result of the function ",(0,r.jsx)(n.code,{children:"func"}),". If ",(0,r.jsx)(n.code,{children:"key"})," exists in the cache, return its result."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"GetOrSetFunc(ctx context.Context, key interface{}, f func(ctx context.Context) (interface{}, error), duration time.Duration) (result *gvar.Var, err error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example: The setting of ",(0,r.jsx)(n.code,{children:"k1"})," returns the execution result of ",(0,r.jsx)(n.code,{children:"func"}),", ",(0,r.jsx)(n.code,{children:"k2"})," returns ",(0,r.jsx)(n.code,{children:"nil"})," and does not perform any operation."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_GetOrSetFunc() {\n      c := gcache.New()\n\n      c.GetOrSetFunc(ctx, "k1", func(ctx context.Context) (value interface{}, err error) {\n          return "v1", nil\n      }, 10000*time.Millisecond)\n      v, _ := c.Get(ctx, "k1")\n      fmt.Println(v)\n\n      c.GetOrSetFunc(ctx, "k2", func(ctx context.Context) (value interface{}, err error) {\n          return nil, nil\n      }, 10000*time.Millisecond)\n      v1, _ := c.Get(ctx, "k2")\n      fmt.Println(v1)\n\n      // Output:\n      // v1\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"getorsetfunclock",children:(0,r.jsx)(n.code,{children:"GetOrSetFuncLock"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: It is consistent with ",(0,r.jsx)(n.code,{children:"GetOrSetFunc"}),", but cannot repeat or ",(0,r.jsx)(n.code,{children:"overwrite registration"})," of the cache."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"GetOrSetFuncLock(ctx context.Context, key interface{}, f func(ctx context.Context) (interface{}, error), duration time.Duration) (result *gvar.Var, err error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example: The first time setting returns the execution result of ",(0,r.jsx)(n.code,{children:"func"}),", the operation for the second time setting is invalid."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_GetOrSetFuncLock() {\n      c := gcache.New()\n\n      c.GetOrSetFuncLock(ctx, "k1", func(ctx context.Context) (value interface{}, err error) {\n          return "v1", nil\n      }, 0)\n      v, _ := c.Get(ctx, "k1")\n      fmt.Println(v)\n\n      c.GetOrSetFuncLock(ctx, "k1", func(ctx context.Context) (value interface{}, err error) {\n          return "update v1", nil\n      }, 0)\n      v, _ = c.Get(ctx, "k1")\n      fmt.Println(v)\n\n      c.Remove(ctx, g.Slice{"k1"}...)\n\n      // Output:\n      // v1\n      // v1\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"keys",children:(0,r.jsx)(n.code,{children:"Keys"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: All ",(0,r.jsx)(n.code,{children:"keys"})," in the cache are returned in the form of ",(0,r.jsx)(n.code,{children:"slice"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"Keys(ctx context.Context) (keys []interface{}, err error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_Keys() {\n      c := gcache.New()\n\n      c.SetMap(ctx, g.MapAnyAny{"k1": "v1"}, 0)\n\n      // Print the current list of key values\n      keys1, _ := c.Keys(ctx)\n      fmt.Println(keys1)\n\n      // Output:\n      // [k1]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"keystrings",children:(0,r.jsx)(n.code,{children:"KeyStrings"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"KeyStrings"})," returns all the keys in the cache as a string ",(0,r.jsx)(n.code,{children:"slice"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (c *Cache) KeyStrings(ctx context.Context) ([]string, error) {\n      keys, err := c.Keys(ctx)\n      if err != nil {\n          return nil, err\n      }\n      return gconv.Strings(keys), nil\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_KeyStrings() {\n      c := gcache.New()\n\n      c.SetMap(ctx, g.MapAnyAny{"k1": "v1", "k2": "v2"}, 0)\n\n      // KeyStrings returns all keys in the cache as string slice.\n      keys,_ := c.KeyStrings(ctx)\n      fmt.Println(keys)\n\n      // May Output:\n      // [k1 k2]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"remove",children:(0,r.jsx)(n.code,{children:"Remove"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: Remove ",(0,r.jsx)(n.code,{children:"one or more keys"})," from the cache, and return the value of the last deleted key."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"Remove(ctx context.Context, keys ...interface{}) (lastValue *gvar.Var, err error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_Remove() {\n      c := gcache.New()\n\n      c.SetMap(ctx, g.MapAnyAny{"k1": "v1", "k2": "v2"}, 0)\n\n      c.Remove(ctx, "k1")\n\n      data, _ := c.Data(ctx)\n      fmt.Println(data)\n\n      // Output:\n      // map[k2:v2]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"removes",children:(0,r.jsx)(n.code,{children:"Removes"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Description: Remove multiple keys from the cache."}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (c *Cache) Removes(ctx context.Context, keys []interface{}) error {\n      _, err := c.Remove(ctx, keys...)\n      return err\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_Removes() {\n      c := gcache.New()\n\n      c.SetMap(ctx, g.MapAnyAny{"k1": "v1", "k2": "v2", "k3": "v3", "k4": "v4"}, 0)\n\n      c.Removes(ctx, g.Slice{"k1", "k2", "k3"})\n\n      data, _ := c.Data(ctx)\n      fmt.Println(data)\n\n      // Output:\n      // map[k4:v4]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"clear",children:(0,r.jsx)(n.code,{children:"Clear"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: Clear ",(0,r.jsx)(n.code,{children:"all cache"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (c *Cache) Clear(ctx context.Context) error\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_Clear() {\n      c := gcache.New()\n\n      c.SetMap(ctx, g.MapAnyAny{"k1": "v1", "k2": "v2", "k3": "v3", "k4": "v4"}, 0)\n\n      c.Clear(ctx)\n\n      data, _ := c.Data(ctx)\n      fmt.Println(data)\n\n      // Output:\n      // map[]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"mustget",children:(0,r.jsx)(n.code,{children:"MustGet"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"MustGet"})," retrieves and returns the associated value for a given ",(0,r.jsx)(n.code,{children:"key"}),". If it doesn't exist, the value is zero or has expired, it returns ",(0,r.jsx)(n.code,{children:"nil"}),". If ",(0,r.jsx)(n.code,{children:"err"})," is not nil, it will ",(0,r.jsx)(n.code,{children:"panic(err)"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (c *Cache) MustGet(ctx context.Context, key interface{}) *gvar.Var {\n      v, err := c.Get(ctx, key)\n      if err != nil {\n          panic(err)\n      }\n      return v\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_MustGet() {\n       c := gcache.New()\n\n       c.Set(ctx, "k1", "v1", 0)\n       k2 := c.MustGet(ctx, "k2")\n\n       k1 := c.MustGet(ctx, "k1")\n      fmt.Println(k1)\n\n      fmt.Println(k2)\n\n       // Output:\n      // v1\n      //\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"mustgetorset",children:(0,r.jsx)(n.code,{children:"MustGetOrSet"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: Retrieve and return the value of ",(0,r.jsx)(n.code,{children:"key"}),", or set the ",(0,r.jsx)(n.code,{children:"key-value"})," pair directly if ",(0,r.jsx)(n.code,{children:"key"})," does not exist in the cache. If ",(0,r.jsx)(n.code,{children:"err"})," is not nil, it will ",(0,r.jsx)(n.code,{children:"panic(err)"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (c *Cache) MustGetOrSet(ctx context.Context, key interface{}, value interface{}, duration time.Duration) *gvar.Var {\n      v, err := c.GetOrSet(ctx, key, value, duration)\n      if err != nil {\n          panic(err)\n      }\n      return v\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_MustGetOrSet() {\n\n      // Create a cache object,\n      // Of course, you can also easily use the gcache package method directly\n      c := gcache.New()\n\n      // MustGetOrSet acts like GetOrSet, but it panics if any error occurs.\n      k1 := c.MustGetOrSet(ctx, "k1", "v1", 0)\n      fmt.Println(k1)\n\n      k2 := c.MustGetOrSet(ctx, "k1", "v2", 0)\n      fmt.Println(k2)\n\n      // Output:\n      // v1\n      // v1\n\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"mustgetorsetfunc",children:(0,r.jsx)(n.code,{children:"MustGetOrSetFunc"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: Retrieve and return the value of ",(0,r.jsx)(n.code,{children:"key"}),"; if the value corresponding to ",(0,r.jsx)(n.code,{children:"key"})," does not exist, set ",(0,r.jsx)(n.code,{children:"key"})," with the result of the function ",(0,r.jsx)(n.code,{children:"func"}),". If ",(0,r.jsx)(n.code,{children:"key"})," exists in the cache, return its result. If ",(0,r.jsx)(n.code,{children:"err"})," is not nil, it will ",(0,r.jsx)(n.code,{children:"panic(err)"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (c *Cache) MustGetOrSetFunc(ctx context.Context, key interface{}, f func(ctx context.Context) (interface{}, error), duration time.Duration) *gvar.Var {\n      v, err := c.GetOrSetFunc(ctx, key, f, duration)\n      if err != nil {\n          panic(err)\n      }\n      return v\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func ExampleCache_MustGetOrSetFunc() {\n      c := gcache.New()\n\n      c.MustGetOrSetFunc(ctx, 1, func(ctx context.Context) (interface{}, error) {\n          return 111, nil\n      }, 10000*time.Millisecond)\n      v := c.MustGet(ctx, 1)\n      fmt.Println(v)\n\n      c.MustGetOrSetFunc(ctx, 2, func(ctx context.Context) (interface{}, error) {\n          return nil, nil\n      }, 10000*time.Millisecond)\n      v1 := c.MustGet(ctx, 2)\n      fmt.Println(v1)\n\n      // Output:\n      // 111\n      //\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"mustgetorsetfunclock",children:(0,r.jsx)(n.code,{children:"MustGetOrSetFuncLock"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: It is consistent with ",(0,r.jsx)(n.code,{children:"MustGetOrSetFunc"}),", but cannot repeat or ",(0,r.jsx)(n.code,{children:"overwrite registration"})," of the cache. If ",(0,r.jsx)(n.code,{children:"err"})," is not nil, it will ",(0,r.jsx)(n.code,{children:"panic(err)"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (c *Cache) MustGetOrSetFuncLock(ctx context.Context, key interface{}, f func(ctx context.Context) (interface{}, error), duration time.Duration) *gvar.Var {\n      v, err := c.GetOrSetFuncLock(ctx, key, f, duration)\n      if err != nil {\n          panic(err)\n      }\n      return v\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_MustGetOrSetFuncLock() {\n      c := gcache.New()\n\n      c.MustGetOrSetFuncLock(ctx, "k1", func(ctx context.Context) (interface{}, error) {\n          return "v1", nil\n      }, 0)\n      v := c.MustGet(ctx, "k1")\n      fmt.Println(v)\n\n      // Modification failed\n      c.MustGetOrSetFuncLock(ctx, "k1", func(ctx context.Context) (interface{}, error) {\n          return "update v1", nil\n      }, 0)\n      v = c.MustGet(ctx, "k1")\n      fmt.Println(v)\n\n      // Output:\n      // v1\n      // v1\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"mustcontains",children:(0,r.jsx)(n.code,{children:"MustContains"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Contains"})," returns ",(0,r.jsx)(n.code,{children:"true"})," if the specified ",(0,r.jsx)(n.code,{children:"key"})," exists in the cache, otherwise it returns ",(0,r.jsx)(n.code,{children:"false"}),". If ",(0,r.jsx)(n.code,{children:"err"})," is not nil, it will ",(0,r.jsx)(n.code,{children:"panic(err)"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (c *Cache) MustContains(ctx context.Context, key interface{}) bool {\n      v, err := c.Contains(ctx, key)\n      if err != nil {\n          panic(err)\n      }\n      return v\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_MustContains() {\n      c := gcache.New()\n\n      // Set Cache\n      c.Set(ctx, "k", "v", 0)\n\n      // Contains returns true if `key` exists in the cache, or else returns false.\n      // return true\n      data := c.MustContains(ctx, "k")\n      fmt.Println(data)\n\n      // return false\n      data1 := c.MustContains(ctx, "k1")\n      fmt.Println(data1)\n\n      // Output:\n      // true\n      // false\n\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"mustgetexpire",children:(0,r.jsx)(n.code,{children:"MustGetExpire"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description:\xa0 ",(0,r.jsx)(n.code,{children:"MustGetExpire"})," retrieves and returns the expiration time of ",(0,r.jsx)(n.code,{children:"key"})," in the cache. Note that if ",(0,r.jsx)(n.code,{children:"key"})," never expires, it returns ",(0,r.jsx)(n.code,{children:"0"}),". If ",(0,r.jsx)(n.code,{children:"key"})," does not exist in the cache, it returns ",(0,r.jsx)(n.code,{children:"-1"}),", if ",(0,r.jsx)(n.code,{children:"err"})," is not nil, it will ",(0,r.jsx)(n.code,{children:"panic(err)"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (c *Cache) MustGetExpire(ctx context.Context, key interface{}) time.Duration {\n      v, err := c.GetExpire(ctx, key)\n      if err != nil {\n          panic(err)\n      }\n      return v\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_MustGetExpire() {\n      c := gcache.New()\n\n      // Set cache without expiration\n      c.Set(ctx, "k", "v", 10000*time.Millisecond)\n\n      // MustGetExpire acts like GetExpire, but it panics if any error occurs.\n      expire := c.MustGetExpire(ctx, "k")\n      fmt.Println(expire)\n\n      // May Output:\n      // 10s\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"mustsize",children:(0,r.jsx)(n.code,{children:"MustSize"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description:\xa0 ",(0,r.jsx)(n.code,{children:"MustSize"})," returns the number of items in the cache. If ",(0,r.jsx)(n.code,{children:"err"})," is not nil, it will ",(0,r.jsx)(n.code,{children:"panic(err)"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (c *Cache) MustSize(ctx context.Context) int {\n      v, err := c.Size(ctx)\n      if err != nil {\n          panic(err)\n      }\n      return v\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func ExampleCache_MustSize() {\n      c := gcache.New()\n\n      // Add 10 elements without expiration\n      for i := 0; i < 10; i++ {\n          c.Set(ctx, i, i, 0)\n      }\n\n      // Size returns the number of items in the cache.\n      n := c.MustSize(ctx)\n      fmt.Println(n)\n\n      // Output:\n      // 10\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"mustdata",children:(0,r.jsx)(n.code,{children:"MustData"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: Data is returned as a ",(0,r.jsx)(n.code,{children:"map"})," type with a copy of all ",(0,r.jsx)(n.code,{children:"key-value pairs"})," ('key':'value') in the cache. If ",(0,r.jsx)(n.code,{children:"err"})," is not nil, it will ",(0,r.jsx)(n.code,{children:"panic(err)"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (c *Cache) MustData(ctx context.Context) map[interface{}]interface{} {\n      v, err := c.Data(ctx)\n      if err != nil {\n          panic(err)\n      }\n      return v\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_MustData() {\n      c := gcache.New()\n\n      c.SetMap(ctx, g.MapAnyAny{"k1": "v1"}, 0)\n\n      data := c.MustData(ctx)\n      fmt.Println(data)\n\n      // Set Cache\n      c.Set(ctx, "k5", "v5", 0)\n      data1, _ := c.Get(ctx, "k1")\n      fmt.Println(data1)\n\n      // Output:\n      // map[k1:v1]\n      // v1\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"mustkeys",children:(0,r.jsx)(n.code,{children:"MustKeys"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"MustKeys"})," returns all keys in the cache in the form of ",(0,r.jsx)(n.code,{children:"(slice)"}),", if ",(0,r.jsx)(n.code,{children:"err"})," is not nil, it will ",(0,r.jsx)(n.code,{children:"panic(err)"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (c *Cache) MustKeys(ctx context.Context) []interface{} {\n      v, err := c.Keys(ctx)\n      if err != nil {\n          panic(err)\n      }\n      return v\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_MustKeys() {\n      c := gcache.New()\n\n      c.SetMap(ctx, g.MapAnyAny{"k1": "v1", "k2": "v2"}, 0)\n\n      // MustKeys acts like Keys, but it panics if any error occurs.\n      keys1 := c.MustKeys(ctx)\n      fmt.Println(keys1)\n\n      // May Output:\n      // [k1 k2]\n\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"mustkeystrings",children:(0,r.jsx)(n.code,{children:"MustKeyStrings"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"MustKeyStrings"})," returns all the keys in the cache as a string ",(0,r.jsx)(n.code,{children:"(slice)"}),". If ",(0,r.jsx)(n.code,{children:"err"})," is not nil, it will ",(0,r.jsx)(n.code,{children:"panic(err)"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (c *Cache) MustKeyStrings(ctx context.Context) []string {\n      v, err := c.KeyStrings(ctx)\n      if err != nil {\n          panic(err)\n      }\n      return v\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_MustKeyStrings() {\n      c := gcache.New()\n\n      c.SetMap(ctx, g.MapAnyAny{"k1": "v1", "k2": "v2"}, 0)\n\n      // MustKeyStrings returns all keys in the cache as string slice.\n      // MustKeyStrings acts like KeyStrings, but it panics if any error occurs.\n      keys := c.MustKeyStrings(ctx)\n      fmt.Println(keys)\n\n      // May Output:\n      // [k1 k2]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"mustvalues",children:(0,r.jsx)(n.code,{children:"MustValues"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"MustValues"})," returns all values in the cache in the form of ",(0,r.jsx)(n.code,{children:"(slice)"}),". If ",(0,r.jsx)(n.code,{children:"err"})," is not nil, it will ",(0,r.jsx)(n.code,{children:"panic(err)"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (c *Cache) MustValues(ctx context.Context) []interface{} {\n      v, err := c.Values(ctx)\n      if err != nil {\n          panic(err)\n      }\n      return v\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleCache_MustValues() {\n      c := gcache.New()\n\n      // Write value\n      c.Set(ctx, "k1", "v1", 0)\n\n      // Values returns all values in the cache as slice.\n      data := c.MustValues(ctx)\n      fmt.Println(data)\n\n      // Output:\n      // [v1]\n}\n'})})]})}function x(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},250065:function(e,n,c){c.d(n,{Z:function(){return l},a:function(){return s}});var t=c(667294);let r={},i=t.createContext(r);function s(e){let n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);