"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["52040"],{356506:function(n,e,t){t.r(e),t.d(e,{metadata:()=>i,contentTitle:()=>a,default:()=>m,assets:()=>c,toc:()=>d,frontMatter:()=>r});var i=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u96C6\u5408\u7C7B\u578B-gset/\u96C6\u5408\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528","title":"Set - Usage","description":"Using set types and their basic operation methods in the GoFrame framework, including creating, adding, deleting, and traversing sets, as well as exploring advanced operations such as intersection, difference, union, and complement. In addition, the article also provides detailed explanations on inclusion judgment, set item popping, subset judgment, conditional writing, and demonstrates JSON serialization and deserialization with code examples.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u96C6\u5408\u7C7B\u578B-gset/\u96C6\u5408\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u96C6\u5408\u7C7B\u578B-gset","slug":"/docs/components/container-gset-example","permalink":"/en/docs/components/container-gset-example","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u96C6\u5408\u7C7B\u578B-gset/\u96C6\u5408\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/components/container-gset-example","title":"Set - Usage","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","GoFrame framework","set","gset","intersection","difference","union","complement","concurrent safety","serialization"],"description":"Using set types and their basic operation methods in the GoFrame framework, including creating, adding, deleting, and traversing sets, as well as exploring advanced operations such as intersection, difference, union, and complement. In addition, the article also provides detailed explanations on inclusion judgment, set item popping, subset judgment, conditional writing, and demonstrates JSON serialization and deserialization with code examples."},"sidebar":"mainSidebar","previous":{"title":"Set","permalink":"/en/docs/components/container-gset"},"next":{"title":"Set - Performance","permalink":"/en/docs/components/container-gset-benchmark"}}'),s=t("785893"),o=t("250065");let r={slug:"/docs/components/container-gset-example",title:"Set - Usage",sidebar_position:0,hide_title:!0,keywords:["GoFrame","GoFrame framework","set","gset","intersection","difference","union","complement","concurrent safety","serialization"],description:"Using set types and their basic operation methods in the GoFrame framework, including creating, adding, deleting, and traversing sets, as well as exploring advanced operations such as intersection, difference, union, and complement. In addition, the article also provides detailed explanations on inclusion judgment, set item popping, subset judgment, conditional writing, and demonstrates JSON serialization and deserialization with code examples."},a=void 0,c={},d=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Intersection, Difference, Union, Complement",id:"intersection-difference-union-complement",level:2},{value:"<code>Contains/ContainsI</code> Inclusion Judgment",id:"containscontainsi-inclusion-judgment",level:2},{value:"<code>Pop/Pops</code> Set Item Popping",id:"poppops-set-item-popping",level:2},{value:"<code>Join</code> Set Item Concatenation",id:"join-set-item-concatenation",level:2},{value:"<code>IsSubsetOf</code> Subset Judgment",id:"issubsetof-subset-judgment",level:2},{value:"<code>AddIfNotExist*</code> Conditional Writing",id:"addifnotexist-conditional-writing",level:2},{value:"<code>Walk</code> Traverse and Modify",id:"walk-traverse-and-modify",level:2},{value:"<code>JSON</code> Serialization/Deserialization",id:"json-serializationdeserialization",level:2}];function l(n){let e={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/container/gset"\n    "fmt"\n)\n\nfunc main() {\n    // Create a concurrent safe set object\n    s := gset.New(true)\n\n    // Add an item\n    s.Add(1)\n\n    // Add items in batch\n    s.Add([]interface{}{1, 2, 3}...)\n\n    // Size of the set\n    fmt.Println(s.Size())\n\n    // Check if an item exists in the set\n    fmt.Println(s.Contains(2))\n\n    // Return items as a slice\n    fmt.Println(s.Slice())\n\n    // Remove an item\n    s.Remove(3)\n\n    // Iterate through items\n    s.Iterator(func(v interface{}) bool {\n        fmt.Println("Iterator:", v)\n        return true\n    })\n\n    // Convert the set to a string\n    fmt.Println(s.String())\n\n    // Concurrent safe write lock operation\n    s.LockFunc(func(m map[interface{}]struct{}) {\n        m[4] = struct{}{}\n    })\n\n    // Concurrent safe read lock operation\n    s.RLockFunc(func(m map[interface{}]struct{}) {\n        fmt.Println(m)\n    })\n\n    // Clear the set\n    s.Clear()\n    fmt.Println(s.Size())\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"After execution, the output is:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-3",children:"true\n[1 2 3]\nIterator: 1\nIterator: 2\n[1 2]\nmap[1:{} 2:{} 4:{}]\n0\n"})}),"\n",(0,s.jsx)(e.h2,{id:"intersection-difference-union-complement",children:"Intersection, Difference, Union, Complement"}),"\n",(0,s.jsx)(e.p,{children:"We can achieve intersection, difference, union, and complement using the following methods, and return a new result set,"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:"func (set *Set) Intersect(others ...*Set) (newSet *Set)\nfunc (set *Set) Diff(others ...*Set) (newSet *Set)\nfunc (set *Set) Union(others ...*Set) (newSet *Set)\nfunc (set *Set) Complement(full *Set) (newSet *Set)\n"})}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Intersect"}),": Intersection, a set of elements that belong to both set and others."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Diff"}),": Difference, a set of elements that belong to set and not others."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Union"}),": Union, a set of elements that belong to either set or others."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Complement"}),": Complement, (precondition: set should be a subset of full) a set of elements that belong to the universal set full but not to set. If the given full set is not the universal set of set, it returns the difference between full and set."]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Through set methods, we can see that intersection, difference, and union methods support multiple set parameters for computation. The following is a simplified example, using only one parameter set."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/container/gset"\n)\n\nfunc main() {\n    s1 := gset.NewFrom(g.Slice{1, 2, 3})\n    s2 := gset.NewFrom(g.Slice{4, 5, 6})\n    s3 := gset.NewFrom(g.Slice{1, 2, 3, 4, 5, 6, 7})\n\n    // Intersection\n    fmt.Println(s3.Intersect(s1).Slice())\n    // Difference\n    fmt.Println(s3.Diff(s1).Slice())\n    // Union\n    fmt.Println(s1.Union(s2).Slice())\n    // Complement\n    fmt.Println(s1.Complement(s3).Slice())\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"After execution, the output is:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"[1 2 3]\n[4 5 6 7]\n[1 2 3 4 5 6]\n[7 4 5 6]\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"containscontainsi-inclusion-judgment",children:[(0,s.jsx)(e.code,{children:"Contains/ContainsI"})," Inclusion Judgment"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/gset"\n)\n\nfunc main() {\n    var set gset.StrSet\n    set.Add("a")\n    fmt.Println(set.Contains("a"))\n    fmt.Println(set.Contains("A"))\n    fmt.Println(set.ContainsI("A"))\n\n    // Output:\n    // true\n    // false\n    // true\n}\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"poppops-set-item-popping",children:[(0,s.jsx)(e.code,{children:"Pop/Pops"})," Set Item Popping"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/gset"\n)\n\nfunc main() {\n    var set gset.Set\n    set.Add(1, 2, 3, 4)\n    fmt.Println(set.Pop())\n    fmt.Println(set.Pops(2))\n    fmt.Println(set.Size())\n\n    // May Output:\n    // 1\n    // [2 3]\n    // 1\n}\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"join-set-item-concatenation",children:[(0,s.jsx)(e.code,{children:"Join"})," Set Item Concatenation"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/gset"\n)\n\nfunc main() {\n    var set gset.Set\n    set.Add("a", "b", "c", "d")\n    fmt.Println(set.Join(","))\n\n    // May Output:\n    // a,b,c,d\n}\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"issubsetof-subset-judgment",children:[(0,s.jsx)(e.code,{children:"IsSubsetOf"})," Subset Judgment"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/gset"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    var s1, s2 gset.Set\n    s1.Add(g.Slice{1, 2, 3}...)\n    s2.Add(g.Slice{2, 3}...)\n    fmt.Println(s1.IsSubsetOf(&s2))\n    fmt.Println(s2.IsSubsetOf(&s1))\n\n    // Output:\n    // false\n    // true\n}\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"addifnotexist-conditional-writing",children:[(0,s.jsx)(e.code,{children:"AddIfNotExist*"})," Conditional Writing"]}),"\n",(0,s.jsxs)(e.p,{children:["Conditional writing means writing if the specified item does not exist, and returning ",(0,s.jsx)(e.code,{children:"true"}),". Otherwise, skipping writing and returning ",(0,s.jsx)(e.code,{children:"false"}),". Related methods include:"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"AddIfNotExist"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"AddIfNotExistFunc"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"AddIfNotExistFuncLock"})}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"For detailed descriptions of the methods, please refer to the interface documentation or source code comments."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/gset"\n)\n\nfunc main() {\n    var set gset.Set\n    fmt.Println(set.AddIfNotExist(1))\n    fmt.Println(set.AddIfNotExist(1))\n    fmt.Println(set.Slice())\n\n    // Output:\n    // true\n    // false\n    // [1]\n}\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"walk-traverse-and-modify",children:[(0,s.jsx)(e.code,{children:"Walk"})," Traverse and Modify"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/gset"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    var (\n        set    gset.StrSet\n        names  = g.SliceStr{"user", "user_detail"}\n        prefix = "gf_"\n    )\n    set.Add(names...)\n    // Add prefix for given table names.\n    set.Walk(func(item string) string {\n        return prefix + item\n    })\n    fmt.Println(set.Slice())\n\n    // May Output:\n    // [gf_user gf_user_detail]\n}\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"json-serializationdeserialization",children:[(0,s.jsx)(e.code,{children:"JSON"})," Serialization/Deserialization"]}),"\n",(0,s.jsxs)(e.p,{children:["All container types under the ",(0,s.jsx)(e.code,{children:"gset"})," module implement interfaces for standard library ",(0,s.jsx)(e.code,{children:"json"})," data format serialization/deserialization."]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"Marshal"})}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n       "encoding/json"\n       "fmt"\n       "github.com/gogf/gf/v2/container/gset"\n)\n\nfunc main() {\n       type Student struct {\n           Id     int\n           Name   string\n           Scores *gset.IntSet\n       }\n       s := Student{\n           Id:     1,\n           Name:   "john",\n           Scores: gset.NewIntSetFrom([]int{100, 99, 98}),\n       }\n       b, _ := json.Marshal(s)\n       fmt.Println(string(b))\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"After execution, the terminal output is:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'{"Id":1,"Name":"john","Scores":[100,99,98]}\n'})}),"\n",(0,s.jsxs)(e.ol,{start:"2",children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"Unmarshal"})}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package main\n\n\nimport (\n       "encoding/json"\n       "fmt"\n       "github.com/gogf/gf/v2/container/gset"\n)\n\n\nfunc main() {\n       b := []byte(`{"Id":1,"Name":"john","Scores":[100,99,98]}`)\n       type Student struct {\n           Id     int\n           Name   string\n           Scores *gset.IntSet\n       }\n       s := Student{}\n       json.Unmarshal(b, &s)\n       fmt.Println(s)\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"After execution, the output is:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"{1 john [100,99,98]}\n"})})]})}function m(n={}){let{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},250065:function(n,e,t){t.d(e,{Z:function(){return a},a:function(){return r}});var i=t(667294);let s={},o=i.createContext(s);function r(n){let e=i.useContext(o);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);