"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["9853"],{592164:function(e,t,o){o.r(t),o.d(t,{metadata:()=>n,contentTitle:()=>c,default:()=>d,assets:()=>s,toc:()=>a,frontMatter:()=>l});var n=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6-Writer\u63A5\u53E3","title":"Logging - Writer Interface","description":"Use the Writer interface of the glog module in the GoFrame framework to customize log output. By implementing a custom Writer object, logs can be flexibly output to different targets such as files, standard output, and Graylog. Additionally, sample code is provided to demonstrate how to implement log HOOK functionality to promptly notify monitoring services of serious errors.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6-Writer\u63A5\u53E3.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6","slug":"/docs/core/glog-writer","permalink":"/en/docs/core/glog-writer","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6-Writer\u63A5\u53E3.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732541616000,"sidebarPosition":11,"frontMatter":{"slug":"/docs/core/glog-writer","title":"Logging - Writer Interface","sidebar_position":11,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","Log Component","Writer Interface","Custom Log Output","Custom Writer","glog Module","Log HOOK","Graylog","Centralized Log Management"],"description":"Use the Writer interface of the glog module in the GoFrame framework to customize log output. By implementing a custom Writer object, logs can be flexibly output to different targets such as files, standard output, and Graylog. Additionally, sample code is provided to demonstrate how to implement log HOOK functionality to promptly notify monitoring services of serious errors."},"sidebar":"mainSidebar","previous":{"title":"Logging - Debug Info","permalink":"/en/docs/core/glog-debug"},"next":{"title":"Logging - Flags","permalink":"/en/docs/core/glog-flags"}}'),r=o("785893"),i=o("250065");let l={slug:"/docs/core/glog-writer",title:"Logging - Writer Interface",sidebar_position:11,hide_title:!0,keywords:["GoFrame","GoFrame Framework","Log Component","Writer Interface","Custom Log Output","Custom Writer","glog Module","Log HOOK","Graylog","Centralized Log Management"],description:"Use the Writer interface of the glog module in the GoFrame framework to customize log output. By implementing a custom Writer object, logs can be flexibly output to different targets such as files, standard output, and Graylog. Additionally, sample code is provided to demonstrate how to implement log HOOK functionality to promptly notify monitoring services of serious errors."},c=void 0,s={},a=[{value:"Custom <code>Writer</code> Interface",id:"custom-writer-interface",level:2},{value:"Example 1: Implementing Log <code>HOOK</code>",id:"example-1-implementing-log-hook",level:2},{value:"Example 2: Integrating with <code>Graylog</code>",id:"example-2-integrating-with-graylog",level:2}];function g(e){let t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"Writer"})," interface is the lowest-level ",(0,r.jsx)(t.code,{children:"IO"})," writing interface. If your business needs to customize the log content printing, it is recommended to use the ",(0,r.jsx)(t.code,{children:"Handler"})," feature. Refer to the section: ",(0,r.jsx)(t.a,{href:"/en/docs/core/glog-handler",children:"Logging - Handler"})]})}),"\n",(0,r.jsxs)(t.h2,{id:"custom-writer-interface",children:["Custom ",(0,r.jsx)(t.code,{children:"Writer"})," Interface"]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"glog"})," module implements log content printing for both standard output and file output. Of course, developers can also implement custom log content output by customizing the ",(0,r.jsx)(t.code,{children:"io.Writer"})," interface. ",(0,r.jsx)(t.code,{children:"io.Writer"})," is a content output interface provided by the standard library, defined as follows:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"type Writer interface {\n    Write(p []byte) (n int, err error)\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["We can implement custom ",(0,r.jsx)(t.code,{children:"Writer"})," output using the ",(0,r.jsx)(t.code,{children:"SetWriter"})," method or the chaining method ",(0,r.jsx)(t.code,{children:"To"}),". Developers can define operations in this ",(0,r.jsx)(t.code,{children:"Writer"}),", and they can also integrate other module functions within it."]}),"\n",(0,r.jsxs)(t.p,{children:["Additionally, the ",(0,r.jsx)(t.code,{children:"glog.Logger"})," object has already implemented the ",(0,r.jsx)(t.code,{children:"io.Writer"})," interface, making it very convenient for developers to integrate ",(0,r.jsx)(t.code,{children:"glog"})," into other modules."]}),"\n",(0,r.jsxs)(t.h2,{id:"example-1-implementing-log-hook",children:["Example 1: Implementing Log ",(0,r.jsx)(t.code,{children:"HOOK"})]}),"\n",(0,r.jsxs)(t.p,{children:["In this example, we implement a custom ",(0,r.jsx)(t.code,{children:"Writer"})," object ",(0,r.jsx)(t.code,{children:"MyWriter"}),". In the ",(0,r.jsx)(t.code,{children:"Writer"})," interface implementation of this object, we evaluate the log content. If a ",(0,r.jsx)(t.code,{children:"PANI"})," or ",(0,r.jsx)(t.code,{children:"FATA"})," error occurs, it indicates a severe error, and the interface will first notify the ",(0,r.jsx)(t.code,{children:"Monitor"})," monitoring service through an ",(0,r.jsx)(t.code,{children:"HTTP"})," interface. Then, the log content is written to files and standard output using the ",(0,r.jsx)(t.code,{children:"glog"})," module according to the configuration."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "fmt"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n    "github.com/gogf/gf/v2/os/glog"\n    "github.com/gogf/gf/v2/text/gregex"\n)\n\ntype MyWriter struct {\n    logger *glog.Logger\n}\n\nfunc (w *MyWriter) Write(p []byte) (n int, err error) {\n    var (\n        s   = string(p)\n        ctx = context.Background()\n    )\n    if gregex.IsMatchString(`PANI|FATA`, s) {\n        fmt.Println("SERIOUS ISSUE OCCURRED!! I\'d better tell monitor in first time!")\n        g.Client().PostContent(ctx, "http://monitor.mydomain.com", s)\n    }\n    return w.logger.Write(p)\n}\n\nfunc main() {\n    var ctx = context.Background()\n    glog.SetWriter(&MyWriter{\n        logger: glog.New(),\n    })\n    glog.Fatal(ctx, "FATAL ERROR")\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"After execution, the output result is:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-html",children:"SERIOUS ISSUE OCCURRED!! I'd better tell monitor in first time!\n2019-05-23 20:14:49.374 [FATA] FATAL ERROR\nStack:\n1. /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/geg/os/glog/glog_writer_hook.go:27\n"})}),"\n",(0,r.jsxs)(t.h2,{id:"example-2-integrating-with-graylog",children:["Example 2: Integrating with ",(0,r.jsx)(t.code,{children:"Graylog"})]}),"\n",(0,r.jsxs)(t.p,{children:["Suppose we need to output logs to both files and standard output, and simultaneously output logs to ",(0,r.jsx)(t.code,{children:"Graylog"}),". Clearly, this can only be achieved by customizing the ",(0,r.jsx)(t.code,{children:"Writer"}),". Similarly, we can customize the output to other log collection components or databases."]}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"Graylog"})," is a centralized log management solution comparable to ",(0,r.jsx)(t.code,{children:"ELK"}),", supporting data collection, retrieval, and visualized Dashboards."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Example code:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "github.com/gogf/gf/v2/os/glog"\n    "github.com/robertkowalski/graylog-golang"\n)\n\ntype MyGrayLogWriter struct {\n    gelf    *gelf.Gelf\n    logger  *glog.Logger\n}\n\nfunc (w *MyGrayLogWriter) Write(p []byte) (n int, err error) {\n    w.gelf.Send(p)\n    return w.logger.Write(p)\n}\n\nfunc main() {\n    var ctx = context.Background()\n    glog.SetWriter(&MyGrayLogWriter{\n        logger : glog.New(),\n        gelf   : gelf.New(gelf.Config{\n            GraylogPort     : 80,\n            GraylogHostname : "graylog-host.com",\n            Connection      : "wan",\n            MaxChunkSizeWan : 42,\n            MaxChunkSizeLan : 1337,\n        }),\n    })\n    glog.Println(ctx, "test log")\n}\n'})})]})}function d(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},250065:function(e,t,o){o.d(t,{Z:function(){return c},a:function(){return l}});var n=o(667294);let r={},i=n.createContext(r);function l(e){let t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);