"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["77996"],{537115:function(e,t,n){n.r(t),n.d(t,{metadata:()=>r,contentTitle:()=>c,default:()=>h,assets:()=>d,toc:()=>l,frontMatter:()=>i});var r=JSON.parse('{"id":"docs/WEB\u670D\u52A1\u5F00\u53D1/\u8DEF\u7531\u7BA1\u7406/\u8DEF\u7531\u7BA1\u7406-\u8DEF\u7531\u6CE8\u518C/\u8DEF\u7531\u6CE8\u518C-\u5BF9\u8C61\u6CE8\u518C","title":"Registration - Object","description":"Object registering executes route registration through an instantiated object. Each request is handled by the object, remaining in memory without being released. This document introduces methods related to object registering in the GoFrame framework, such as BindObject, BindObjectMethod, and BindObjectRest, and explains how objects are registered following RESTful design. Additionally, it discusses built-in route variables, naming conventions, and Init and Shut constructor and destructor methods.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/WEB\u670D\u52A1\u5F00\u53D1/\u8DEF\u7531\u7BA1\u7406/\u8DEF\u7531\u7BA1\u7406-\u8DEF\u7531\u6CE8\u518C/\u8DEF\u7531\u6CE8\u518C-\u5BF9\u8C61\u6CE8\u518C.md","sourceDirName":"docs/WEB\u670D\u52A1\u5F00\u53D1/\u8DEF\u7531\u7BA1\u7406/\u8DEF\u7531\u7BA1\u7406-\u8DEF\u7531\u6CE8\u518C","slug":"/docs/web/router-registering-struct","permalink":"/en/docs/web/router-registering-struct","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/WEB\u670D\u52A1\u5F00\u53D1/\u8DEF\u7531\u7BA1\u7406/\u8DEF\u7531\u7BA1\u7406-\u8DEF\u7531\u6CE8\u518C/\u8DEF\u7531\u6CE8\u518C-\u5BF9\u8C61\u6CE8\u518C.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732538474000,"sidebarPosition":1,"frontMatter":{"slug":"/docs/web/router-registering-struct","title":"Registration - Object","sidebar_position":1,"hide_title":true,"keywords":["route registering","object registering","GoFrame","GoFrame framework","bind method","RESTful","route variables","naming conventions","constructor method","destructor method"],"description":"Object registering executes route registration through an instantiated object. Each request is handled by the object, remaining in memory without being released. This document introduces methods related to object registering in the GoFrame framework, such as BindObject, BindObjectMethod, and BindObjectRest, and explains how objects are registered following RESTful design. Additionally, it discusses built-in route variables, naming conventions, and Init and Shut constructor and destructor methods."},"sidebar":"mainSidebar","previous":{"title":"Registration - Function","permalink":"/en/docs/web/router-registering-callback"},"next":{"title":"Registration - Group Routing","permalink":"/en/docs/web/router-registering-group"}}'),o=n("785893"),s=n("250065");let i={slug:"/docs/web/router-registering-struct",title:"Registration - Object",sidebar_position:1,hide_title:!0,keywords:["route registering","object registering","GoFrame","GoFrame framework","bind method","RESTful","route variables","naming conventions","constructor method","destructor method"],description:"Object registering executes route registration through an instantiated object. Each request is handled by the object, remaining in memory without being released. This document introduces methods related to object registering in the GoFrame framework, such as BindObject, BindObjectMethod, and BindObjectRest, and explains how objects are registered following RESTful design. Additionally, it discusses built-in route variables, naming conventions, and Init and Shut constructor and destructor methods."},c=void 0,d={},l=[{value:"Object Registering - <code>BindObject</code>",id:"object-registering---bindobject",level:2},{value:"Built-In Route Variables",id:"built-in-route-variables",level:3},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Object Method Registration",id:"object-method-registration",level:3},{value:"Binding Route Methods - <code>BindObjectMethod</code>",id:"binding-route-methods---bindobjectmethod",level:2},{value:"<code>RESTful</code> Object Registering - <code>BindObjectRest</code>",id:"restful-object-registering---bindobjectrest",level:2},{value:"Constructor Method <code>Init</code> and Destructor Method <code>Shut</code>",id:"constructor-method-init-and-destructor-method-shut",level:2}];function a(e){let t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Object Registering"})," uses an instantiated object to execute route registration, with every request handled by this object (same object), which ",(0,o.jsx)(t.strong,{children:"remains in memory without being released"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Related Methods"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:"func (s *Server) BindObject(pattern string, object interface{}, methods ...string) error\nfunc (s *Server) BindObjectMethod(pattern string, object interface{}, method string) error\nfunc (s *Server) BindObjectRest(pattern string, object interface{}) error\n"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Preliminary Convention"}),": The methods that need to be registered for routes must be ",(0,o.jsx)(t.strong,{children:"public methods"})," and the ",(0,o.jsx)(t.strong,{children:"method definition"})," must be:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:"func(r *ghttp.Request)\n"})}),"\n",(0,o.jsx)(t.p,{children:"Otherwise, registration cannot be completed, and there will be an error prompt during route registration, such as:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"panic: API conversion: interface {} is xxx, not func(*ghttp.Request)\n"})}),"\n",(0,o.jsxs)(t.h2,{id:"object-registering---bindobject",children:["Object Registering - ",(0,o.jsx)(t.code,{children:"BindObject"})]}),"\n",(0,o.jsxs)(t.p,{children:["We can complete object registration using the ",(0,o.jsx)(t.code,{children:"BindObject"})," method."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\ntype Controller struct{}\n\nfunc (c *Controller) Index(r *ghttp.Request) {\n    r.Response.Write("index")\n}\n\nfunc (c *Controller) Show(r *ghttp.Request) {\n    r.Response.Write("show")\n}\n\nfunc main() {\n    s := g.Server()\n    c := new(Controller)\n    s.BindObject("/object", c)\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["As shown, an object is generated during route registration (the object is generated when the ",(0,o.jsx)(t.code,{children:"Server"})," is started), and no matter how many requests come in afterward, the ",(0,o.jsx)(t.code,{children:"Server"})," will delegate the request to the corresponding method of the object for processing. After executing this example, the output route table in the terminal is as follows:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-text",children:"SERVER | DOMAIN  | ADDRESS | METHOD |     ROUTE     |         HANDLER          | MIDDLEWARE\n|---------|---------|---------|--------|---------------|--------------------------|------------|\n  default | default | :8199   | ALL    | /object       | main.(*Controller).Index |\n|---------|---------|---------|--------|---------------|--------------------------|------------|\n  default | default | :8199   | ALL    | /object/index | main.(*Controller).Index |\n|---------|---------|---------|--------|---------------|--------------------------|------------|\n  default | default | :8199   | ALL    | /object/show  | main.(*Controller).Show  |\n|---------|---------|---------|--------|---------------|--------------------------|------------|\n"})}),"\n",(0,o.jsxs)(t.p,{children:["You can then view the effect via ",(0,o.jsx)(t.a,{href:"http://127.0.0.1:8199/object/show",children:"http://127.0.0.1:8199/object/show"}),"."]}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"Index"})," method in the controller is a special method; for example, when the registered route rule is ",(0,o.jsx)(t.code,{children:"/user"}),", an HTTP request to ",(0,o.jsx)(t.code,{children:"/user"})," will automatically map to the controller's ",(0,o.jsx)(t.code,{children:"Index"})," method. That is, accessing ",(0,o.jsx)(t.code,{children:"/user"})," and ",(0,o.jsx)(t.code,{children:"/user/index"})," will have the same execution effect."]})}),"\n",(0,o.jsx)(t.h3,{id:"built-in-route-variables",children:"Built-In Route Variables"}),"\n",(0,o.jsxs)(t.p,{children:["When using the ",(0,o.jsx)(t.code,{children:"BindObject"})," method for object registration, two built-in variables can be used in the route rule: ",(0,o.jsx)(t.code,{children:"{.struct}"})," and ",(0,o.jsx)(t.code,{children:"{.method}"}),". The former represents the current ",(0,o.jsx)(t.strong,{children:"object name"}),", and the latter the current registered ",(0,o.jsx)(t.strong,{children:"method name"}),". Let's take a look at an example:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\ntype Order struct{}\n\nfunc (o *Order) List(r *ghttp.Request) {\n    r.Response.Write("list")\n}\n\nfunc main() {\n    s := g.Server()\n    o := new(Order)\n    s.BindObject("/{.struct}-{.method}", o)\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"After execution, the terminal outputs the route table as follows:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-text",children:"SERVER | DOMAIN  | ADDRESS | METHOD |    ROUTE    |      HANDLER       | MIDDLEWARE\n|---------|---------|---------|--------|-------------|--------------------|------------|\n  default | default | :8199   | ALL    | /order-list | main.(*Order).List |\n|---------|---------|---------|--------|-------------|--------------------|------------|\n"})}),"\n",(0,o.jsxs)(t.p,{children:["We can try accessing ",(0,o.jsx)(t.a,{href:"http://127.0.0.1:8199/order-list",children:"http://127.0.0.1:8199/order-list"}),", and the page will output ",(0,o.jsx)(t.code,{children:"list"}),". If you don\u2019t use built-in variables in the route rule, then by default, the method will be appended to the end of the specified route rule."]}),"\n",(0,o.jsx)(t.h3,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,o.jsxs)(t.p,{children:["When registering routes through objects, route rules can be automatically generated according to the object and method names. The default route rule is that when a method name contains multiple ",(0,o.jsx)(t.code,{children:"words"})," (words are distinguished by capitalized characters), the route controller automatically uses the hyphen ",(0,o.jsx)(t.code,{children:"-"})," to connect them, so the method name needs to have a ",(0,o.jsx)(t.code,{children:"-"})," when accessing."]}),"\n",(0,o.jsxs)(t.p,{children:["For example, if the method name is ",(0,o.jsx)(t.code,{children:"UserName"}),", the generated route will be ",(0,o.jsx)(t.code,{children:"user-name"}),"; if the method name is ",(0,o.jsx)(t.code,{children:"ShowListItems"}),", the generated route will be ",(0,o.jsx)(t.code,{children:"show-list-items"}),", and so on."]}),"\n",(0,o.jsxs)(t.p,{children:["Additionally, we can use the ",(0,o.jsx)(t.code,{children:".Server.SetNameToUriType"})," method to set how route names are generated from object method names. Currently, there are ",(0,o.jsx)(t.code,{children:"4"})," types supported, corresponding to ",(0,o.jsx)(t.code,{children:"4"})," constant definitions:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"UriTypeDefault  = 0 // (default) all lowercase, words connected by '-'\nUriTypeFullName = 1 // no processing, use the original name to build the URI\nUriTypeAllLower = 2 // lowercase only, no connecting symbols between words\nUriTypeCamel    = 3 // camel case naming\n"})}),"\n",(0,o.jsx)(t.p,{children:"Note: Set this parameter before registering routes through the object, as it will not be effective after the registration. The default rule will be used."}),"\n",(0,o.jsx)(t.p,{children:"Let's look at an example:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\ntype User struct{}\n\nfunc (u *User) ShowList(r *ghttp.Request) {\n    r.Response.Write("list")\n}\n\nfunc main() {\n    u := new(User)\n    s1 := g.Server("UriTypeDefault")\n    s2 := g.Server("UriTypeFullName")\n    s3 := g.Server("UriTypeAllLower")\n    s4 := g.Server("UriTypeCamel")\n\n    s1.SetNameToUriType(ghttp.UriTypeDefault)\n    s2.SetNameToUriType(ghttp.UriTypeFullName)\n    s3.SetNameToUriType(ghttp.UriTypeAllLower)\n    s4.SetNameToUriType(ghttp.UriTypeCamel)\n\n    s1.BindObject("/{.struct}/{.method}", u)\n    s2.BindObject("/{.struct}/{.method}", u)\n    s3.BindObject("/{.struct}/{.method}", u)\n    s4.BindObject("/{.struct}/{.method}", u)\n\n    s1.SetPort(8100)\n    s2.SetPort(8200)\n    s3.SetPort(8300)\n    s4.SetPort(8400)\n\n    s1.Start()\n    s2.Start()\n    s3.Start()\n    s4.Start()\n\n    g.Wait()\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["To demonstrate the effect contrast, this example uses a ",(0,o.jsx)(t.code,{children:"multi-Server"})," run method, configuring and running different name conversion methods with different ",(0,o.jsx)(t.code,{children:"Servers"}),", allowing us to conveniently access different ",(0,o.jsx)(t.code,{children:"Servers"})," (bound to different ports) in the same program to see different results."]}),"\n",(0,o.jsx)(t.p,{children:"After execution, the terminal outputs the route table as follows:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-text",children:"      SERVER    | DOMAIN  | ADDRESS | METHOD |      ROUTE      |        HANDLER        | MIDDLEWARE\n-----------------|---------|---------|--------|-----------------|-----------------------|-------------\n  UriTypeDefault | default | :8100   | ALL    | /user/show-list | main.(*User).ShowList |\n-----------------|---------|---------|--------|-----------------|-----------------------|-------------\n\n      SERVER      | DOMAIN  | ADDRESS | METHOD |     ROUTE      |        HANDLER        | MIDDLEWARE\n------------------|---------|---------|--------|----------------|-----------------------|-------------\n  UriTypeFullName | default | :8200   | ALL    | /User/ShowList | main.(*User).ShowList |\n------------------|---------|---------|--------|----------------|-----------------------|-------------\n\n      SERVER      | DOMAIN  | ADDRESS | METHOD |     ROUTE      |        HANDLER        | MIDDLEWARE\n------------------|---------|---------|--------|----------------|-----------------------|-------------\n  UriTypeAllLower | default | :8300   | ALL    | /user/showlist | main.(*User).ShowList |\n------------------|---------|---------|--------|----------------|-----------------------|-------------\n\n     SERVER    | DOMAIN  | ADDRESS | METHOD |     ROUTE      |        HANDLER        | MIDDLEWARE\n---------------|---------|---------|--------|----------------|-----------------------|-------------\n  UriTypeCamel | default | :8400   | ALL    | /user/showList | main.(*User).ShowList |\n---------------|---------|---------|--------|----------------|-----------------------|-------------\n"})}),"\n",(0,o.jsxs)(t.p,{children:["You can visit the following ",(0,o.jsx)(t.code,{children:"URLs"})," to get the desired results:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"http://127.0.0.1:8100/user/show-list\nhttp://127.0.0.1:8200/User/ShowList\nhttp://127.0.0.1:8300/user/showlist\nhttp://127.0.0.1:8400/user/showList\n"})}),"\n",(0,o.jsx)(t.h3,{id:"object-method-registration",children:"Object Method Registration"}),"\n",(0,o.jsxs)(t.p,{children:["If there are several public methods in the controller, but you only want to register a few of them and not make others public, what should you do? We can replace the implementation by passing the ",(0,o.jsx)(t.strong,{children:"third optional parameter"})," to ",(0,o.jsx)(t.code,{children:"BindObject"}),", which supports passing ",(0,o.jsx)(t.strong,{children:"multiple"})," method names separated by a comma ",(0,o.jsx)(t.code,{children:","})," ( ",(0,o.jsx)(t.strong,{children:"method names are case-sensitive"}),")."]}),"\n",(0,o.jsx)(t.p,{children:"Example usage:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\ntype Controller struct{}\n\nfunc (c *Controller) Index(r *ghttp.Request) {\n    r.Response.Write("index")\n}\n\nfunc (c *Controller) Show(r *ghttp.Request) {\n    r.Response.Write("show")\n}\n\nfunc main() {\n    s := g.Server()\n    c := new(Controller)\n    s.BindObject("/object", c, "Show")\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"After execution, the terminal outputs the route table as:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-text",children:"SERVER | DOMAIN  | ADDRESS | METHOD |    ROUTE     |         HANDLER         | MIDDLEWARE\n|---------|---------|---------|--------|--------------|-------------------------|------------|\n  default | default | :8199   | ALL    | /object/show | main.(*Controller).Show |\n|---------|---------|---------|--------|--------------|-------------------------|------------|\n"})}),"\n",(0,o.jsxs)(t.h2,{id:"binding-route-methods---bindobjectmethod",children:["Binding Route Methods - ",(0,o.jsx)(t.code,{children:"BindObjectMethod"})]}),"\n",(0,o.jsxs)(t.p,{children:["We can bind specified routes to specific methods ( ",(0,o.jsx)(t.strong,{children:"method names are case-sensitive"})," ) using the ",(0,o.jsx)(t.code,{children:"BindObjectMethod"}),"."]}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["The difference between ",(0,o.jsx)(t.code,{children:"BindObjectMethod"})," and ",(0,o.jsx)(t.code,{children:"BindObject"})," is that ",(0,o.jsx)(t.code,{children:"BindObjectMethod"})," binds a specific method of the object to the specified route rule, with the third ",(0,o.jsx)(t.code,{children:"method"})," parameter able to specify only one method name. In contrast, when registering with ",(0,o.jsx)(t.code,{children:"BindObject"}),", all routes are generated according to rules based on object method names, and the third ",(0,o.jsx)(t.code,{children:"methods"})," parameter can specify multiple method names for registration."]})}),"\n",(0,o.jsx)(t.p,{children:"Here's an example:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\ntype Controller struct{}\n\nfunc (c *Controller) Index(r *ghttp.Request) {\n    r.Response.Write("index")\n}\n\nfunc (c *Controller) Show(r *ghttp.Request) {\n    r.Response.Write("show")\n}\n\nfunc main() {\n    s := g.Server()\n    c := new(Controller)\n    s.BindObjectMethod("/show", c, "Show")\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"After execution, the terminal outputs the route table as follows:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-text",children:"SERVER | DOMAIN  | ADDRESS | METHOD | ROUTE |         HANDLER         | MIDDLEWARE\n|---------|---------|---------|--------|-------|-------------------------|------------|\n  default | default | :8199   | ALL    | /show | main.(*Controller).Show |\n|---------|---------|---------|--------|-------|-------------------------|------------|\n"})}),"\n",(0,o.jsxs)(t.h2,{id:"restful-object-registering---bindobjectrest",children:[(0,o.jsx)(t.code,{children:"RESTful"})," Object Registering - ",(0,o.jsx)(t.code,{children:"BindObjectRest"})]}),"\n",(0,o.jsxs)(t.p,{children:["Controllers designed with the ",(0,o.jsx)(t.code,{children:"RESTful"})," approach are typically used for ",(0,o.jsx)(t.code,{children:"API"})," services. ",(0,o.jsxs)(t.strong,{children:["In this mode, the ",(0,o.jsx)(t.code,{children:"HTTP"})," Method maps to the corresponding method name in the controller"]}),", for instance, the ",(0,o.jsx)(t.code,{children:"POST"})," method will map to the ",(0,o.jsx)(t.code,{children:"Post"})," method in the controller (public method, starting with an uppercase letter), and the ",(0,o.jsx)(t.code,{children:"DELETE"})," method will map to the ",(0,o.jsx)(t.code,{children:"Delete"})," method in the controller, and so on. Other methods not named using ",(0,o.jsx)(t.code,{children:"HTTP Method"})," conventions, even if defined as public methods, will not be automatically registered and will be invisible to the application. Of course, if the controller does not define a method corresponding to the ",(0,o.jsx)(t.code,{children:"HTTP Method"}),", the request under that ",(0,o.jsx)(t.code,{children:"Method"})," will return ",(0,o.jsx)(t.code,{children:"HTTP Status 404"}),"."]}),"\n",(0,o.jsx)(t.admonition,{type:"warning",children:(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"GoFrame's"})," ",(0,o.jsx)(t.code,{children:"RESTful"})," object registration method is a strict ",(0,o.jsx)(t.code,{children:"REST"})," route registration method. We can consider the controller's object as the resource in ",(0,o.jsx)(t.code,{children:"REST"}),", and the ",(0,o.jsx)(t.code,{children:"HTTP Method"})," methods as the resource operation methods in the ",(0,o.jsx)(t.code,{children:"REST"})," specification. If you are not very familiar with the ",(0,o.jsx)(t.code,{children:"REST"})," specification or do not want a very strict ",(0,o.jsx)(t.code,{children:"RESTful"})," routing design, please ignore this section."]})}),"\n",(0,o.jsxs)(t.p,{children:["We can complete the ",(0,o.jsx)(t.code,{children:"REST"})," object registration using the ",(0,o.jsx)(t.code,{children:"BindObjectRest"})," method, as shown in the example:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\ntype Controller struct{}\n\n// RESTFul - GET\nfunc (c *Controller) Get(r *ghttp.Request) {\n    r.Response.Write("GET")\n}\n\n// RESTFul - POST\nfunc (c *Controller) Post(r *ghttp.Request) {\n    r.Response.Write("POST")\n}\n\n// RESTFul - DELETE\nfunc (c *Controller) Delete(r *ghttp.Request) {\n    r.Response.Write("DELETE")\n}\n\n// This method cannot be mapped and will not be accessible\nfunc (c *Controller) Hello(r *ghttp.Request) {\n    r.Response.Write("Hello")\n}\n\nfunc main() {\n    s := g.Server()\n    c := new(Controller)\n    s.BindObjectRest("/object", c)\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"Upon execution, the terminal outputs the route table as follows:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-text",children:"SERVER | DOMAIN  | ADDRESS | METHOD |  ROUTE  |          HANDLER          | MIDDLEWARE\n|---------|---------|---------|--------|---------|---------------------------|------------|\n  default | default | :8199   | DELETE | /object | main.(*Controller).Delete |\n|---------|---------|---------|--------|---------|---------------------------|------------|\n  default | default | :8199   | GET    | /object | main.(*Controller).Get    |\n|---------|---------|---------|--------|---------|---------------------------|------------|\n  default | default | :8199   | POST   | /object | main.(*Controller).Post   |\n|---------|---------|---------|--------|---------|---------------------------|------------|\n"})}),"\n",(0,o.jsxs)(t.h2,{id:"constructor-method-init-and-destructor-method-shut",children:["Constructor Method ",(0,o.jsx)(t.code,{children:"Init"})," and Destructor Method ",(0,o.jsx)(t.code,{children:"Shut"})]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"Init"})," and ",(0,o.jsx)(t.code,{children:"Shut"})," methods in objects are special methods that are automatically invoked by the ",(0,o.jsx)(t.code,{children:"Server"})," during the ",(0,o.jsx)(t.code,{children:"HTTP"})," request process (similar to constructor and destructor functions)."]}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"Init"})," Callback Method"]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"A method for initialization when the object receives a request, which is called back before the service API is invoked."}),"\n",(0,o.jsx)(t.p,{children:"Method definition:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'// "Constructor" object method\nfunc (c *Controller) Init(r *ghttp.Request) {\n\n}\n'})}),"\n",(0,o.jsxs)(t.ol,{start:"2",children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"Shut"})," Callback Method"]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Automatically called by the ",(0,o.jsx)(t.code,{children:"Server"})," when the request ends, which can be used for the object to perform some cleanup operations."]}),"\n",(0,o.jsx)(t.p,{children:"Method definition:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'// "Destructor" object method\nfunc (c *Controller) Shut(r *ghttp.Request) {\n\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"Let's look at an example:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\ntype Controller struct{}\n\nfunc (c *Controller) Init(r *ghttp.Request) {\n    r.Response.Writeln("Init")\n}\n\nfunc (c *Controller) Shut(r *ghttp.Request) {\n    r.Response.Writeln("Shut")\n}\n\nfunc (c *Controller) Hello(r *ghttp.Request) {\n    r.Response.Writeln("Hello")\n}\n\nfunc main() {\n    s := g.Server()\n    c := new(Controller)\n    s.BindObject("/object", c)\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"After execution, the terminal route table output is as follows:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-text",children:"SERVER | DOMAIN  | ADDRESS | METHOD |     ROUTE     |         HANDLER          | MIDDLEWARE\n|---------|---------|---------|--------|---------------|--------------------------|------------|\n  default | default | :8199   | ALL    | /object/hello | main.(*Controller).Hello |\n|---------|---------|---------|--------|---------------|--------------------------|------------|\n"})}),"\n",(0,o.jsxs)(t.p,{children:["As shown, ",(0,o.jsx)(t.code,{children:"Init"})," and ",(0,o.jsx)(t.code,{children:"Shut"})," are not automatically registered as route methods, and when accessing ",(0,o.jsx)(t.a,{href:"http://127.0.0.1:8199/object/hello",children:"http://127.0.0.1:8199/object/hello"}),", the output result will be:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-Init",children:"Hello\nShut\n"})})]})}function h(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},250065:function(e,t,n){n.d(t,{Z:function(){return c},a:function(){return i}});var r=n(667294);let o={},s=r.createContext(o);function i(e){let t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);