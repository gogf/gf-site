"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["3202"],{303092:function(n,e,t){t.r(e),t.d(e,{metadata:()=>o,contentTitle:()=>c,default:()=>v,assets:()=>a,toc:()=>l,frontMatter:()=>r});var o=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u7C7B\u578B\u8F6C\u6362/\u7C7B\u578B\u8F6C\u6362-\u57FA\u672C\u7C7B\u578B","title":"Type Conversion - Types","description":"The method of common basic type conversion using the GoFrame framework. Focuses on the application of the gconv package in converting integers, floating-point numbers, booleans, strings, etc. Provides simple and understandable code examples demonstrating how to use these conversion functions for efficient type conversion in actual development.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u7C7B\u578B\u8F6C\u6362/\u7C7B\u578B\u8F6C\u6362-\u57FA\u672C\u7C7B\u578B.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u7C7B\u578B\u8F6C\u6362","slug":"/docs/core/gconv-basic","permalink":"/en/docs/core/gconv-basic","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u7C7B\u578B\u8F6C\u6362/\u7C7B\u578B\u8F6C\u6362-\u57FA\u672C\u7C7B\u578B.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/core/gconv-basic","title":"Type Conversion - Types","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","GoFrame framework","type conversion","basic types","gconv","Int conversion","Uint conversion","Float conversion","Bool conversion","string conversion"],"description":"The method of common basic type conversion using the GoFrame framework. Focuses on the application of the gconv package in converting integers, floating-point numbers, booleans, strings, etc. Provides simple and understandable code examples demonstrating how to use these conversion functions for efficient type conversion in actual development."},"sidebar":"mainSidebar","previous":{"title":"Type Conversion","permalink":"/en/docs/core/gconv"},"next":{"title":"Type Conversion - Map","permalink":"/en/docs/core/gconv-map"}}'),i=t("785893"),s=t("250065");let r={slug:"/docs/core/gconv-basic",title:"Type Conversion - Types",sidebar_position:0,hide_title:!0,keywords:["GoFrame","GoFrame framework","type conversion","basic types","gconv","Int conversion","Uint conversion","Float conversion","Bool conversion","string conversion"],description:"The method of common basic type conversion using the GoFrame framework. Focuses on the application of the gconv package in converting integers, floating-point numbers, booleans, strings, etc. Provides simple and understandable code examples demonstrating how to use these conversion functions for efficient type conversion in actual development."},c=void 0,a={},l=[{value:"Basic Example",id:"basic-example",level:2},{value:"Precautions",id:"precautions",level:2},{value:"Hexadecimal Conversion",id:"hexadecimal-conversion",level:3}];function d(n){let e={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"The conversion methods for common basic types are relatively simple. We will demonstrate the usage and effects of conversion methods with an example here."}),"\n",(0,i.jsx)(e.h2,{id:"basic-example",children:"Basic Example"}),"\n",(0,i.jsx)(e.admonition,{type:"tip",children:(0,i.jsxs)(e.p,{children:["For more type conversion methods, please refer to the API documentation: ",(0,i.jsx)(e.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/util/gconv",children:"https://pkg.go.dev/github.com/gogf/gf/v2/util/gconv"})]})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/util/gconv"\n)\n\nfunc main() {\n    i := 123.456\n    fmt.Printf("%10s %v\\n", "Int:",        gconv.Int(i))\n    fmt.Printf("%10s %v\\n", "Int8:",       gconv.Int8(i))\n    fmt.Printf("%10s %v\\n", "Int16:",      gconv.Int16(i))\n    fmt.Printf("%10s %v\\n", "Int32:",      gconv.Int32(i))\n    fmt.Printf("%10s %v\\n", "Int64:",      gconv.Int64(i))\n    fmt.Printf("%10s %v\\n", "Uint:",       gconv.Uint(i))\n    fmt.Printf("%10s %v\\n", "Uint8:",      gconv.Uint8(i))\n    fmt.Printf("%10s %v\\n", "Uint16:",     gconv.Uint16(i))\n    fmt.Printf("%10s %v\\n", "Uint32:",     gconv.Uint32(i))\n    fmt.Printf("%10s %v\\n", "Uint64:",     gconv.Uint64(i))\n    fmt.Printf("%10s %v\\n", "Float32:",    gconv.Float32(i))\n    fmt.Printf("%10s %v\\n", "Float64:",    gconv.Float64(i))\n    fmt.Printf("%10s %v\\n", "Bool:",       gconv.Bool(i))\n    fmt.Printf("%10s %v\\n", "String:",     gconv.String(i))\n    fmt.Printf("%10s %v\\n", "Bytes:",      gconv.Bytes(i))\n    fmt.Printf("%10s %v\\n", "Strings:",    gconv.Strings(i))\n    fmt.Printf("%10s %v\\n", "Ints:",       gconv.Ints(i))\n    fmt.Printf("%10s %v\\n", "Floats:",     gconv.Floats(i))\n    fmt.Printf("%10s %v\\n", "Interfaces:", gconv.Interfaces(i))\n}\n\n'})}),"\n",(0,i.jsx)(e.p,{children:"After execution, the output results are:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"      Int: 123\n     Int8: 123\n    Int16: 123\n    Int32: 123\n    Int64: 123\n     Uint: 123\n    Uint8: 123\n   Uint16: 123\n   Uint32: 123\n   Uint64: 123\n  Float32: 123.456\n  Float64: 123.456\n     Bool: true\n   String: 123.456\n    Bytes: [119 190 159 26 47 221 94 64]\n  Strings: [123.456]\n     Ints: [123]\n   Floats: [123.456]\nInterfaces: [123.456]\n"})}),"\n",(0,i.jsx)(e.h2,{id:"precautions",children:"Precautions"}),"\n",(0,i.jsxs)(e.p,{children:["Number conversion methods such as ",(0,i.jsx)(e.code,{children:"gconv.Int/Uint"}),", etc., will automatically recognize hexadecimal and octal when the given conversion parameter is a string."]}),"\n",(0,i.jsx)(e.h3,{id:"hexadecimal-conversion",children:"Hexadecimal Conversion"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"gconv"})," treats numeric strings starting with ",(0,i.jsx)(e.code,{children:"0x"})," as hexadecimal conversions. For example, ",(0,i.jsx)(e.code,{children:'gconv.Int("0xff")'})," will return ",(0,i.jsx)(e.code,{children:"255"}),"."]})]})}function v(n={}){let{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},250065:function(n,e,t){t.d(e,{Z:function(){return c},a:function(){return r}});var o=t(667294);let i={},s=o.createContext(i);function r(n){let e=o.useContext(s);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);