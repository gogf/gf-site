"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["48405"],{21216:function(e,n,r){r.r(n),r.d(n,{metadata:()=>i,contentTitle:()=>s,default:()=>h,assets:()=>a,toc:()=>d,frontMatter:()=>c});var i=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree/\u6811\u5F62\u7C7B\u578B-\u65B9\u6CD5\u4ECB\u7ECD","title":"Tree - Methods","description":"A variety of operations for tree structures in the GoFrame framework, including NewBTree, Clone, Set, Get, etc. Detailed examples demonstrate how to use these methods for node addition, search, deletion, and more, while supporting concurrency-safe settings. Users can quickly master the techniques for using tree structures through this documentation.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree/\u6811\u5F62\u7C7B\u578B-\u65B9\u6CD5\u4ECB\u7ECD.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree","slug":"/docs/components/container-gtree-funcs","permalink":"/en/docs/components/container-gtree-funcs","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6811\u5F62\u7C7B\u578B-gtree/\u6811\u5F62\u7C7B\u578B-\u65B9\u6CD5\u4ECB\u7ECD.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":1,"frontMatter":{"slug":"/docs/components/container-gtree-funcs","title":"Tree - Methods","sidebar_position":1,"hide_title":true,"keywords":["GoFrame","tree structure","BTree","node management","concurrency safety","key-value operations","height calculation","search","tree iteration","data manipulation"],"description":"A variety of operations for tree structures in the GoFrame framework, including NewBTree, Clone, Set, Get, etc. Detailed examples demonstrate how to use these methods for node addition, search, deletion, and more, while supporting concurrency-safe settings. Users can quickly master the techniques for using tree structures through this documentation."},"sidebar":"mainSidebar","previous":{"title":"Tree - Usage","permalink":"/en/docs/components/container-gtree-example"},"next":{"title":"Pool","permalink":"/en/docs/components/container-gpool"}}'),t=r("785893"),l=r("250065");let c={slug:"/docs/components/container-gtree-funcs",title:"Tree - Methods",sidebar_position:1,hide_title:!0,keywords:["GoFrame","tree structure","BTree","node management","concurrency safety","key-value operations","height calculation","search","tree iteration","data manipulation"],description:"A variety of operations for tree structures in the GoFrame framework, including NewBTree, Clone, Set, Get, etc. Detailed examples demonstrate how to use these methods for node addition, search, deletion, and more, while supporting concurrency-safe settings. Users can quickly master the techniques for using tree structures through this documentation."},s=void 0,a={},d=[{value:"<code>NewBTree</code>",id:"newbtree",level:2},{value:"<code>NewBTreeFrom</code>",id:"newbtreefrom",level:2},{value:"<code>Clone</code>",id:"clone",level:2},{value:"<code>Set</code>",id:"set",level:2},{value:"<code>Sets</code>",id:"sets",level:2},{value:"<code>Get</code>",id:"get",level:2},{value:"<code>GetOrSet</code>",id:"getorset",level:2},{value:"<code>GetOrSetFunc</code>",id:"getorsetfunc",level:2},{value:"<code>GetOrSetFuncLock</code>",id:"getorsetfunclock",level:2},{value:"GetVar",id:"getvar",level:2},{value:"<code>GetVarOrSet</code>",id:"getvarorset",level:2},{value:"GetVarOrSetFunc",id:"getvarorsetfunc",level:2},{value:"<code>GetVarOrSetFuncLock</code>",id:"getvarorsetfunclock",level:2},{value:"<code>SetIfNotExist</code>",id:"setifnotexist",level:2},{value:"<code>SetIfNotExistFunc</code>",id:"setifnotexistfunc",level:2},{value:"<code>SetIfNotExistFuncLock</code>",id:"setifnotexistfunclock",level:2},{value:"<code>Contains</code>",id:"contains",level:2},{value:"<code>Remove</code>",id:"remove",level:2},{value:"<code>Removes</code>",id:"removes",level:2},{value:"IsEmpty",id:"isempty",level:2},{value:"<code>Size</code>",id:"size",level:2},{value:"<code>Keys</code>",id:"keys",level:2},{value:"<code>Values</code>",id:"values",level:2},{value:"<code>Map</code>",id:"map",level:2},{value:"<code>MapStrAny</code>",id:"mapstrany",level:2},{value:"<code>Clear</code>",id:"clear",level:2},{value:"<code>Replace</code>",id:"replace",level:2},{value:"<code>Height</code>",id:"height",level:2},{value:"<code>Left</code>",id:"left",level:2},{value:"<code>Right</code>",id:"right",level:2},{value:"<code>String</code>",id:"string",level:2},{value:"<code>Search</code>",id:"search",level:2},{value:"<code>Print</code>",id:"print",level:2},{value:"<code>Iterator</code>",id:"iterator",level:2},{value:"<code>IteratorFrom</code>",id:"iteratorfrom",level:2},{value:"<code>IteratorAsc</code>",id:"iteratorasc",level:2},{value:"<code>IteratorAscFrom</code>",id:"iteratorascfrom",level:2},{value:"<code>IteratorDesc</code>",id:"iteratordesc",level:2},{value:"<code>IteratorDescFrom</code>",id:"iteratordescfrom",level:2},{value:"<code>MarshalJson</code>",id:"marshaljson",level:2}];function o(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["The following is a list of commonly used methods; documentation updates may lag behind new features in the code. For more methods and examples, please refer to the code documentation: ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/container/gtree",children:"https://pkg.go.dev/github.com/gogf/gf/v2/container/gtree"})]})}),"\n",(0,t.jsx)(n.h2,{id:"newbtree",children:(0,t.jsx)(n.code,{children:"NewBTree"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"NewBTree"})," creates a ",(0,t.jsx)(n.code,{children:"BTree"})," using ",(0,t.jsx)(n.code,{children:"m"})," (maximum number of child nodes) and a custom comparator. The ",(0,t.jsx)(n.code,{children:"safe"})," parameter specifies whether to use a concurrency-safe ",(0,t.jsx)(n.code,{children:"tree"}),", with a default value of ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: The ",(0,t.jsx)(n.code,{children:"m"})," parameter must be greater than or equal to ",(0,t.jsx)(n.code,{children:"3"}),", otherwise it will ",(0,t.jsx)(n.code,{children:"panic"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"NewBTree(m int, comparator func(v1, v2 interface{}) int, safe ...bool) *BTree\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleNewBTree() {\n      bTree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          bTree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n      fmt.Println(bTree.Map())\n\n      // Output:\n      // map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"newbtreefrom",children:(0,t.jsx)(n.code,{children:"NewBTreeFrom"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"NewBTreeFrom"})," creates a ",(0,t.jsx)(n.code,{children:"BTree"})," using ",(0,t.jsx)(n.code,{children:"m"})," (maximum number of child nodes), a custom comparator, and data of type ",(0,t.jsx)(n.code,{children:"map[interface{}]interface{}"}),". The ",(0,t.jsx)(n.code,{children:"safe"})," parameter specifies whether to use a concurrency-safe ",(0,t.jsx)(n.code,{children:"tree"}),", with a default value of ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: The ",(0,t.jsx)(n.code,{children:"m"})," parameter must be greater than or equal to ",(0,t.jsx)(n.code,{children:"3"}),", otherwise it will ",(0,t.jsx)(n.code,{children:"panic"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"NewBTreeFrom(m int, comparator func(v1, v2 interface{}) int, data map[interface{}]interface{}, safe ...bool) *BTree\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleNewBTreeFrom() {\n      bTree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          bTree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      otherBTree := gtree.NewBTreeFrom(3, gutil.ComparatorString, bTree.Map())\n      fmt.Println(otherBTree.Map())\n\n      // Output:\n      // map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"clone",children:(0,t.jsx)(n.code,{children:"Clone"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Clone"})," returns a new ",(0,t.jsx)(n.code,{children:"BTree"}),", which is a copy of the current ",(0,t.jsx)(n.code,{children:"tree"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Clone() *BTree\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Clone() {\n      b := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          b.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      tree := b.Clone()\n\n      fmt.Println(tree.Map())\n      fmt.Println(tree.Size())\n\n      // Output:\n      // map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n      // 6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"set",children:(0,t.jsx)(n.code,{children:"Set"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Set"})," sets the ",(0,t.jsx)(n.code,{children:"key/value"})," for the ",(0,t.jsx)(n.code,{children:"tree"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Set(key interface{}, value interface{})\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Set() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Map())\n      fmt.Println(tree.Size())\n\n      // Output:\n      // map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n      // 6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sets",children:(0,t.jsx)(n.code,{children:"Sets"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Sets"})," sets ",(0,t.jsx)(n.code,{children:"key/value"})," for the ",(0,t.jsx)(n.code,{children:"tree"})," in batches."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Sets(data map[interface{}]interface{})\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Sets() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n\n      tree.Sets(map[interface{}]interface{}{\n          "key1": "val1",\n          "key2": "val2",\n      })\n\n      fmt.Println(tree.Map())\n      fmt.Println(tree.Size())\n\n      // Output:\n      // map[key1:val1 key2:val2]\n      // 2\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"get",children:(0,t.jsx)(n.code,{children:"Get"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Get"})," returns the value ",(0,t.jsx)(n.code,{children:"value"})," corresponding to the parameter ",(0,t.jsx)(n.code,{children:"key"}),". If ",(0,t.jsx)(n.code,{children:"key"})," does not exist, it returns ",(0,t.jsx)(n.code,{children:"Nil"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Get(key interface{}) (value interface{})\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Get() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Get("key1"))\n      fmt.Println(tree.Get("key10"))\n\n      // Output:\n      // val1\n      // <nil>\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getorset",children:(0,t.jsx)(n.code,{children:"GetOrSet"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"GetOrSet"})," returns ",(0,t.jsx)(n.code,{children:"value"})," if ",(0,t.jsx)(n.code,{children:"key"})," exists; if ",(0,t.jsx)(n.code,{children:"key"})," does not exist, it sets the key-value with ",(0,t.jsx)(n.code,{children:"key"})," and ",(0,t.jsx)(n.code,{children:"value"}),", then returns the value."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"GetOrSet(key interface{}, value interface{}) interface{}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_GetOrSet() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.GetOrSet("key1", "newVal1"))\n      fmt.Println(tree.GetOrSet("key6", "val6"))\n\n      // Output:\n      // val1\n      // val6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getorsetfunc",children:(0,t.jsx)(n.code,{children:"GetOrSetFunc"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"GetOrSetFunc"})," returns ",(0,t.jsx)(n.code,{children:"value"})," if ",(0,t.jsx)(n.code,{children:"key"})," exists; if ",(0,t.jsx)(n.code,{children:"key"})," does not exist, it sets the key-value with ",(0,t.jsx)(n.code,{children:"key"})," and the return value of ",(0,t.jsx)(n.code,{children:"func f"}),", then returns the value."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"GetOrSetFunc(key interface{}, f func() interface{}) interface{}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_GetOrSetFunc() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.GetOrSetFunc("key1", func() interface{} {\n          return "newVal1"\n      }))\n      fmt.Println(tree.GetOrSetFunc("key6", func() interface{} {\n          return "val6"\n      }))\n\n      // Output:\n      // val1\n      // val6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getorsetfunclock",children:(0,t.jsx)(n.code,{children:"GetOrSetFuncLock"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"GetOrSetFunc"})," returns ",(0,t.jsx)(n.code,{children:"value"})," if ",(0,t.jsx)(n.code,{children:"key"})," exists; if ",(0,t.jsx)(n.code,{children:"key"})," does not exist, it sets the key-value with ",(0,t.jsx)(n.code,{children:"key"})," and the return value of ",(0,t.jsx)(n.code,{children:"func f"}),", then returns the value."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: The difference between ",(0,t.jsx)(n.code,{children:"GetOrSetFuncLock"})," and ",(0,t.jsx)(n.code,{children:"GetOrSetFunc"})," is that it executes the function ",(0,t.jsx)(n.code,{children:"f"})," in a write lock."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"GetOrSetFuncLock(key interface{}, f func() interface{}) interface{}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_GetOrSetFuncLock() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.GetOrSetFuncLock("key1", func() interface{} {\n          return "newVal1"\n      }))\n      fmt.Println(tree.GetOrSetFuncLock("key6", func() interface{} {\n          return "val6"\n      }))\n\n      // Output:\n      // val1\n      // val6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getvar",children:"GetVar"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"GetVar"})," searches and returns the key value corresponding to the key name ",(0,t.jsx)(n.code,{children:"key"}),", the type is ",(0,t.jsx)(n.code,{children:"*gvar.Var"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: The returned ",(0,t.jsx)(n.code,{children:"gvar.Var"})," is not concurrent safe."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"GetVar(key interface{}) *gvar.Var\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_GetVar() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.GetVar("key1").String())\n\n      // Output:\n      // val1\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getvarorset",children:(0,t.jsx)(n.code,{children:"GetVarOrSet"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"GetVarOrSet"})," returns the result of ",(0,t.jsx)(n.code,{children:"GetOrSet"}),", the type is ",(0,t.jsx)(n.code,{children:"*gvar.Var"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: The returned ",(0,t.jsx)(n.code,{children:"gvar.Var"})," is not concurrent safe."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"GetVarOrSet(key interface{}, value interface{}) *gvar.Var\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_GetVarOrSet() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.GetVarOrSet("key1", "newVal1"))\n      fmt.Println(tree.GetVarOrSet("key6", "val6"))\n\n      // Output:\n      // val1\n      // val6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getvarorsetfunc",children:"GetVarOrSetFunc"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Description: ",(0,t.jsx)(n.code,{children:"GetVarOrSetFunc"})," returns the result of ",(0,t.jsx)(n.code,{children:"GetOrSetFunc"}),", the type is ",(0,t.jsx)(n.code,{children:"*gvar.Var"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Note: The returned ",(0,t.jsx)(n.code,{children:"gvar.Var"})," is not concurrent safe."]}),"\n",(0,t.jsx)(n.li,{children:"Format:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"GetVarOrSetFunc(key interface{}, f func() interface{}) *gvar.Var\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_GetVarOrSetFunc() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.GetVarOrSetFunc("key1", func() interface{} {\n          return "newVal1"\n      }))\n      fmt.Println(tree.GetVarOrSetFunc("key6", func() interface{} {\n          return "val6"\n      }))\n\n      // Output:\n      // val1\n      // val6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getvarorsetfunclock",children:(0,t.jsx)(n.code,{children:"GetVarOrSetFuncLock"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"GetVarOrSetFuncLock"})," returns the result of ",(0,t.jsx)(n.code,{children:"GetOrSetFuncLock"}),", the type is ",(0,t.jsx)(n.code,{children:"*gvar.Var"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: The returned ",(0,t.jsx)(n.code,{children:"gvar.Var"})," is not concurrent safe."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"GetVarOrSetFuncLock(key interface{}, f func() interface{}) *gvar.Var\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_GetVarOrSetFuncLock() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.GetVarOrSetFuncLock("key1", func() interface{} {\n          return "newVal1"\n      }))\n      fmt.Println(tree.GetVarOrSetFuncLock("key6", func() interface{} {\n          return "val6"\n      }))\n\n      // Output:\n      // val1\n      // val6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"setifnotexist",children:(0,t.jsx)(n.code,{children:"SetIfNotExist"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: If ",(0,t.jsx)(n.code,{children:"key"})," does not exist, ",(0,t.jsx)(n.code,{children:"SetIfNotExist"})," sets the key-value pair ",(0,t.jsx)(n.code,{children:"key/value"})," for the map and returns ",(0,t.jsx)(n.code,{children:"true"}),". If ",(0,t.jsx)(n.code,{children:"key"})," exists, it returns ",(0,t.jsx)(n.code,{children:"false"}),", and ",(0,t.jsx)(n.code,{children:"value"})," will be ignored."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"SetIfNotExist(key interface{}, value interface{}) bool\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_SetIfNotExist() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.SetIfNotExist("key1", "newVal1"))\n      fmt.Println(tree.SetIfNotExist("key6", "val6"))\n\n      // Output:\n      // false\n      // true\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"setifnotexistfunc",children:(0,t.jsx)(n.code,{children:"SetIfNotExistFunc"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: If ",(0,t.jsx)(n.code,{children:"key"})," does not exist, ",(0,t.jsx)(n.code,{children:"SetIfNotExistFunc"})," sets the value to the return value of the function ",(0,t.jsx)(n.code,{children:"f"})," and returns ",(0,t.jsx)(n.code,{children:"true"}),". If ",(0,t.jsx)(n.code,{children:"key"})," exists, it returns ",(0,t.jsx)(n.code,{children:"false"}),", and ",(0,t.jsx)(n.code,{children:"value"})," will be ignored."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"SetIfNotExistFunc(key interface{}, f func() interface{}) bool\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_SetIfNotExistFunc() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.SetIfNotExistFunc("key1", func() interface{} {\n          return "newVal1"\n      }))\n      fmt.Println(tree.SetIfNotExistFunc("key6", func() interface{} {\n          return "val6"\n      }))\n\n      // Output:\n      // false\n      // true\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"setifnotexistfunclock",children:(0,t.jsx)(n.code,{children:"SetIfNotExistFuncLock"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: If ",(0,t.jsx)(n.code,{children:"key"})," does not exist, ",(0,t.jsx)(n.code,{children:"SetIfNotExistFunc"})," sets the value to the return value of ",(0,t.jsx)(n.code,{children:"func c"}),", then returns ",(0,t.jsx)(n.code,{children:"true"}),". If ",(0,t.jsx)(n.code,{children:"key"})," exists, it returns ",(0,t.jsx)(n.code,{children:"false"}),", and ",(0,t.jsx)(n.code,{children:"value"})," will be ignored."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The difference between ",(0,t.jsx)(n.code,{children:"SetIfNotExistFuncLock"})," and ",(0,t.jsx)(n.code,{children:"SetIfNotExistFunc"})," is that it executes the function ",(0,t.jsx)(n.code,{children:"f"})," within ",(0,t.jsx)(n.code,{children:"mutex.Lock"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"SetIfNotExistFuncLock(key interface{}, f func() interface{}) bool\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_SetIfNotExistFuncLock() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.SetIfNotExistFuncLock("key1", func() interface{} {\n          return "newVal1"\n      }))\n      fmt.Println(tree.SetIfNotExistFuncLock("key6", func() interface{} {\n          return "val6"\n      }))\n\n      // Output:\n      // false\n      // true\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"contains",children:(0,t.jsx)(n.code,{children:"Contains"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Contains"})," checks if ",(0,t.jsx)(n.code,{children:"key"})," exists in the ",(0,t.jsx)(n.code,{children:"tree"}),". If ",(0,t.jsx)(n.code,{children:"key"})," exists, it returns ",(0,t.jsx)(n.code,{children:"true"}),"; otherwise, it returns ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Contains(key interface{}) bool\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Contains() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Contains("key1"))\n      fmt.Println(tree.Contains("key6"))\n\n      // Output:\n      // true\n      // false\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"remove",children:(0,t.jsx)(n.code,{children:"Remove"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: Delete the ",(0,t.jsx)(n.code,{children:"value"})," from ",(0,t.jsx)(n.code,{children:"tree"})," according to the given ",(0,t.jsx)(n.code,{children:"key"})," and return this deleted ",(0,t.jsx)(n.code,{children:"value"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Remove(key interface{}) (value interface{})\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Remove() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Remove("key1"))\n      fmt.Println(tree.Remove("key6"))\n      fmt.Println(tree.Map())\n\n      // Output:\n      // val1\n      // <nil>\n      // map[key0:val0 key2:val2 key3:val3 key4:val4 key5:val5]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"removes",children:(0,t.jsx)(n.code,{children:"Removes"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Removes"})," deletes ",(0,t.jsx)(n.code,{children:"value"})," of ",(0,t.jsx)(n.code,{children:"tree"})," in batches according to the given ",(0,t.jsx)(n.code,{children:"key"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Removes(keys []interface{})\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Removes() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      removeKeys := make([]interface{}, 2)\n      removeKeys = append(removeKeys, "key1")\n      removeKeys = append(removeKeys, "key6")\n\n      tree.Removes(removeKeys)\n\n      fmt.Println(tree.Map())\n\n      // Output:\n      // map[key0:val0 key2:val2 key3:val3 key4:val4 key5:val5]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"isempty",children:"IsEmpty"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"IsEmpty"})," checks if ",(0,t.jsx)(n.code,{children:"tree"})," is empty. If ",(0,t.jsx)(n.code,{children:"tree"})," is empty, it returns ",(0,t.jsx)(n.code,{children:"true"}),"; otherwise, it returns ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"IsEmpty() bool\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IsEmpty() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n\n      fmt.Println(tree.IsEmpty())\n\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.IsEmpty())\n\n      // Output:\n      // true\n      // false\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"size",children:(0,t.jsx)(n.code,{children:"Size"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Size"})," returns the size of the ",(0,t.jsx)(n.code,{children:"tree"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Size() int\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Size() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n\n      fmt.Println(tree.Size())\n\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Size())\n\n      // Output:\n      // 0\n      // 6\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"keys",children:(0,t.jsx)(n.code,{children:"Keys"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Keys"})," returns all ",(0,t.jsx)(n.code,{children:"key"}),"s in ascending order."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Keys() []interface{}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Keys() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 6; i > 0; i-- {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Keys())\n\n      // Output:\n      // [key1 key2 key3 key4 key5 key6]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"values",children:(0,t.jsx)(n.code,{children:"Values"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Values"})," returns all ",(0,t.jsx)(n.code,{children:"value"}),"s in ascending order of ",(0,t.jsx)(n.code,{children:"key"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Values() []interface{}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Values() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 6; i > 0; i-- {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Values())\n\n      // Output:\n      // [val1 val2 val3 val4 val5 val6]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"map",children:(0,t.jsx)(n.code,{children:"Map"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Map"})," returns all ",(0,t.jsx)(n.code,{children:"key/value"})," pairs in the form of a ",(0,t.jsx)(n.code,{children:"map"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Map() map[interface{}]interface{}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Map() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Map())\n\n      // Output:\n      // map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"mapstrany",children:(0,t.jsx)(n.code,{children:"MapStrAny"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"MapStrAny"})," returns all ",(0,t.jsx)(n.code,{children:"key/value"})," pairs in the form of ",(0,t.jsx)(n.code,{children:"map[string]interface{}"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"MapStrAny() map[string]interface{}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_MapStrAny() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set(1000+i, "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.MapStrAny())\n\n      // Output:\n      // map[1000:val0 1001:val1 1002:val2 1003:val3 1004:val4 1005:val5]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"clear",children:(0,t.jsx)(n.code,{children:"Clear"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Clear"})," deletes all data in the ",(0,t.jsx)(n.code,{children:"tree"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Clear()\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Clear() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set(1000+i, "val"+gconv.String(i))\n      }\n      fmt.Println(tree.Size())\n\n      tree.Clear()\n      fmt.Println(tree.Size())\n\n      // Output:\n      // 6\n      // 0\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"replace",children:(0,t.jsx)(n.code,{children:"Replace"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Replace"})," replaces the ",(0,t.jsx)(n.code,{children:"key/value"})," in the ",(0,t.jsx)(n.code,{children:"tree"})," with data of type ",(0,t.jsx)(n.code,{children:"map[interface{}]interface{}"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Replace(data map[interface{}]interface{})\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Replace() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Map())\n\n      data := map[interface{}]interface{}{\n          "newKey0": "newVal0",\n          "newKey1": "newVal1",\n          "newKey2": "newVal2",\n      }\n\n      tree.Replace(data)\n\n      fmt.Println(tree.Map())\n\n      // Output:\n      // map[key0:val0 key1:val1 key2:val2 key3:val3 key4:val4 key5:val5]\n      // map[newKey0:newVal0 newKey1:newVal1 newKey2:newVal2]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"height",children:(0,t.jsx)(n.code,{children:"Height"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Height"})," returns the height of the ",(0,t.jsx)(n.code,{children:"tree"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Height() int\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func ExampleBTree_Height() {\n      tree := gtree.NewBTree(3, gutil.ComparatorInt)\n      for i := 0; i < 100; i++ {\n          tree.Set(i, i)\n      }\n      fmt.Println(tree.Height())\n\n      // Output:\n      // 6\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"left",children:(0,t.jsx)(n.code,{children:"Left"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Left"})," returns the leftmost (smallest) ",(0,t.jsx)(n.code,{children:"node"})," of type ",(0,t.jsx)(n.code,{children:"*BTreeEntry"}),", or ",(0,t.jsx)(n.code,{children:"nil"})," if the ",(0,t.jsx)(n.code,{children:"tree"})," is empty."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Left() *BTreeEntry\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func ExampleBTree_Left() {\n      tree := gtree.NewBTree(3, gutil.ComparatorInt)\n      for i := 1; i < 100; i++ {\n          tree.Set(i, i)\n      }\n      fmt.Println(tree.Left().Key, tree.Left().Value)\n\n      emptyTree := gtree.NewBTree(3, gutil.ComparatorInt)\n      fmt.Println(emptyTree.Left())\n\n      // Output:\n      // 1 1\n      // <nil>\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"right",children:(0,t.jsx)(n.code,{children:"Right"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Right"})," returns the rightmost (largest) ",(0,t.jsx)(n.code,{children:"node"})," of type ",(0,t.jsx)(n.code,{children:"*BTreeEntry"}),", or ",(0,t.jsx)(n.code,{children:"nil"})," if the ",(0,t.jsx)(n.code,{children:"tree"})," is empty."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Right() *BTreeEntry\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func ExampleBTree_Right() {\n      tree := gtree.NewBTree(3, gutil.ComparatorInt)\n      for i := 1; i < 100; i++ {\n          tree.Set(i, i)\n      }\n      fmt.Println(tree.Right().Key, tree.Right().Value)\n\n      emptyTree := gtree.NewBTree(3, gutil.ComparatorInt)\n      fmt.Println(emptyTree.Left())\n\n      // Output:\n      // 99 99\n      // <nil>\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"string",children:(0,t.jsx)(n.code,{children:"String"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"String"})," returns a display (for debugging) of the ",(0,t.jsx)(n.code,{children:"node"})," in the ",(0,t.jsx)(n.code,{children:"tree"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"String() string\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_String() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.String())\n\n      // Output:\n      // key0\n      // key1\n      //     key2\n      // key3\n      //     key4\n      //     key5\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"search",children:(0,t.jsx)(n.code,{children:"Search"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Search"})," searches the ",(0,t.jsx)(n.code,{children:"tree"})," using the parameter ",(0,t.jsx)(n.code,{children:"key"}),". If the ",(0,t.jsx)(n.code,{children:"key"})," is found, it returns its corresponding key-value and returns the parameter ",(0,t.jsx)(n.code,{children:"found"})," as ",(0,t.jsx)(n.code,{children:"true"}),", otherwise ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Search(key interface{}) (value interface{}, found bool)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Search() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      fmt.Println(tree.Search("key0"))\n      fmt.Println(tree.Search("key6"))\n\n      // Output:\n      // val0 true\n      // <nil> false\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"print",children:(0,t.jsx)(n.code,{children:"Print"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Print"})," prints the ",(0,t.jsx)(n.code,{children:"tree"})," to standard output."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Print()\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Print() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      tree.Print()\n\n      // Output:\n      // key0\n      // key1\n      //     key2\n      // key3\n      //     key4\n      //     key5\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"iterator",children:(0,t.jsx)(n.code,{children:"Iterator"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"Iterator"})," is equivalent to ",(0,t.jsx)(n.code,{children:"IteratorAsc"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"Iterator(f func(key, value interface{}) bool)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_Iterator() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 10; i++ {\n          tree.Set(i, 10-i)\n      }\n\n      var totalKey, totalValue int\n      tree.Iterator(func(key, value interface{}) bool {\n          totalKey += key.(int)\n          totalValue += value.(int)\n\n          return totalValue < 20\n      })\n\n      fmt.Println("totalKey:", totalKey)\n      fmt.Println("totalValue:", totalValue)\n\n      // Output:\n      // totalKey: 3\n      // totalValue: 27\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"iteratorfrom",children:(0,t.jsx)(n.code,{children:"IteratorFrom"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"IteratorFrom"})," is equivalent to ",(0,t.jsx)(n.code,{children:"IteratorAscFrom"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"IteratorFrom(key interface{}, match bool, f func(key, value interface{}) bool)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IteratorFrom() {\n      m := make(map[interface{}]interface{})\n      for i := 1; i <= 5; i++ {\n          m[i] = i * 10\n      }\n      tree := gtree.NewBTreeFrom(3, gutil.ComparatorInt, m)\n\n      tree.IteratorFrom(1, true, func(key, value interface{}) bool {\n          fmt.Println("key:", key, ", value:", value)\n          return true\n      })\n\n      // Output:\n      // key: 1 , value: 10\n      // key: 2 , value: 20\n      // key: 3 , value: 30\n      // key: 4 , value: 40\n      // key: 5 , value: 50\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"iteratorasc",children:(0,t.jsx)(n.code,{children:"IteratorAsc"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"IteratorAsc"})," iterates over the ",(0,t.jsx)(n.code,{children:"tree"})," in ascending order using a custom callback function ",(0,t.jsx)(n.code,{children:"f"})," in read-only mode. If ",(0,t.jsx)(n.code,{children:"f"})," returns ",(0,t.jsx)(n.code,{children:"true"}),", it continues iterating; if it returns ",(0,t.jsx)(n.code,{children:"false"}),", it stops."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"IteratorAsc(f func(key, value interface{}) bool)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IteratorAsc() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 10; i++ {\n          tree.Set(i, 10-i)\n      }\n\n      tree.IteratorAsc(func(key, value interface{}) bool {\n          fmt.Println("key:", key, ", value:", value)\n          return true\n      })\n\n      // Output:\n      // key: 0 , value: 10\n      // key: 1 , value: 9\n      // key: 2 , value: 8\n      // key: 3 , value: 7\n      // key: 4 , value: 6\n      // key: 5 , value: 5\n      // key: 6 , value: 4\n      // key: 7 , value: 3\n      // key: 8 , value: 2\n      // key: 9 , value: 1\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"iteratorascfrom",children:(0,t.jsx)(n.code,{children:"IteratorAscFrom"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"IteratorAscFrom"})," iterates over the ",(0,t.jsx)(n.code,{children:"tree"})," in ascending order using a custom callback function ",(0,t.jsx)(n.code,{children:"f"})," in read-only mode. The parameter ",(0,t.jsx)(n.code,{children:"key"})," specifies from which ",(0,t.jsx)(n.code,{children:"key"})," to start iterating. When ",(0,t.jsx)(n.code,{children:"match"})," is ",(0,t.jsx)(n.code,{children:"true"}),", iteration starts from the complete match of ",(0,t.jsx)(n.code,{children:"key"}),"; otherwise, iteration uses index searching. If ",(0,t.jsx)(n.code,{children:"f"})," returns ",(0,t.jsx)(n.code,{children:"true"}),", it continues iterating; if it returns ",(0,t.jsx)(n.code,{children:"false"}),", it stops."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"IteratorAscFrom(key interface{}, match bool, f func(key, value interface{}) bool)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IteratorAscFrom_Normal() {\n      m := make(map[interface{}]interface{})\n      for i := 1; i <= 5; i++ {\n          m[i] = i * 10\n      }\n      tree := gtree.NewBTreeFrom(3, gutil.ComparatorInt, m)\n\n      tree.IteratorAscFrom(1, true, func(key, value interface{}) bool {\n          fmt.Println("key:", key, ", value:", value)\n          return true\n      })\n\n      // Output:\n      // key: 1 , value: 10\n      // key: 2 , value: 20\n      // key: 3 , value: 30\n      // key: 4 , value: 40\n      // key: 5 , value: 50\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IteratorAscFrom_NoExistKey() {\n      m := make(map[interface{}]interface{})\n      for i := 1; i <= 5; i++ {\n          m[i] = i * 10\n      }\n      tree := gtree.NewBTreeFrom(3, gutil.ComparatorInt, m)\n\n      tree.IteratorAscFrom(0, true, func(key, value interface{}) bool {\n          fmt.Println("key:", key, ", value:", value)\n          return true\n      })\n\n      // Output:\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IteratorAscFrom_NoExistKeyAndMatchFalse() {\n      m := make(map[interface{}]interface{})\n      for i := 1; i <= 5; i++ {\n          m[i] = i * 10\n      }\n      tree := gtree.NewBTreeFrom(3, gutil.ComparatorInt, m)\n\n      tree.IteratorAscFrom(0, false, func(key, value interface{}) bool {\n          fmt.Println("key:", key, ", value:", value)\n          return true\n      })\n\n      // Output:\n      // key: 1 , value: 10\n      // key: 2 , value: 20\n      // key: 3 , value: 30\n      // key: 4 , value: 40\n      // key: 5 , value: 50\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"iteratordesc",children:(0,t.jsx)(n.code,{children:"IteratorDesc"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"IteratorDesc"})," iterates over the ",(0,t.jsx)(n.code,{children:"tree"})," in descending order using a custom callback function ",(0,t.jsx)(n.code,{children:"f"})," in read-only mode. If ",(0,t.jsx)(n.code,{children:"f"})," returns ",(0,t.jsx)(n.code,{children:"true"}),", it continues iterating; if it returns ",(0,t.jsx)(n.code,{children:"false"}),", it stops."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"IteratorDesc(f func(key, value interface{}) bool)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IteratorDesc() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 10; i++ {\n          tree.Set(i, 10-i)\n      }\n\n      tree.IteratorDesc(func(key, value interface{}) bool {\n          fmt.Println("key:", key, ", value:", value)\n          return true\n      })\n\n      // Output:\n      // key: 9 , value: 1\n      // key: 8 , value: 2\n      // key: 7 , value: 3\n      // key: 6 , value: 4\n      // key: 5 , value: 5\n      // key: 4 , value: 6\n      // key: 3 , value: 7\n      // key: 2 , value: 8\n      // key: 1 , value: 9\n      // key: 0 , value: 10\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"iteratordescfrom",children:(0,t.jsx)(n.code,{children:"IteratorDescFrom"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"IteratorDescFrom"})," iterates over the ",(0,t.jsx)(n.code,{children:"tree"})," in descending order using a custom callback function ",(0,t.jsx)(n.code,{children:"f"})," in read-only mode. The parameter ",(0,t.jsx)(n.code,{children:"key"})," specifies from which ",(0,t.jsx)(n.code,{children:"key"})," to start iterating. When ",(0,t.jsx)(n.code,{children:"match"})," is ",(0,t.jsx)(n.code,{children:"true"}),", iteration starts from the complete match of ",(0,t.jsx)(n.code,{children:"key"}),"; otherwise, iteration uses index searching. If ",(0,t.jsx)(n.code,{children:"f"})," returns ",(0,t.jsx)(n.code,{children:"true"}),", it continues iterating; if it returns ",(0,t.jsx)(n.code,{children:"false"}),", it stops."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"IteratorDescFrom(key interface{}, match bool, f func(key, value interface{}) bool)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_IteratorDescFrom() {\n      m := make(map[interface{}]interface{})\n      for i := 1; i <= 5; i++ {\n          m[i] = i * 10\n      }\n      tree := gtree.NewBTreeFrom(3, gutil.ComparatorInt, m)\n\n      tree.IteratorDescFrom(5, true, func(key, value interface{}) bool {\n          fmt.Println("key:", key, ", value:", value)\n          return true\n      })\n\n      // Output:\n      // key: 5 , value: 50\n      // key: 4 , value: 40\n      // key: 3 , value: 30\n      // key: 2 , value: 20\n      // key: 1 , value: 10\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"marshaljson",children:(0,t.jsx)(n.code,{children:"MarshalJson"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Description: ",(0,t.jsx)(n.code,{children:"MarshalJSON"})," implements the ",(0,t.jsx)(n.code,{children:"json.Marshal"})," interface."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Format:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"MarshalJSON() ([]byte, error)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func ExampleBTree_MarshalJSON() {\n      tree := gtree.NewBTree(3, gutil.ComparatorString)\n      for i := 0; i < 6; i++ {\n          tree.Set("key"+gconv.String(i), "val"+gconv.String(i))\n      }\n\n      bytes, err := json.Marshal(tree)\n      if err == nil {\n          fmt.Println(gconv.String(bytes))\n      }\n\n      // Output:\n      // {"key0":"val0","key1":"val1","key2":"val2","key3":"val3","key4":"val4","key5":"val5"}\n}\n'})})]})}function h(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return s},a:function(){return c}});var i=r(667294);let t={},l=i.createContext(t);function c(e){let n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);