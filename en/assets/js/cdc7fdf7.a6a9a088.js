"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["32902"],{481596:function(e,n,r){r.r(n),r.d(n,{metadata:()=>t,contentTitle:()=>d,default:()=>h,assets:()=>o,toc:()=>a,frontMatter:()=>c});var t=JSON.parse('{"id":"docs/\u670D\u52A1\u53EF\u89C2\u6D4B\u6027/\u670D\u52A1\u94FE\u8DEF\u8DDF\u8E2A/\u94FE\u8DEF\u8DDF\u8E2A-GRPC\u793A\u4F8B","title":"Tracing - GRPC Example","description":"Develop a simple GRPC server and client using the GoFrame framework, and add tracing features to GRPC microservices. The example code demonstrates how to initialize Jaeger, implement caching with a Redis adapter, and transmit trace information between the client and server.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u670D\u52A1\u53EF\u89C2\u6D4B\u6027/\u670D\u52A1\u94FE\u8DEF\u8DDF\u8E2A/\u94FE\u8DEF\u8DDF\u8E2A-GRPC\u793A\u4F8B.md","sourceDirName":"docs/\u670D\u52A1\u53EF\u89C2\u6D4B\u6027/\u670D\u52A1\u94FE\u8DEF\u8DDF\u8E2A","slug":"/docs/obs/tracing-grpc-example","permalink":"/en/docs/obs/tracing-grpc-example","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u670D\u52A1\u53EF\u89C2\u6D4B\u6027/\u670D\u52A1\u94FE\u8DEF\u8DDF\u8E2A/\u94FE\u8DEF\u8DDF\u8E2A-GRPC\u793A\u4F8B.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732451468000,"sidebarPosition":4,"frontMatter":{"slug":"/docs/obs/tracing-grpc-example","title":"Tracing - GRPC Example","sidebar_position":4,"hide_title":true,"keywords":["GoFrame","GRPC","Tracing","Microservices","Client","Server","Cache Adapter","Database","Jaeger","protobuf"],"description":"Develop a simple GRPC server and client using the GoFrame framework, and add tracing features to GRPC microservices. The example code demonstrates how to initialize Jaeger, implement caching with a Redis adapter, and transmit trace information between the client and server."},"sidebar":"mainSidebar","previous":{"title":"Tracing HTTP - Data Ops","permalink":"/en/docs/obs/tracing-http-example-with-database"},"next":{"title":"TraceID Injection and Retrieval","permalink":"/en/docs/obs/tracing-practice-inject-traceid"}}'),i=r("785893"),s=r("250065");let c={slug:"/docs/obs/tracing-grpc-example",title:"Tracing - GRPC Example",sidebar_position:4,hide_title:!0,keywords:["GoFrame","GRPC","Tracing","Microservices","Client","Server","Cache Adapter","Database","Jaeger","protobuf"],description:"Develop a simple GRPC server and client using the GoFrame framework, and add tracing features to GRPC microservices. The example code demonstrates how to initialize Jaeger, implement caching with a Redis adapter, and transmit trace information between the client and server."},d=void 0,o={},a=[{value:"Directory Structure",id:"directory-structure",level:2},{value:"Protobuf",id:"protobuf",level:2},{value:"GRPC Server",id:"grpc-server",level:2},{value:"GRPC Client",id:"grpc-client",level:2},{value:"Effect Viewing",id:"effect-viewing",level:2},{value:"GRPC Client",id:"grpc-client-1",level:3},{value:"Attributes",id:"attributes",level:4},{value:"Events/Logs",id:"eventslogs",level:4},{value:"GRPC Server",id:"grpc-server-1",level:3},{value:"Attributes",id:"attributes-1",level:4},{value:"Events",id:"events",level:4}];function l(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In this chapter, we will modify the previously introduced ",(0,i.jsx)(n.code,{children:"HTTP Client&Server"})," example to a ",(0,i.jsx)(n.code,{children:"GRPC"})," microservice and demonstrate how to develop a simple ",(0,i.jsx)(n.code,{children:"GRPC"})," server and client using the ",(0,i.jsx)(n.code,{children:"GoFrame"})," framework and add tracing features to the ",(0,i.jsx)(n.code,{children:"GRPC"})," microservice."]}),"\n",(0,i.jsxs)(n.p,{children:["The example code for this chapter is located at: ",(0,i.jsx)(n.a,{href:"https://github.com/gogf/gf/tree/master/example/trace/grpc_with_db",children:"https://github.com/gogf/gf/tree/master/example/trace/grpc_with_db"})]}),"\n",(0,i.jsx)(n.h2,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(400639).Z+"",width:"786",height:"1178"})}),"\n",(0,i.jsx)(n.h2,{id:"protobuf",children:"Protobuf"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'syntax = "proto3";\n\npackage user;\n\noption go_package = "protobuf/user";\n\n// User service for tracing demo.\nservice User {\n  rpc Insert(InsertReq) returns (InsertRes) {}\n  rpc Query(QueryReq) returns (QueryRes) {}\n  rpc Delete(DeleteReq) returns (DeleteRes) {}\n}\n\nmessage InsertReq {\n  string Name = 1; // v: required#Please input user name.\n}\nmessage InsertRes {\n  int32 Id = 1;\n}\n\nmessage QueryReq {\n  int32 Id = 1; // v: min:1#User id is required for querying.\n}\nmessage QueryRes {\n  int32  Id = 1;\n  string Name = 2;\n}\n\nmessage DeleteReq {\n  int32 Id = 1; // v:min:1#User id is required for deleting.\n}\nmessage DeleteRes {}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"gf gen pb"})," command to compile this ",(0,i.jsx)(n.code,{children:"proto"})," file, which will generate the corresponding ",(0,i.jsx)(n.code,{children:"grpc"})," interface and data structure files."]}),"\n",(0,i.jsx)(n.h2,{id:"grpc-server",children:"GRPC Server"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    _ "github.com/gogf/gf/contrib/drivers/mysql/v2"\n    _ "github.com/gogf/gf/contrib/nosql/redis/v2"\n    "github.com/gogf/gf/contrib/registry/etcd/v2"\n    "github.com/gogf/gf/example/trace/grpc_with_db/protobuf/user"\n\n    "context"\n    "fmt"\n    "time"\n\n    "github.com/gogf/gf/contrib/rpc/grpcx/v2"\n    "github.com/gogf/gf/contrib/trace/otlpgrpc/v2"\n    "github.com/gogf/gf/v2/database/gdb"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gcache"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\ntype Controller struct {\n    user.UnimplementedUserServer\n}\n\nconst (\n    serviceName = "otlp-grpc-server"\n    endpoint    = "tracing-analysis-dc-bj.aliyuncs.com:8090"\n    traceToken  = "******_******"\n)\n\nfunc main() {\n    grpcx.Resolver.Register(etcd.New("127.0.0.1:2379"))\n\n    var ctx = gctx.New()\n    shutdown, err := otlpgrpc.Init(serviceName, endpoint, traceToken)\n    if err != nil {\n        g.Log().Fatal(ctx, err)\n    }\n    defer shutdown()\n\n    // Set ORM cache adapter with redis.\n    g.DB().GetCache().SetAdapter(gcache.NewAdapterRedis(g.Redis()))\n\n    s := grpcx.Server.New()\n    user.RegisterUserServer(s.Server, &Controller{})\n    s.Run()\n}\n\n// Insert is a route handler for inserting user info into database.\nfunc (s *Controller) Insert(ctx context.Context, req *user.InsertReq) (res *user.InsertRes, err error) {\n    result, err := g.Model("user").Ctx(ctx).Insert(g.Map{\n        "name": req.Name,\n    })\n    if err != nil {\n        return nil, err\n    }\n    id, _ := result.LastInsertId()\n    res = &user.InsertRes{\n        Id: int32(id),\n    }\n    return\n}\n\n// Query is a route handler for querying user info. It firstly retrieves the info from redis,\n// if there\'s nothing in the redis, it then does db select.\nfunc (s *Controller) Query(ctx context.Context, req *user.QueryReq) (res *user.QueryRes, err error) {\n    err = g.Model("user").Ctx(ctx).Cache(gdb.CacheOption{\n        Duration: 5 * time.Second,\n        Name:     s.userCacheKey(req.Id),\n        Force:    false,\n    }).WherePri(req.Id).Scan(&res)\n    if err != nil {\n        return nil, err\n    }\n    return\n}\n\n// Delete is a route handler for deleting specified user info.\nfunc (s *Controller) Delete(ctx context.Context, req *user.DeleteReq) (res *user.DeleteRes, err error) {\n    err = g.Model("user").Ctx(ctx).Cache(gdb.CacheOption{\n        Duration: -1,\n        Name:     s.userCacheKey(req.Id),\n        Force:    false,\n    }).WherePri(req.Id).Scan(&res)\n    return\n}\n\nfunc (s *Controller) userCacheKey(id int32) string {\n    return fmt.Sprintf(`userInfo:%d`, id)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Brief explanation of the server code:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["First, the server needs to initialize ",(0,i.jsx)(n.code,{children:"Jaeger"})," through the ",(0,i.jsx)(n.code,{children:"jaeger.Init"})," method."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"As you can see, the business logic is entirely consistent with the previous HTTP example project, only the access layer is modified for the GRPC protocol."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"We still inject Redis cache via the cache adapter:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"g.DB().GetCache().SetAdapter(gcache.NewAdapterRedis(g.Redis()))\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:["Here, we also enable the cache feature of ",(0,i.jsx)(n.code,{children:"ORM"})," using the ",(0,i.jsx)(n.code,{children:"Cache"})," method, which has already been introduced before and will not be elaborated on here."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"grpc-client",children:"GRPC Client"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/contrib/registry/etcd/v2"\n    "github.com/gogf/gf/contrib/rpc/grpcx/v2"\n    "github.com/gogf/gf/contrib/trace/otlpgrpc/v2"\n    "github.com/gogf/gf/example/trace/grpc_with_db/protobuf/user"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/gtrace"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nconst (\n    serviceName = "otlp-grpc-client"\n    endpoint    = "tracing-analysis-dc-bj.aliyuncs.com:8090"\n    traceToken  = "******_******"\n)\n\nfunc main() {\n    grpcx.Resolver.Register(etcd.New("127.0.0.1:2379"))\n\n    var ctx = gctx.New()\n    shutdown, err := otlpgrpc.Init(serviceName, endpoint, traceToken)\n    if err != nil {\n        g.Log().Fatal(ctx, err)\n    }\n    defer shutdown()\n\n    StartRequests()\n}\n\nfunc StartRequests() {\n    ctx, span := gtrace.NewSpan(gctx.New(), "StartRequests")\n    defer span.End()\n\n    client := user.NewUserClient(grpcx.Client.MustNewGrpcClientConn("demo"))\n\n    // Baggage.\n    ctx = gtrace.SetBaggageValue(ctx, "uid", 100)\n\n    // Insert.\n    insertRes, err := client.Insert(ctx, &user.InsertReq{\n        Name: "john",\n    })\n    if err != nil {\n        g.Log().Fatalf(ctx, `%+v`, err)\n    }\n    g.Log().Info(ctx, "insert id:", insertRes.Id)\n\n    // Query.\n    queryRes, err := client.Query(ctx, &user.QueryReq{\n        Id: insertRes.Id,\n    })\n    if err != nil {\n        g.Log().Errorf(ctx, `%+v`, err)\n        return\n    }\n    g.Log().Info(ctx, "query result:", queryRes)\n\n    // Delete.\n    _, err = client.Delete(ctx, &user.DeleteReq{\n        Id: insertRes.Id,\n    })\n    if err != nil {\n        g.Log().Errorf(ctx, `%+v`, err)\n        return\n    }\n    g.Log().Info(ctx, "delete id:", insertRes.Id)\n\n    // Delete with error.\n    _, err = client.Delete(ctx, &user.DeleteReq{\n        Id: -1,\n    })\n    if err != nil {\n        g.Log().Errorf(ctx, `%+v`, err)\n        return\n    }\n    g.Log().Info(ctx, "delete id:", -1)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Brief explanation of the client code:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["First, the client also needs to initialize ",(0,i.jsx)(n.code,{children:"Jaeger"})," through the ",(0,i.jsx)(n.code,{children:"jaeger.Init"})," method."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The client is very simple, internal initialization and setting of default interceptors have been encapsulated by the ",(0,i.jsx)(n.code,{children:"Katyusha"})," framework, developers need only focus on implementing business logic."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"effect-viewing",children:"Effect Viewing"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Start the Server:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(546007).Z+"",width:"2460",height:"332"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Start the Client:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(765837).Z+"",width:"2606",height:"958"})}),"\n",(0,i.jsxs)(n.p,{children:["At the end of the client execution here, an error was reported, which we did ",(0,i.jsx)(n.strong,{children:"intentionally"}),", to demonstrate the link information display when ",(0,i.jsx)(n.code,{children:"GRPC"})," has an error. Let's open ",(0,i.jsx)(n.code,{children:"jaeger"})," to check the tracing information:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(518054).Z+"",width:"1914",height:"855"})}),"\n",(0,i.jsxs)(n.p,{children:["You can see that this request involves two services: ",(0,i.jsx)(n.code,{children:"tracing-grpc-client"})," and ",(0,i.jsx)(n.code,{children:"tracing-grpc-server"}),", which are the client and the server. The entire request link involves ",(0,i.jsx)(n.code,{children:"17"})," spans, with the client having ",(0,i.jsx)(n.code,{children:"5"})," spans, the server having ",(0,i.jsx)(n.code,{children:"12"})," spans, and producing ",(0,i.jsx)(n.code,{children:"2"})," errors. Let's click to view the details:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(963339).Z+"",width:"1914",height:"744"})}),"\n",(0,i.jsx)(n.p,{children:"Let's click to check the span situation of the last interface call error:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(929134).Z+"",width:"1075",height:"784"})}),"\n",(0,i.jsxs)(n.p,{children:["It looks like a parameter validation error, click to view the request parameters in ",(0,i.jsx)(n.code,{children:"Events/Logs"}),":"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(190201).Z+"",width:"1295",height:"767"})}),"\n",(0,i.jsxs)(n.p,{children:["Checking the ",(0,i.jsx)(n.code,{children:"Log"})," information in ",(0,i.jsx)(n.code,{children:"Process"}),", it can be seen that the error occurred because the parameter passed was ",(0,i.jsx)(n.code,{children:"-1"}),", which did not meet the validation rules, hence an error was returned during data validation."]}),"\n",(0,i.jsx)(n.h3,{id:"grpc-client-1",children:"GRPC Client"}),"\n",(0,i.jsxs)(n.p,{children:["Since ",(0,i.jsx)(n.code,{children:"orm"}),", ",(0,i.jsx)(n.code,{children:"redis"}),", and ",(0,i.jsx)(n.code,{children:"logging"})," components have previously introduced link information, here we mainly introduce link information for ",(0,i.jsx)(n.code,{children:"GRPC Client&Server"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"attributes",children:"Attributes"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(295598).Z+"",width:"1125",height:"785"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Attribute/Tag"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"net.peer.ip"})}),(0,i.jsx)(n.td,{children:"Target IP of the request."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"net.peer.port"})}),(0,i.jsx)(n.td,{children:"Target port of the request."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"rpc.grpc.status_code"})}),(0,i.jsxs)(n.td,{children:["Internal status code for ",(0,i.jsx)(n.code,{children:"GRPC"}),", ",(0,i.jsx)(n.code,{children:"0"})," indicates success, ",(0,i.jsx)(n.code,{children:"non-0"})," indicates failure."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"rpc.service"})}),(0,i.jsxs)(n.td,{children:["Name of the ",(0,i.jsx)(n.code,{children:"RPC"})," service, note that this is ",(0,i.jsx)(n.code,{children:"RPC"})," not ",(0,i.jsx)(n.code,{children:"GRPC"}),", as this is a general definition, and the client supports multiple ",(0,i.jsx)(n.code,{children:"RPC"})," communication protocols, with ",(0,i.jsx)(n.code,{children:"GRPC"})," being one of them."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"rpc.method"})}),(0,i.jsxs)(n.td,{children:["Name of the ",(0,i.jsx)(n.code,{children:"RPC"})," method."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"rpc.system"})}),(0,i.jsxs)(n.td,{children:["Type of ",(0,i.jsx)(n.code,{children:"RPC"})," protocol, such as: ",(0,i.jsx)(n.code,{children:"grpc"}),", ",(0,i.jsx)(n.code,{children:"thrift"}),", etc."]})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"eventslogs",children:"Events/Logs"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(496189).Z+"",width:"1279",height:"782"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Event/Log"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"grpc.metadata.outgoing"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"GRPC"})," client request submitted ",(0,i.jsx)(n.code,{children:"Metadata"})," information, which may be large."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"grpc.request.baggage"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"GRPC"})," client request submitted ",(0,i.jsx)(n.code,{children:"Baggage"})," information for service-to-service trace information transmission."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"grpc.request.message"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"GRPC"})," client request submitted ",(0,i.jsx)(n.code,{children:"Message"})," data, which may be large, only ",(0,i.jsx)(n.code,{children:"512KB"})," is recorded, and if it exceeds that size, it is ignored. Only valid for ",(0,i.jsx)(n.code,{children:"Unary"})," request types."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"grpc.response.message"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"GRPC"})," client request received returned ",(0,i.jsx)(n.code,{children:"Message"})," information, which may be large. Only valid for ",(0,i.jsx)(n.code,{children:"Unary"})," request types."]})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"grpc-server-1",children:"GRPC Server"}),"\n",(0,i.jsx)(n.h4,{id:"attributes-1",children:"Attributes"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(790394).Z+"",width:"1080",height:"778"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"GRPC Server"})," attributes mean the same as ",(0,i.jsx)(n.code,{children:"GRPC Client"}),", with parsed data being almost identical in the same request."]}),"\n",(0,i.jsx)(n.h4,{id:"events",children:"Events"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(886728).Z+"",width:"1277",height:"773"})}),"\n",(0,i.jsxs)(n.p,{children:["The difference in ",(0,i.jsx)(n.code,{children:"Events"})," for the ",(0,i.jsx)(n.code,{children:"GRPC Server"})," compared to the ",(0,i.jsx)(n.code,{children:"GRPC Client"})," is that in the same request, the metadata received by the server is ",(0,i.jsx)(n.code,{children:"grpc.metadata.incoming"}),", while others are the same as the ",(0,i.jsx)(n.code,{children:"GRPC Client"}),"."]})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},295598:function(e,n,r){r.d(n,{Z:function(){return t}});let t=r.p+"assets/images/273442cb521050b63863e94ac9334d68-4c3f28e0dfaeaf50358dae8777b037e3.png"},546007:function(e,n,r){r.d(n,{Z:function(){return t}});let t=r.p+"assets/images/3470e30ff88d5fdafcaaa175ed5d40a6-33622e5880bb89478194538ef8da3a98.png"},765837:function(e,n,r){r.d(n,{Z:function(){return t}});let t=r.p+"assets/images/3730fb2264d7e19a4990cdf8470c3998-97bdb6eacc37e73fd29679c606c39d33.png"},496189:function(e,n,r){r.d(n,{Z:function(){return t}});let t=r.p+"assets/images/3ee7778da75473938eb5acd4459304a5-b98e306c04a82995c39d0bdddb329ff1.png"},963339:function(e,n,r){r.d(n,{Z:function(){return t}});let t=r.p+"assets/images/4ebecd20a7894a222dfacffe33ccf262-7bbb6da2f414799be534866f9905c2ec.png"},886728:function(e,n,r){r.d(n,{Z:function(){return t}});let t=r.p+"assets/images/88e292828c1785d7e6bd1ba5af191414-22f82e3f5b019f8552a7006311b0dc90.png"},518054:function(e,n,r){r.d(n,{Z:function(){return t}});let t=r.p+"assets/images/933c5a2bda5208eaf0b92231923a8334-0669d745ca35550a4d569052dad20229.png"},190201:function(e,n,r){r.d(n,{Z:function(){return t}});let t=r.p+"assets/images/a9c5cdcd7e86c22f926fd20a141f3d68-ca14b58ed821a3be254208126eeb64bb.png"},790394:function(e,n,r){r.d(n,{Z:function(){return t}});let t=r.p+"assets/images/b6a1d35aebb050058c9305cfb49a4bff-05ed17d69d6196e4e57a1c553a0ed93a.png"},400639:function(e,n,r){r.d(n,{Z:function(){return t}});let t=r.p+"assets/images/e9fe7410038348854e83de6cb3e35e32-2ea6e8efc1c974ac5ce68f26b697c95a.png"},929134:function(e,n,r){r.d(n,{Z:function(){return t}});let t=r.p+"assets/images/f0e9b3892dbbb628757686a311e8bbf0-94fc8e15f0d06a9f6052f224b3ad1460.png"},250065:function(e,n,r){r.d(n,{Z:function(){return d},a:function(){return c}});var t=r(667294);let i={},s=t.createContext(i);function c(e){let n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);