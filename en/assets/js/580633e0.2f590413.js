"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["77132"],{100578:function(e,n,o){o.r(n),o.d(n,{metadata:()=>t,contentTitle:()=>c,default:()=>p,assets:()=>s,toc:()=>l,frontMatter:()=>a});var t=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5BF9\u8C61\u590D\u7528-gpool/\u5BF9\u8C61\u590D\u7528-\u57FA\u672C\u4F7F\u7528","title":"Pool - Usage","description":"Using gpool for object reuse in the GoFrame framework. In the example, we create and operate an object pool, demonstrating methods for obtaining, returning, and handling expired objects. This method is very effective for managing short-lived resources and can significantly improve program performance and resource utilization.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5BF9\u8C61\u590D\u7528-gpool/\u5BF9\u8C61\u590D\u7528-\u57FA\u672C\u4F7F\u7528.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5BF9\u8C61\u590D\u7528-gpool","slug":"/docs/components/container-gpool-example","permalink":"/en/docs/components/container-gpool-example","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5BF9\u8C61\u590D\u7528-gpool/\u5BF9\u8C61\u590D\u7528-\u57FA\u672C\u4F7F\u7528.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/components/container-gpool-example","title":"Pool - Usage","sidebar_position":0,"hide_title":true,"keywords":["object reuse","GoFrame","GoFrame framework","gpool","object pool","Go language","golang","network connection","resource management","programming tutorial"],"description":"Using gpool for object reuse in the GoFrame framework. In the example, we create and operate an object pool, demonstrating methods for obtaining, returning, and handling expired objects. This method is very effective for managing short-lived resources and can significantly improve program performance and resource utilization."},"sidebar":"mainSidebar","previous":{"title":"Pool","permalink":"/en/docs/components/container-gpool"},"next":{"title":"System","permalink":"/en/docs/components/os"}}'),r=o("785893"),i=o("250065");let a={slug:"/docs/components/container-gpool-example",title:"Pool - Usage",sidebar_position:0,hide_title:!0,keywords:["object reuse","GoFrame","GoFrame framework","gpool","object pool","Go language","golang","network connection","resource management","programming tutorial"],description:"Using gpool for object reuse in the GoFrame framework. In the example, we create and operate an object pool, demonstrating methods for obtaining, returning, and handling expired objects. This method is very effective for managing short-lived resources and can significantly improve program performance and resource utilization."},c=void 0,s={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Create and Destroy Methods",id:"create-and-destroy-methods",level:2}];function d(e){let n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/container/gpool"\n    "fmt"\n    "time"\n)\n\nfunc main () {\n    // Create an object pool with an expiration time of 1 second\n    p := gpool.New(time.Second, nil)\n\n    // Get an object from the pool, return nil and error information\n    fmt.Println(p.Get())\n\n    // Put an object into the pool\n    p.Put(1)\n\n    // Get an object from the pool again, return 1\n    fmt.Println(p.Get())\n\n    // After waiting for 2 seconds, try again and find the object has expired, return nil and error information\n    time.Sleep(2*time.Second)\n    fmt.Println(p.Get())\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"create-and-destroy-methods",children:"Create and Destroy Methods"}),"\n",(0,r.jsx)(n.p,{children:"We can specify dynamic create and destroy methods."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/gpool"\n    "github.com/gogf/gf/v2/net/gtcp"\n    "github.com/gogf/gf/v2/os/glog"\n    "time"\n)\n\nfunc main() {\n    // Create an object reuse pool with an object expiration time of 3 seconds, and specify create and destroy methods\n    p := gpool.New(3*time.Second, func() (interface{}, error) {\n        return gtcp.NewConn("www.baidu.com:80")\n    }, func(i interface{}) {\n        glog.Println("expired")\n        i.(*gtcp.Conn).Close()\n    })\n    conn, err := p.Get()\n    if err != nil {\n        panic(err)\n    }\n    result, err := conn.(*gtcp.Conn).SendRecv([]byte("HEAD / HTTP/1.1\\n\\n"), -1)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(result))\n    // Put back into the pool for reuse\n    p.Put(conn)\n    // Wait for a while to observe the expiration method call\n    time.Sleep(4*time.Second)\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"After execution, the terminal outputs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'HTTP/1.1 302 Found\nConnection: Keep-Alive\nContent-Length: 17931\nContent-Type: text/html\nDate: Wed, 29 May 2019 11:23:20 GMT\nEtag: "54d9749e-460b"\nServer: bfe/1.0.8.18\n\n2019-05-29 19:23:24.732 expired\n'})})]})}function p(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},250065:function(e,n,o){o.d(n,{Z:function(){return c},a:function(){return a}});var t=o(667294);let r={},i=t.createContext(r);function a(e){let n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);