"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["48224"],{769490:function(e,n,t){t.r(n),t.d(n,{metadata:()=>o,contentTitle:()=>r,default:()=>d,assets:()=>l,toc:()=>s,frontMatter:()=>a});var o=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u6587\u4EF6\u76D1\u63A7-gfsnotify/\u6587\u4EF6\u76D1\u63A7-\u79FB\u9664\u76D1\u63A7","title":"File Watching - Remove","description":"This document details how to use the Remove method and the RemoveCallback method in the GoFrame framework to remove watching callback functions for files and directories. It uses example code to illustrate how to add and remove watching callbacks, thereby improving system resource efficiency and ensuring the flexibility and controllability of file operation watching.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u6587\u4EF6\u76D1\u63A7-gfsnotify/\u6587\u4EF6\u76D1\u63A7-\u79FB\u9664\u76D1\u63A7.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u6587\u4EF6\u76D1\u63A7-gfsnotify","slug":"/docs/components/os-gfsnotify-remove","permalink":"/en/docs/components/os-gfsnotify-remove","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u6587\u4EF6\u76D1\u63A7-gfsnotify/\u6587\u4EF6\u76D1\u63A7-\u79FB\u9664\u76D1\u63A7.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":1,"frontMatter":{"slug":"/docs/components/os-gfsnotify-remove","title":"File Watching - Remove","sidebar_position":1,"hide_title":true,"keywords":["File Watching","Remove Watching","GoFrame","Remove Method","RemoveCallback","File Callback","Directory Watching","gfsnotify","Callback Removal","GoFrame Framework"],"description":"This document details how to use the Remove method and the RemoveCallback method in the GoFrame framework to remove watching callback functions for files and directories. It uses example code to illustrate how to add and remove watching callbacks, thereby improving system resource efficiency and ensuring the flexibility and controllability of file operation watching."},"sidebar":"mainSidebar","previous":{"title":"File Watching - Add","permalink":"/en/docs/components/os-gfsnotify-add"},"next":{"title":"File Watching - System Vars","permalink":"/en/docs/components/os-gfsnotify-system-variables"}}'),i=t("785893"),c=t("250065");let a={slug:"/docs/components/os-gfsnotify-remove",title:"File Watching - Remove",sidebar_position:1,hide_title:!0,keywords:["File Watching","Remove Watching","GoFrame","Remove Method","RemoveCallback","File Callback","Directory Watching","gfsnotify","Callback Removal","GoFrame Framework"],description:"This document details how to use the Remove method and the RemoveCallback method in the GoFrame framework to remove watching callback functions for files and directories. It uses example code to illustrate how to add and remove watching callbacks, thereby improving system resource efficiency and ensuring the flexibility and controllability of file operation watching."},r=void 0,l={},s=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}];function m(e){let n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["To remove watching, we can use the ",(0,i.jsx)(n.code,{children:"Remove"})," method, which will remove watching for the entire file/directory."]}),"\n",(0,i.jsxs)(n.p,{children:["When there are multiple watching callbacks for the same file/directory, we can remove a specified callback using the ",(0,i.jsx)(n.code,{children:"RemoveCallback"})," method. The ",(0,i.jsx)(n.code,{children:"callbackId"})," parameter is the unique ID returned by the ",(0,i.jsx)(n.code,{children:"Callback"})," object when adding watching."]}),"\n",(0,i.jsx)(n.h2,{id:"example-1",children:"Example 1"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "time"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gfsnotify"\n    "github.com/gogf/gf/v2/os/gtimer"\n)\n\nfunc main() {\n    var (\n        ctx    = context.Background()\n        logger = g.Log()\n    )\n    c1, err := gfsnotify.Add("/home/john/temp/log", func(event *gfsnotify.Event) {\n        logger.Debug(ctx, "callback1")\n    })\n    if err != nil {\n        panic(err)\n    }\n    c2, err := gfsnotify.Add("/home/john/temp/log", func(event *gfsnotify.Event) {\n        logger.Debug(ctx, "callback2")\n    })\n    if err != nil {\n        panic(err)\n    }\n    // Remove the registration of callback function c1 after 5 seconds, leaving only c2\n    gtimer.SetTimeout(ctx, 5*time.Second, func(ctx context.Context) {\n        err = gfsnotify.RemoveCallback(c1.Id)\n        logger.Debug(ctx, "remove callback c1", err)\n    })\n    // Remove the registration of callback function c2 after 10 seconds, all callbacks are removed, and no more log messages are output\n    gtimer.SetTimeout(ctx, 10*time.Second, func(ctx context.Context) {\n        err = gfsnotify.RemoveCallback(c2.Id)\n        logger.Debug(ctx, "remove callback c2", err)\n    })\n\n    select {}\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"example-2",children:"Example 2"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "time"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gfsnotify"\n    "github.com/gogf/gf/v2/os/gtimer"\n)\n\nfunc main() {\n    var (\n        ctx      = context.Background()\n        logger   = g.Log()\n        callback = func(event *gfsnotify.Event) {\n            logger.Debug(ctx, "callback")\n        }\n    )\n    cb, err := gfsnotify.Add("/home/john/temp", callback)\n    if err != nil {\n        panic(err)\n    }\n\n    // During this period create files, directories, modify files, delete files\n\n    // Remove the callback registration after 20 seconds, all callbacks are removed and no more log messages are output\n    gtimer.SetTimeout(ctx, 20*time.Second, func(ctx context.Context) {\n        err = gfsnotify.RemoveCallback(cb.Id)\n        logger.Debug(ctx, "remove callback", err)\n    })\n\n    select {}\n}\n'})})]})}function d(e={}){let{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return r},a:function(){return a}});var o=t(667294);let i={},c=o.createContext(i);function a(e){let n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);