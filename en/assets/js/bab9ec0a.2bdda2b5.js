"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["51678"],{834346:function(e,n,t){t.r(n),t.d(n,{metadata:()=>a,contentTitle:()=>r,default:()=>p,assets:()=>c,toc:()=>l,frontMatter:()=>s});var a=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5B89\u5168\u7C7B\u578B-gtype/\u5B89\u5168\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528","title":"Safe Type - Usage","description":"Implement concurrent safe basic type operations using the gtype module in the GoFrame framework. The example code demonstrates how to create and operate on thread-safe basic types, such as increment and decrement operations on integer types, as well as JSON serialization and deserialization functions of gtype container types, helping developers manage data conveniently.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5B89\u5168\u7C7B\u578B-gtype/\u5B89\u5168\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5B89\u5168\u7C7B\u578B-gtype","slug":"/docs/components/container-gtype-example","permalink":"/en/docs/components/container-gtype-example","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u5B89\u5168\u7C7B\u578B-gtype/\u5B89\u5168\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/components/container-gtype-example","title":"Safe Type - Usage","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","GoFrame framework","gtype","concurrent safety","JSON serialization","Go language","basic usage","thread safety","container type","data manipulation"],"description":"Implement concurrent safe basic type operations using the gtype module in the GoFrame framework. The example code demonstrates how to create and operate on thread-safe basic types, such as increment and decrement operations on integer types, as well as JSON serialization and deserialization functions of gtype container types, helping developers manage data conveniently."},"sidebar":"mainSidebar","previous":{"title":"Safe Type","permalink":"/en/docs/components/container-gtype"},"next":{"title":"Safe Type - Performance","permalink":"/en/docs/components/container-gtype-benchmark"}}'),i=t("785893"),o=t("250065");let s={slug:"/docs/components/container-gtype-example",title:"Safe Type - Usage",sidebar_position:0,hide_title:!0,keywords:["GoFrame","GoFrame framework","gtype","concurrent safety","JSON serialization","Go language","basic usage","thread safety","container type","data manipulation"],description:"Implement concurrent safe basic type operations using the gtype module in the GoFrame framework. The example code demonstrates how to create and operate on thread-safe basic types, such as increment and decrement operations on integer types, as well as JSON serialization and deserialization functions of gtype container types, helping developers manage data conveniently."},r=void 0,c={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"<code>JSON</code> Serialization/Deserialization",id:"json-serializationdeserialization",level:2}];function d(e){let n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The use of ",(0,i.jsx)(n.code,{children:"gtype"})," concurrent safe basic types is very simple, often similar to the following methods (taking the ",(0,i.jsx)(n.code,{children:"gtype.Int"})," type as an example):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func NewInt(value ...int) *Int\nfunc (v *Int) Add(delta int) (new int)\nfunc (v *Int) Cas(old, new int) bool\nfunc (v *Int) Clone() *Int\nfunc (v *Int) Set(value int) (old int)\nfunc (v *Int) String() string\nfunc (v *Int) Val() int\n"})}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/container/gtype"\n    "fmt"\n)\n\nfunc main() {\n    // Create a concurrently safe basic type object for Int\n    i := gtype.NewInt()\n\n    // Set the value\n    fmt.Println(i.Set(10))\n\n    // Get the value\n    fmt.Println(i.Val())\n\n    // Decrement by 1, and return the modified value\n    fmt.Println(i.Add(-1))\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"After execution, the output result is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-0",children:"10\n9\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"json-serializationdeserialization",children:[(0,i.jsx)(n.code,{children:"JSON"})," Serialization/Deserialization"]}),"\n",(0,i.jsxs)(n.p,{children:["All container types under the ",(0,i.jsx)(n.code,{children:"gtype"})," module implement the serialization/deserialization interface of the standard library ",(0,i.jsx)(n.code,{children:"json"})," data format."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Marshal"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "encoding/json"\n    "fmt"\n    "github.com/gogf/gf/v2/container/gtype"\n)\n\nfunc main() {\n    type Student struct {\n        Id     *gtype.Int\n        Name   *gtype.String\n        Scores *gtype.Interface\n    }\n    s := Student{\n        Id:     gtype.NewInt(1),\n        Name:   gtype.NewString("john"),\n        Scores: gtype.NewInterface([]int{100, 99, 98}),\n    }\n    b, _ := json.Marshal(s)\n    fmt.Println(string(b))\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"After execution, the output result:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{"Id":1,"Name":"john","Scores":[100,99,98]}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Unmarshal"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "encoding/json"\n    "fmt"\n    "github.com/gogf/gf/v2/container/gtype"\n)\n\nfunc main() {\n    b := []byte(`{"Id":1,"Name":"john","Scores":[100,99,98]}`)\n    type Student struct {\n        Id     *gtype.Int\n        Name   *gtype.String\n        Scores *gtype.Interface\n    }\n    s := Student{}\n    json.Unmarshal(b, &s)\n    fmt.Println(s)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"After execution, the output result:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"{1 john [100,99,98]}\n"})})]})}function p(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return r},a:function(){return s}});var a=t(667294);let i={},o=a.createContext(i);function s(e){let n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);