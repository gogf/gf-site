"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["27662"],{358090:function(e,n,r){r.r(n),r.d(n,{metadata:()=>t,contentTitle:()=>l,default:()=>h,assets:()=>d,toc:()=>a,frontMatter:()=>s});var t=JSON.parse('{"id":"course/starbook/\u7B2C\u56DB\u7AE0-\u5355\u8BCD\u7BA1\u7406/4.3.\u65B0\u589E\u5355\u8BCD","title":"4.3 Add Word","description":"Implement a RESTful-style word creation API using the GoFrame framework, including the division of responsibilities between the API layer and the logical layer in the architecture design, emphasizing that data structures should not be passthrough. Detailed explanation on how to ensure data consistency in the logical layer and avoid duplicate input, and how to call multi-layer logic in the controller to maintain single functionality. Additionally, covers the method of controller route registration and interface testing.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/course/starbook/\u7B2C\u56DB\u7AE0-\u5355\u8BCD\u7BA1\u7406/4.3.\u65B0\u589E\u5355\u8BCD.md","sourceDirName":"course/starbook/\u7B2C\u56DB\u7AE0-\u5355\u8BCD\u7BA1\u7406","slug":"/course/starbook/word-create","permalink":"/en/course/starbook/word-create","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/course/starbook/\u7B2C\u56DB\u7AE0-\u5355\u8BCD\u7BA1\u7406/4.3.\u65B0\u589E\u5355\u8BCD.md","tags":[],"version":"current","lastUpdatedBy":"oldme","lastUpdatedAt":1735822233000,"frontMatter":{"title":"4.3 Add Word","hide_title":true,"slug":"/course/starbook/word-create","keywords":["GoFrame","RESTful","API","Word Creation","Data Reception Layer","Logical Operation Layer","Data Model","Database Consistency","Word Table","Controller Registration"],"description":"Implement a RESTful-style word creation API using the GoFrame framework, including the division of responsibilities between the API layer and the logical layer in the architecture design, emphasizing that data structures should not be passthrough. Detailed explanation on how to ensure data consistency in the logical layer and avoid duplicate input, and how to call multi-layer logic in the controller to maintain single functionality. Additionally, covers the method of controller route registration and interface testing."},"sidebar":"courseStarBookSidebar","previous":{"title":"4.2 Data Model","permalink":"/en/course/starbook/word-model"},"next":{"title":"4.4 Edit Word","permalink":"/en/course/starbook/word-update"}}'),i=r("785893"),o=r("250065");let s={title:"4.3 Add Word",hide_title:!0,slug:"/course/starbook/word-create",keywords:["GoFrame","RESTful","API","Word Creation","Data Reception Layer","Logical Operation Layer","Data Model","Database Consistency","Word Table","Controller Registration"],description:"Implement a RESTful-style word creation API using the GoFrame framework, including the division of responsibilities between the API layer and the logical layer in the architecture design, emphasizing that data structures should not be passthrough. Detailed explanation on how to ensure data consistency in the logical layer and avoid duplicate input, and how to call multi-layer logic in the controller to maintain single functionality. Additionally, covers the method of controller route registration and interface testing."},l=void 0,d={},a=[{value:"Add Api",id:"add-api",level:2},{value:"Write Logic",id:"write-logic",level:2},{value:"account logic",id:"account-logic",level:3},{value:"Controller Calls Logic",id:"controller-calls-logic",level:2},{value:"Register Controller",id:"register-controller",level:2},{value:"Interface Testing",id:"interface-testing",level:2}];function c(e){let n={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["According to the ",(0,i.jsx)(n.code,{children:"RESTful"})," style, adding should use the ",(0,i.jsx)(n.code,{children:"POST"})," method. Here comes our three-point development approach."]}),"\n",(0,i.jsx)(n.h2,{id:"add-api",children:"Add Api"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"api/words/v1/words.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type CreateReq struct {  \n    g.Meta             `path:"words" method:"post" sm:"Create" tags:"Word"`  \n    Word               string `json:"word" v:"required|length:1,100" dc:"Word"`  \n    Definition         string `json:"definition" v:"required|length:1,300" dc:"Definition"`  \n    ExampleSentence    string `json:"example_sentence" v:"required|length:1,300" dc:"Example Sentence"`  \n    ChineseTranslation string `json:"chinese_translation" v:"required|length:1,300" dc:"Chinese Translation"`  \n    Pronunciation      string `json:"pronunciation" v:"required|length:1,100" dc:"Pronunciation"`  \n    ProficiencyLevel   uint   `json:"proficiency_level" v:"required|between:1,5" dc:"Proficiency Level, 1 is lowest, 5 is highest"`  \n}  \n  \ntype CreateRes struct {  \n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Did you notice that the ",(0,i.jsx)(n.code,{children:"CreateReq"})," structure is very similar to the previously defined ",(0,i.jsx)(n.code,{children:"model.WordInput"}),"? Can we reuse it to keep the ",(0,i.jsx)(n.code,{children:"api"})," and ",(0,i.jsx)(n.code,{children:"logic"})," consistent and streamline the code? Like this:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"api/words/v1/words.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type CreateReq struct {  \n    g.Meta             `path:"words" method:"post" sm:"Create" tags:"Word"`  \n    model.WordInput \n} \n\n...\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"internal/model/words.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package model  \n\n...\n\ntype WordInput struct {  \n    Word               string `json:"word" v:"required|length:1,100" dc:"Word"`  \n    Definition         string `json:"definition" v:"required|length:1,300" dc:"Definition"`  \n    ExampleSentence    string `json:"example_sentence" v:"required|length:1,300" dc:"Example Sentence"`  \n    ChineseTranslation string `json:"chinese_translation" v:"required|length:1,300" dc:"Chinese Translation"`  \n    Pronunciation      string `json:"pronunciation" v:"required|length:1,100" dc:"Pronunciation"`  \n    ProficiencyLevel   uint   `json:"proficiency_level" v:"required|between:1,5" dc:"Proficiency Level, 1 is lowest, 5 is highest"`  \n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The answer is that the program runs normally, but ",(0,i.jsx)(n.strong,{children:"this approach is highly inadvisable"}),". This is because the ",(0,i.jsx)(n.code,{children:"Api"})," layer is the data reception layer, and the ",(0,i.jsx)(n.code,{children:"Logic"})," layer is the logical operation layer. This method of passthrough will bring the following problems:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Method parameter definitions are unclear, leading to additional collaboration costs and risks of ambiguity."}),"\n",(0,i.jsx)(n.li,{children:"The same data structure is coupled with multiple methods, any change in the data structure will affect all related methods."}),"\n",(0,i.jsx)(n.li,{children:"Related methods cannot be fully reused."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The best practice is ",(0,i.jsx)(n.strong,{children:"to write more lines of code rather than passing through data models."})]}),"\n",(0,i.jsx)(n.h2,{id:"write-logic",children:"Write Logic"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"internal/logic/words/words.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package words  \n  \nimport (  \n    "context"  \n  \n    "github.com/gogf/gf/v2/errors/gerror"\n    "star/internal/dao"\n    "star/internal/model"\n    "star/internal/model/do"\n)\n\ntype Words struct {  \n}\n  \nfunc (w *Words) Create(ctx context.Context, in *model.WordInput) error {  \n    if err := w.checkWord(ctx, in); err != nil {  \n       return err  \n    }  \n  \n    _, err := dao.Words.Ctx(ctx).Data(do.Words{  \n       Uid:                in.Uid,  \n       Word:               in.Word,  \n       Definition:         in.Definition,  \n       ExampleSentence:    in.ExampleSentence,  \n       ChineseTranslation: in.ChineseTranslation,  \n       Pronunciation:      in.Pronunciation,  \n       ProficiencyLevel:   in.ProficiencyLevel,  \n    }).Insert()  \n    if err != nil {  \n       return err  \n    }  \n    return nil  \n}  \n  \nfunc (w *Words) checkWord(ctx context.Context, in *model.WordInput) error {  \n    count, err := dao.Words.Ctx(ctx).Where("uid", in.Uid).Where("word", in.Word).Count()  \n    if err != nil {  \n       return err  \n    }  \n    if count > 0 {  \n       return gerror.New("Word already exists")  \n    }  \n    return nil  \n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.code,{children:"Logic"})," layer, we also need to ensure that the same user's words cannot be duplicated, keeping consistency with the database."]}),"\n",(0,i.jsx)(n.h3,{id:"account-logic",children:"account logic"}),"\n",(0,i.jsx)(n.p,{children:"The 'uid' field is stored in the word list, and we need to provide the 'uid' by wrapping a 'GetUid' function in the 'logic/users' package."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"internal/logic/users/account.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (u *Users) GetUid(ctx context.Context) (uint, error) {  \n    user, err := u.Info(ctx)  \n    if err != nil {  \n       return 0, err  \n    }  \n    return user.Id, nil  \n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"controller-calls-logic",children:"Controller Calls Logic"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"In the controller where the words are created, we need to call both 'account' and 'Words' logic, which we encapsulate in the controller."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"internal/controller/words/words_new.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'...\n\n\npackage words\n\nimport (\n    "star/api/words"\n    usersL "star/internal/logic/users"\n    wordsL "star/internal/logic/words"\n)\n\ntype ControllerV1 struct {\n    users *usersL.Users\n    words *wordsL.Words\n}\n\nfunc NewV1() words.IWordsV1 {\n    return &ControllerV1{\n        users: &usersL.Users{},\n        words: &wordsL.Words{},\n    }  \n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"internal/controller/words/words_v1_create.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package words  \n  \nimport (  \n    "context"  \n  \n    "star/internal/model"  \n    "star/api/words/v1"\n)  \n  \nfunc (c *ControllerV1) Create(ctx context.Context, req *v1.CreateReq) (res *v1.CreateRes, err error) {  \n    uid, err := c.users.GetUid(ctx)  \n    if err != nil {  \n       return nil, err  \n    }  \n    err = c.words.Create(ctx, &model.WordInput{  \n       Uid:                uid,  \n       Word:               req.Word,  \n       Definition:         req.Definition,  \n       ExampleSentence:    req.ExampleSentence,  \n       ChineseTranslation: req.ChineseTranslation,  \n       Pronunciation:      req.Pronunciation,  \n       ProficiencyLevel:   model.ProficiencyLevel(req.ProficiencyLevel),  \n    })  \n    return nil, err  \n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.code,{children:"Controller"}),", two ",(0,i.jsx)(n.code,{children:"Logic"})," layer functions are called: ",(0,i.jsx)(n.code,{children:"users.GetUid"})," and ",(0,i.jsx)(n.code,{children:"words.Create"})," to implement the functionality. Note, do not directly call ",(0,i.jsx)(n.code,{children:"users.GetUid"})," in ",(0,i.jsx)(n.code,{children:"words.Create"}),", deleting ",(0,i.jsx)(n.code,{children:"users.GetUid"})," from the ",(0,i.jsx)(n.code,{children:"Controller"})," will increase the coupling of the ",(0,i.jsx)(n.code,{children:"words"})," package."]}),"\n",(0,i.jsxs)(n.p,{children:["The best practice is ",(0,i.jsxs)(n.strong,{children:["to ensure that the functionality of ",(0,i.jsx)(n.code,{children:"Logic"})," functions is single, calling ",(0,i.jsx)(n.code,{children:"Logic"})," multiple times in the ",(0,i.jsx)(n.code,{children:"Controller"})," to achieve functionality."]})]}),"\n",(0,i.jsx)(n.h2,{id:"register-controller",children:"Register Controller"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"internal/cmd/cmd.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package cmd  \n\n...\n\nvar (  \n    Main = gcmd.Command{  \n       Name:  "main",  \n       Usage: "main",  \n       Brief: "start http server",  \n       Func: func(ctx context.Context, parser *gcmd.Parser) (err error) {  \n          s := g.Server()  \n          s.Group("/", func(group *ghttp.RouterGroup) {  \n             group.Middleware(ghttp.MiddlewareHandlerResponse)  \n             group.Group("/v1", func(group *ghttp.RouterGroup) {  \n                group.Bind(  \n                   users.NewV1(),  \n                )  \n                group.Group("/", func(group *ghttp.RouterGroup) {  \n                   group.Middleware(middleware.Auth)  \n                   group.Bind(  \n                      account.NewV1(),  \n                      words.NewV1(),  \n                   )  \n                })  \n             })  \n          })  \n          s.Run()  \n          return nil  \n       },  \n    }  \n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The controller is registered under the same route group as ",(0,i.jsx)(n.code,{children:"account.NewV1()"})," to ensure it can pass through the ",(0,i.jsx)(n.code,{children:"Auth"})," middleware."]}),"\n",(0,i.jsx)(n.h2,{id:"interface-testing",children:"Interface Testing"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'$ curl -X POST http://127.0.0.1:8000/v1/words \\\n     -H "Authorization: eyJhbGci...5U" \\\n     -H "Content-Type: application/json" \\\n     -d \'{\n           "word": "example",\n           "definition": "A representative form or pattern.",\n           "example_sentence": "This is an example sentence.",\n           "chinese_translation": "\u4F8B\u5B50",\n           "pronunciation": "\u026A\u0261\u02C8z\u0251\u02D0mp(\u0259)l",\n           "proficiency_level": 3\n         }\'\n\n{\n\xa0\xa0\xa0 "code": 0,\n\xa0\xa0\xa0 "message": "",\n\xa0\xa0\xa0 "data": null\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Execute the command to check if the data is added correctly:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"$ SELECT * FROM words;\n"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"id"}),(0,i.jsx)(n.th,{children:"uid"}),(0,i.jsx)(n.th,{children:"word"}),(0,i.jsx)(n.th,{children:"definition"}),(0,i.jsx)(n.th,{children:"example_sentence"}),(0,i.jsx)(n.th,{children:"chinese_translation"}),(0,i.jsx)(n.th,{children:"pronunciation"}),(0,i.jsx)(n.th,{children:"proficiency_level"}),(0,i.jsx)(n.th,{children:"created_at"}),(0,i.jsx)(n.th,{children:"updated_at"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"example"}),(0,i.jsx)(n.td,{children:"A representative form or pattern."}),(0,i.jsx)(n.td,{children:"This is an example sentence."}),(0,i.jsx)(n.td,{children:"\u4F8B\u5B50"}),(0,i.jsx)(n.td,{children:"\u026A\u0261\u02C8z\u0251\u02D0mp(\u0259)l"}),(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"2024/11/12 15:38:50"}),(0,i.jsx)(n.td,{children:"2024/11/12 15:38:50"})]})})]})]})}function h(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return l},a:function(){return s}});var t=r(667294);let i={},o=t.createContext(i);function s(e){let n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);