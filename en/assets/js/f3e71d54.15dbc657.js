"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["21270"],{402733:function(e,n,r){r.r(n),r.d(n,{metadata:()=>o,contentTitle:()=>a,default:()=>u,assets:()=>c,toc:()=>l,frontMatter:()=>s});var o=JSON.parse('{"id":"course/proxima-book/\u7B2C\u56DB\u7AE0-\u4E1A\u52A1\u7F51\u5173/4.5.\u8C03\u7528\u5FAE\u670D\u52A1","title":"4.5 Calling Microservices","description":"A detailed guide on integrating and calling microservices from the API Gateway, including implementations for both user and word services, and the encapsulation of business logic.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/course/proxima-book/\u7B2C\u56DB\u7AE0-\u4E1A\u52A1\u7F51\u5173/4.5.\u8C03\u7528\u5FAE\u670D\u52A1.md","sourceDirName":"course/proxima-book/\u7B2C\u56DB\u7AE0-\u4E1A\u52A1\u7F51\u5173","slug":"/course/proxima-book/gateway-call","permalink":"/en/course/proxima-book/gateway-call","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/course/proxima-book/\u7B2C\u56DB\u7AE0-\u4E1A\u52A1\u7F51\u5173/4.5.\u8C03\u7528\u5FAE\u670D\u52A1.md","tags":[],"version":"current","lastUpdatedBy":"oldme","lastUpdatedAt":1734398801000,"frontMatter":{"title":"4.5 Calling Microservices","hide_title":true,"slug":"/course/proxima-book/gateway-call","keywords":["GoFrame","microservices integration","service invocation","gRPC communication","gateway implementation","service orchestration"],"description":"A detailed guide on integrating and calling microservices from the API Gateway, including implementations for both user and word services, and the encapsulation of business logic."},"sidebar":"courseProximaBookSidebar","previous":{"title":"4.4 Implementing the gRPC Client","permalink":"/en/course/proxima-book/gateway-client"},"next":{"title":"Chapter 5 - Further Learning","permalink":"/en/course/proxima-book/appendix"}}'),i=r("785893"),t=r("250065");let s={title:"4.5 Calling Microservices",hide_title:!0,slug:"/course/proxima-book/gateway-call",keywords:["GoFrame","microservices integration","service invocation","gRPC communication","gateway implementation","service orchestration"],description:"A detailed guide on integrating and calling microservices from the API Gateway, including implementations for both user and word services, and the encapsulation of business logic."},a=void 0,c={},l=[{value:"User Service",id:"user-service",level:2},{value:"Word Service",id:"word-service",level:2}];function d(e){let n={blockquote:"blockquote",code:"code",em:"em",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Next, we'll implement the microservices calls within our controllers to handle specific business logic."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["In real-world development, complex business logic should be encapsulated in the ",(0,i.jsx)(n.code,{children:"logic"})," layer, similar to monolithic web services, and then called by controllers."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"user-service",children:"User Service"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"app/gateway/internal/controller/user/user_v1_login.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package user  \n  \nimport (  \n    "context"  \n  \n    account "proxima/app/user/api/account/v1"  \n  \n    "proxima/app/gateway/api/user/v1"\n)  \n  \nfunc (c *ControllerV1) Login(ctx context.Context, req *v1.LoginReq) (res *v1.LoginRes, err error) {  \n    user, err := c.AccountClient.UserLogin(ctx, &account.UserLoginReq{  \n       Username: req.Username,  \n       Password: req.Password,  \n    })  \n  \n    if err != nil {  \n       return nil, err  \n    }  \n  \n    return &v1.LoginRes{  \n       Token: user.GetToken(),  \n    }, nil  \n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Let's test the gateway-to-microservice communication with a request:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'$ curl -X POST http://127.0.0.1:8000/v1/users/login \\\n     -H "Content-Type: application/json" \\\n     -d \'{\n           "username": "oldme",\n           "password": "12345678"\n         }\'\n\n{\n    "code": 0,\n    "message": "",\n    "data": {\n        "token": "I am token"\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Congratulations on seeing this response! You can now try implementing the other services as well. Here's the source code for reference."}),"\n",(0,i.jsx)(n.h2,{id:"word-service",children:"Word Service"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"app/gateway/internal/controller/words/words_v1_create.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package words  \n  \nimport (  \n    "context"  \n  \n    words "proxima/app/word/api/words/v1"  \n  \n    "proxima/app/gateway/api/words/v1"\n)  \n  \nfunc (c *ControllerV1) Create(ctx context.Context, req *v1.CreateReq) (res *v1.CreateRes, err error) {  \n    _, err = c.WordsClient.Create(ctx, &words.CreateReq{  \n       Uid:        1,  \n       Word:       req.Word,  \n       Definition: req.Definition,  \n    })  \n  \n    if err != nil {  \n       return nil, err  \n    }  \n  \n    return &v1.CreateRes{}, nil  \n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"app/gateway/internal/controller/words/words_v1_detail.go"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package words  \n  \nimport (  \n    "context"  \n  \n    "github.com/gogf/gf/v2/errors/gerror"\n    words "proxima/app/word/api/words/v1"  \n  \n    "proxima/app/gateway/api/words/v1"\n)  \n  \nfunc (c *ControllerV1) Detail(ctx context.Context, req *v1.DetailReq) (res *v1.DetailRes, err error) {  \n    word, err := c.WordsClient.Get(ctx, &words.GetReq{  \n       Id: uint32(req.Id),  \n    })  \n  \n    if err != nil {  \n       return nil, err  \n    }  \n  \n    if word == nil {  \n       return nil, gerror.New("word not found")  \n    }  \n  \n    return &v1.DetailRes{  \n       Id:         uint(word.Words.Id),  \n       Word:       word.Words.Word,  \n       Definition: word.Words.Definition,  \n    }, nil  \n}\n'})})]})}function u(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return a},a:function(){return s}});var o=r(667294);let i={},t=o.createContext(i);function s(e){let n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);