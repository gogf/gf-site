"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["8283"],{676168:function(e,i,n){n.r(i),n.d(i,{metadata:()=>t,contentTitle:()=>r,default:()=>p,assets:()=>c,toc:()=>d,frontMatter:()=>s});var t=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u6700\u4F73\u5B9E\u8DF5/\u590D\u6742\u7C7B\u578B\u5C3D\u91CF\u4F7F\u7528json\u5B58\u50A8\uFF0C\u4FBF\u4E8EScan\u5230\u5BF9\u8C61\u65F6\u81EA\u52A8\u5316\u8F6C\u6362\uFF0C\u907F\u514D\u81EA\u5B9A\u4E49\u89E3\u6790","title":"Try to use JSON for complex types for storage, facilitating automatic conversion to objects upon scanning, avoiding custom parsing","description":"The advantages of storing complex type data using JSON format in database design, primarily achieving automatic conversion through the GoFrame framework, thereby simplifying code. Taking product sale specifications as an example, the creation, deletion, updating, and querying of the database is realized by defining and using Go structs, avoiding the complexity of custom parsing. Additionally, it details how to write and query data in a Go application, ensuring an efficient data handling process.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u6700\u4F73\u5B9E\u8DF5/\u590D\u6742\u7C7B\u578B\u5C3D\u91CF\u4F7F\u7528json\u5B58\u50A8\uFF0C\u4FBF\u4E8EScan\u5230\u5BF9\u8C61\u65F6\u81EA\u52A8\u5316\u8F6C\u6362\uFF0C\u907F\u514D\u81EA\u5B9A\u4E49\u89E3\u6790.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u6700\u4F73\u5B9E\u8DF5","slug":"/docs/core/gdb-practice-using-json-for-complicated-field","permalink":"/en/docs/core/gdb-practice-using-json-for-complicated-field","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u6700\u4F73\u5B9E\u8DF5/\u590D\u6742\u7C7B\u578B\u5C3D\u91CF\u4F7F\u7528json\u5B58\u50A8\uFF0C\u4FBF\u4E8EScan\u5230\u5BF9\u8C61\u65F6\u81EA\u52A8\u5316\u8F6C\u6362\uFF0C\u907F\u514D\u81EA\u5B9A\u4E49\u89E3\u6790.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732411910000,"sidebarPosition":1,"frontMatter":{"slug":"/docs/core/gdb-practice-using-json-for-complicated-field","title":"Try to use JSON for complex types for storage, facilitating automatic conversion to objects upon scanning, avoiding custom parsing","sidebar_position":1,"hide_title":true,"keywords":["GoFrame","JSON Storage","Data Automatic Conversion","Complex Types","Database Design","ORM Component","Go Language","Product Sale Specification","Data Query","Data Structure"],"description":"The advantages of storing complex type data using JSON format in database design, primarily achieving automatic conversion through the GoFrame framework, thereby simplifying code. Taking product sale specifications as an example, the creation, deletion, updating, and querying of the database is realized by defining and using Go structs, avoiding the complexity of custom parsing. Additionally, it details how to write and query data in a Go application, ensuring an efficient data handling process."},"sidebar":"mainSidebar","previous":{"title":"Utilizing Pointer Properties and Do Objects for Flexible Modification Interfaces","permalink":"/en/docs/core/gdb-practice-using-pointer-and-do-for-update-api"},"next":{"title":"Avoid Object Initialization and sql.ErrNoRows Judgment in Queries","permalink":"/en/docs/core/gdb-practice-avoid-object-initialization-and-sql-errnorows-error"}}'),a=n("785893"),o=n("250065");let s={slug:"/docs/core/gdb-practice-using-json-for-complicated-field",title:"Try to use JSON for complex types for storage, facilitating automatic conversion to objects upon scanning, avoiding custom parsing",sidebar_position:1,hide_title:!0,keywords:["GoFrame","JSON Storage","Data Automatic Conversion","Complex Types","Database Design","ORM Component","Go Language","Product Sale Specification","Data Query","Data Structure"],description:"The advantages of storing complex type data using JSON format in database design, primarily achieving automatic conversion through the GoFrame framework, thereby simplifying code. Taking product sale specifications as an example, the creation, deletion, updating, and querying of the database is realized by defining and using Go structs, avoiding the complexity of custom parsing. Additionally, it details how to write and query data in a Go application, ensuring an efficient data handling process."},r=void 0,c={},d=[];function l(e){let i={code:"code",img:"img",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.p,{children:"Here's an example. Suppose we need to implement a product sale specification list that includes selectable shard numbers, shard capacity, and replica numbers, as shown in the image below (non-production code, for example learning only):"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{src:n(625396).Z+"",width:"1710",height:"616"})}),"\n",(0,a.jsx)(i.p,{children:"Our table design is as follows:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-sql",children:"CREATE TABLE `sell_spec` (\n    `id`            int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',\n    `product`       varchar(45) NOT NULL COMMENT 'Product Name',\n    `resources`     json NOT NULL COMMENT 'Resource specifications (cpu:memory), for example: [\"0:0.25\", \"0:1\", \"1:2\"]',\n    `disk_min`      int(10) DEFAULT NULL COMMENT 'Minimum disk capacity',\n    `disk_max`      int(10) DEFAULT NULL COMMENT 'Maximum disk capacity',\n    `disk_step`     int(10) DEFAULT NULL COMMENT 'Disk increment size',\n    `shards`        json NOT NULL COMMENT 'Shard specifications, for example: [1,3,5,8,12,16,24,32,40,48,64,80,96,128]',\n    `replicas`      json NOT NULL COMMENT 'Replica specifications, for example: [1,2,3,4,5,6,7,8,9,12]',\n    `created_at`    datetime DEFAULT NULL COMMENT 'Creation Time',\n    `updated_at`    datetime DEFAULT NULL COMMENT 'Update Time',\n    PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Sale Specification Configuration';\n"})}),"\n",(0,a.jsxs)(i.p,{children:["We define ",(0,a.jsx)(i.code,{children:"resources, shards, replicas"})," in ",(0,a.jsx)(i.code,{children:"json"})," format to store custom lists of specifications for resources, shards, and replicas (non-sequentially). The ",(0,a.jsx)(i.code,{children:"go struct"})," definition is as follows:"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-go",children:'// SellSpec is a data structure automatically generated by the GoFrame tool and maintained by the tool.\ntype SellSpec struct {\n    Id        uint        `description:"Primary Key"`\n    Product   string      `description:"Product Name"`\n    Resources string      `description:"Resource specifications (cpu:memory), for example: [\\"0:0.25\\", \\"0:1\\", \\"1:2\\"]"`\n    DiskMin   int         `description:"Minimum disk capacity"`\n    DiskMax   int         `description:"Maximum disk capacity"`\n    DiskStep  int         `description:"Disk increment size"`\n    Shards    string      `description:"Shard specifications, for example: [1,3,5,8,12,16,24,32,40,48,64,80,96,128]"`\n    Replicas  string      `description:"Replica specifications, for example: [1,2,3,4,5,6,7,8,9,12]"`\n    CreatedAt *gtime.Time `description:"Creation Time"`\n    UpdatedAt *gtime.Time `description:"Update Time"`\n}\n\n// SellSpecItem is a custom data structure extending the entity,\n// some fields such as Resources/Shards/Replicas are overridden to array types for automatic type conversion when operating with ORM.\ntype SellSpecItem struct {\n    entity.SellSpec\n    Resources []string `dc:"Resource specifications"`\n    Shards    []int    `dc:"Shard specifications"`\n    Replicas  []int    `dc:"Replica specifications"`\n}\n'})}),"\n",(0,a.jsx)(i.p,{children:"In the program, we can write and query data records as follows."}),"\n",(0,a.jsx)(i.p,{children:"Data writing:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-go",children:'_, err = dao.SellSpec.Ctx(ctx).Data(v1.SellSpecItem{\n    SellSpec: entity.SellSpec{\n        Product:  "redis",\n        DiskMin:  50,\n        DiskMax:  1000,\n        DiskStep: 10,\n    },\n    Resources: []string{"1:2", "2:4", "4:8"},\n    Shards:    []int{1, 3, 5, 8, 12, 16, 24, 32, 40, 48, 64, 80, 96, 128},\n    Replicas:  []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 12},\n}).Insert()\n'})}),"\n",(0,a.jsxs)(i.p,{children:["Data querying, the ",(0,a.jsx)(i.code,{children:"ORM"})," component will automatically convert records in the data table to array type attributes corresponding to the ",(0,a.jsx)(i.code,{children:"go struct"}),":"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-go",children:"var items []v1.SellSpecItem\nerr = dao.SellSpec.Ctx(ctx).Scan(&items)\n"})})]})}function p(e={}){let{wrapper:i}={...(0,o.a)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},625396:function(e,i,n){n.d(i,{Z:function(){return t}});let t=n.p+"assets/images/9876558f2195bcdad4d03060e9a15161-67481f212d3ac31da59eb91f515b4e80.png"},250065:function(e,i,n){n.d(i,{Z:function(){return r},a:function(){return s}});var t=n(667294);let a={},o=t.createContext(a);function s(e){let i=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:i},e.children)}}}]);