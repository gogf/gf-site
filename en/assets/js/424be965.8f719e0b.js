"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["94654"],{543589:function(e,n,t){t.r(n),t.d(n,{metadata:()=>s,contentTitle:()=>a,default:()=>u,assets:()=>l,toc:()=>d,frontMatter:()=>o});var s=JSON.parse('{"id":"quick/\u5FEB\u901F\u5F00\u59CB/\u7EDF\u4E00\u8FD4\u56DE\u7ED3\u6784","title":"Response Structure","description":"Use the GoFrame framework to unify API response structures to return data in JSON format, define API data structures and route callback functions, handle execution results using middleware, and provide complete example code. By applying these methods, you can achieve a unified data format encapsulation in business projects, simplifying the API documentation generation and maintenance process.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/quick/\u5FEB\u901F\u5F00\u59CB/\u7EDF\u4E00\u8FD4\u56DE\u7ED3\u6784.md","sourceDirName":"quick/\u5FEB\u901F\u5F00\u59CB","slug":"/quick/common-response","permalink":"/en/quick/common-response","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/quick/\u5FEB\u901F\u5F00\u59CB/\u7EDF\u4E00\u8FD4\u56DE\u7ED3\u6784.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732612158000,"sidebarPosition":7,"frontMatter":{"slug":"/quick/common-response","title":"Response Structure","hide_title":true,"sidebar_position":7,"keywords":["GoFrame Framework","Unified Response Structure","JSON Format","API Data Structure","Route Callback Function","Middleware Definition","Execution Result","Error Handling","Example Code","API Documentation Generation"],"description":"Use the GoFrame framework to unify API response structures to return data in JSON format, define API data structures and route callback functions, handle execution results using middleware, and provide complete example code. By applying these methods, you can achieve a unified data format encapsulation in business projects, simplifying the API documentation generation and maintenance process."},"sidebar":"quickSidebar","previous":{"title":"Using Middleware","permalink":"/en/quick/middleware"},"next":{"title":"API Documentation","permalink":"/en/quick/api-doc"}}'),r=t("785893"),i=t("250065");let o={slug:"/quick/common-response",title:"Response Structure",hide_title:!0,sidebar_position:7,keywords:["GoFrame Framework","Unified Response Structure","JSON Format","API Data Structure","Route Callback Function","Middleware Definition","Execution Result","Error Handling","Example Code","API Documentation Generation"],description:"Use the GoFrame framework to unify API response structures to return data in JSON format, define API data structures and route callback functions, handle execution results using middleware, and provide complete example code. By applying these methods, you can achieve a unified data format encapsulation in business projects, simplifying the API documentation generation and maintenance process."},a=void 0,l={},d=[{value:"Response Structure",id:"response-structure",level:2},{value:"API Contracts",id:"api-contracts",level:2},{value:"Handler Implementation",id:"handler-implementation",level:2},{value:"Response Middleware",id:"response-middleware",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Testing the API",id:"testing-the-api",level:2},{value:"Looking Ahead",id:"looking-ahead",level:2}];function c(e){let n={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"In this chapter, we'll implement a standardized response format for our API endpoints. All responses, whether successful or not, will be returned in a consistent JSON format."}),"\n",(0,r.jsx)(n.h2,{id:"response-structure",children:"Response Structure"}),"\n",(0,r.jsx)(n.p,{children:"Let's define our standard response structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type Response struct {\n    Message string      `json:"message" dc:"Response message"`\n    Data    interface{} `json:"data"    dc:"Response payload"`\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["We've added ",(0,r.jsx)(n.code,{children:"json"})," tags to specify how each field should be serialized in the JSON response."]}),"\n",(0,r.jsx)(n.h2,{id:"api-contracts",children:"API Contracts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type HelloReq struct {\n    g.Meta `path:"/" method:"get"`\n    Name   string `v:"required" json:"name" dc:"User\'s name"`\n    Age    int    `v:"required" json:"age"  dc:"User\'s age"`\n}\ntype HelloRes struct {\n    Content string `json:"content" dc:"Response content"`\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"HelloRes"})," struct defines the shape of our successful response data"]}),"\n",(0,r.jsxs)(n.li,{children:["All fields include ",(0,r.jsx)(n.code,{children:"json"})," tags for proper serialization"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"handler-implementation",children:"Handler Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type Hello struct{}\n\nfunc (Hello) Say(ctx context.Context, req *HelloReq) (res *HelloRes, err error) {\n    res = &HelloRes{\n        Content: fmt.Sprintf(\n            "Hello %s! Your Age is %d",\n            req.Name,\n            req.Age,\n        ),\n    }\n    return\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Instead of directly writing to the response as in previous examples, we now return a structured response using ",(0,r.jsx)(n.code,{children:"HelloRes"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"response-middleware",children:"Response Middleware"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func Middleware(r *ghttp.Request) {\n    r.Middleware.Next()\n\n    var (\n        msg string\n        res = r.GetHandlerResponse()\n        err = r.GetError()\n    )\n    if err != nil {\n        msg = err.Error()\n    } else {\n        msg = "OK"\n    }\n    r.Response.WriteJson(Response{\n        Message: msg,\n        Data:    res,\n    })\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This middleware:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Gets the handler's response using ",(0,r.jsx)(n.code,{children:"r.GetHandlerResponse()"})," (this is the ",(0,r.jsx)(n.code,{children:"*HelloRes"})," returned by our handler)"]}),"\n",(0,r.jsxs)(n.li,{children:["Checks for errors using ",(0,r.jsx)(n.code,{children:"r.GetError()"})," (the ",(0,r.jsx)(n.code,{children:"error"})," value returned by our handler)"]}),"\n",(0,r.jsx)(n.li,{children:"Wraps everything in our standard response structure and sends it as JSON"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "context"\n    "fmt"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\ntype Response struct {\n    Message string      `json:"message" dc:"Response message"`\n    Data    interface{} `json:"data"    dc:"Response payload"`\n}\n\ntype HelloReq struct {\n    g.Meta `path:"/" method:"get"`\n    Name   string `v:"required" json:"name" dc:"User\'s name"`\n    Age    int    `v:"required" json:"age"  dc:"User\'s age"`\n}\ntype HelloRes struct {\n    Content string `json:"content" dc:"Response content"`\n}\n\ntype Hello struct{}\n\nfunc (Hello) Say(ctx context.Context, req *HelloReq) (res *HelloRes, err error) {\n    res = &HelloRes{\n        Content: fmt.Sprintf(\n            "Hello %s! Your Age is %d",\n            req.Name,\n            req.Age,\n        ),\n    }\n    return\n}\n\nfunc Middleware(r *ghttp.Request) {\n    r.Middleware.Next()\n\n    var (\n        msg string\n        res = r.GetHandlerResponse()\n        err = r.GetError()\n    )\n    if err != nil {\n        msg = err.Error()\n    } else {\n        msg = "OK"\n    }\n    r.Response.WriteJson(Response{\n        Message: msg,\n        Data:    res,\n    })\n}\n\nfunc main() {\n    s := g.Server()\n    s.Group("/", func(group *ghttp.RouterGroup) {\n        group.Middleware(Middleware)\n        group.Bind(\n            new(Hello),\n        )\n    })\n    s.SetPort(8000)\n    s.Run()\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"testing-the-api",children:"Testing the API"}),"\n",(0,r.jsxs)(n.p,{children:["Let's test with valid parameters at ",(0,r.jsx)(n.a,{href:"http://127.0.0.1:8000/?name=john&age=18",children:"http://127.0.0.1:8000/?name=john&age=18"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"img_3.png",src:t(916725).Z+"",width:"1312",height:"362"})}),"\n",(0,r.jsxs)(n.p,{children:["And with missing parameters at ",(0,r.jsx)(n.a,{href:"http://127.0.0.1:8000/",children:"http://127.0.0.1:8000/"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"img_5.png",src:t(961166).Z+"",width:"934",height:"304"})}),"\n",(0,r.jsx)(n.h2,{id:"looking-ahead",children:"Looking Ahead"}),"\n",(0,r.jsx)(n.p,{children:"We've successfully implemented a standardized JSON response format, which is crucial for maintaining consistency across large APIs."}),"\n",(0,r.jsx)(n.p,{children:"Notice how we've structured everything - from input parameters to response formats - with clear types, descriptions, and validation rules. This structured approach opens up interesting possibilities: could we automatically generate API documentation from these definitions? Indeed we can, and that's exactly what we'll explore in the next chapter."})]})}function u(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},916725:function(e,n,t){t.d(n,{Z:function(){return s}});let s=t.p+"assets/images/img_3-95068b619441aaedcbb89a74335dc5ed.png"},961166:function(e,n,t){t.d(n,{Z:function(){return s}});let s=t.p+"assets/images/img_5-b3c9d57ba55f7ed62917ba8002b38769.png"},250065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return o}});var s=t(667294);let r={},i=s.createContext(r);function o(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);