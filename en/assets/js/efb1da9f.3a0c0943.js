"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["6520"],{444576:function(e,n,o){o.r(n),o.d(n,{metadata:()=>t,contentTitle:()=>a,default:()=>d,assets:()=>i,toc:()=>m,frontMatter:()=>c});var t=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u547D\u4EE4\u7BA1\u7406/\u547D\u4EE4\u7BA1\u7406-\u94FE\u8DEF\u8DDF\u8E2A","title":"Command - Tracing","description":"Using the command management component of the GoFrame framework for tracing. Through the OpenTelemetry specification, GoFrame can achieve cross-process tracing, which is especially suitable for processes that run temporarily. The example demonstrates how to call sub-processes from the main process and automatically pass link information.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u547D\u4EE4\u7BA1\u7406/\u547D\u4EE4\u7BA1\u7406-\u94FE\u8DEF\u8DDF\u8E2A.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u547D\u4EE4\u7BA1\u7406","slug":"/docs/core/gcmd-tracing","permalink":"/en/docs/core/gcmd-tracing","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u547D\u4EE4\u7BA1\u7406/\u547D\u4EE4\u7BA1\u7406-\u94FE\u8DEF\u8DDF\u8E2A.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":6,"frontMatter":{"slug":"/docs/core/gcmd-tracing","title":"Command - Tracing","sidebar_position":6,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","Command Management","Tracing","OpenTelemetry","Main Process","Sub Process","gcmd","gproc","gctx"],"description":"Using the command management component of the GoFrame framework for tracing. Through the OpenTelemetry specification, GoFrame can achieve cross-process tracing, which is especially suitable for processes that run temporarily. The example demonstrates how to call sub-processes from the main process and automatically pass link information."},"sidebar":"mainSidebar","previous":{"title":"Command - Interaction","permalink":"/en/docs/core/gcmd-scan"},"next":{"title":"Configuration","permalink":"/en/docs/core/gcfg"}}'),r=o("785893"),s=o("250065");let c={slug:"/docs/core/gcmd-tracing",title:"Command - Tracing",sidebar_position:6,hide_title:!0,keywords:["GoFrame","GoFrame Framework","Command Management","Tracing","OpenTelemetry","Main Process","Sub Process","gcmd","gproc","gctx"],description:"Using the command management component of the GoFrame framework for tracing. Through the OpenTelemetry specification, GoFrame can achieve cross-process tracing, which is especially suitable for processes that run temporarily. The example demonstrates how to call sub-processes from the main process and automatically pass link information."},a=void 0,i={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Main Process",id:"main-process",level:3},{value:"Sub Process",id:"sub-process",level:3},{value:"Execution Result",id:"execution-result",level:3}];function l(e){let n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"GoFrame"})," command management component also supports cross-process tracing features, which are particularly useful for processes that run temporarily."]}),"\n",(0,r.jsxs)(n.p,{children:["The overall tracing of the framework adopts the ",(0,r.jsx)(n.code,{children:"OpenTelemetry"})," specification."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.h3,{id:"main-process",children:"Main Process"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"main.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gcmd"\n    "github.com/gogf/gf/v2/os/gctx"\n    "github.com/gogf/gf/v2/os/gproc"\n)\n\nvar (\n    Main = &gcmd.Command{\n        Name:  "main",\n        Brief: "main process",\n        Func: func(ctx context.Context, parser *gcmd.Parser) (err error) {\n            g.Log().Debug(ctx, `this is main process`)\n            return gproc.ShellRun(ctx, `go run sub.go`)\n        },\n    }\n)\n\nfunc main() {\n    Main.Run(gctx.GetInitCtx())\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sub-process",children:"Sub Process"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"sub.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gcmd"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nvar (\n    Sub = &gcmd.Command{\n        Name:  "sub",\n        Brief: "sub process",\n        Func: func(ctx context.Context, parser *gcmd.Parser) (err error) {\n            g.Log().Debug(ctx, `this is sub process`)\n            return nil\n        },\n    }\n)\n\nfunc main() {\n    Sub.Run(gctx.GetInitCtx())\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"execution-result",children:"Execution Result"}),"\n",(0,r.jsx)(n.p,{children:"After execution, the terminal output is as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ go run main.go\n2022-06-21 20:35:06.196 [DEBU] {00698a61e2a2fa1661da5d7993d72e8c} this is main process\n2022-06-21 20:35:07.482 [DEBU] {00698a61e2a2fa1661da5d7993d72e8c} this is sub process\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can see that the link information has been automatically passed to the sub-process."})]})}function d(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},250065:function(e,n,o){o.d(n,{Z:function(){return a},a:function(){return c}});var t=o(667294);let r={},s=t.createContext(r);function c(e){let n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);