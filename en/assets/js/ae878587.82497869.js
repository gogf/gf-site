"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["71706"],{893487:function(e,r,n){n.r(r),n.d(r,{metadata:()=>t,contentTitle:()=>d,default:()=>u,assets:()=>a,toc:()=>l,frontMatter:()=>s});var t=JSON.parse('{"id":"course/starbook/\u7B2C\u4E94\u7AE0-\u5B66\u4E60\u5355\u8BCD/5.2.\u968F\u673A\u83B7\u53D6\u82E5\u5E72\u5355\u8BCD","title":"5.2 Randomly Retrieve Words","description":"Design a random word retrieval API using the GoFrame framework. Provide a path words/rand API that supports retrieving a limited number of words between 1 and 300. Use OrderRandom for random queries and Limit to restrict the number of results. The controller calls the logic to process query results and conducts API testing to verify the functionality.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/course/starbook/\u7B2C\u4E94\u7AE0-\u5B66\u4E60\u5355\u8BCD/5.2.\u968F\u673A\u83B7\u53D6\u82E5\u5E72\u5355\u8BCD.md","sourceDirName":"course/starbook/\u7B2C\u4E94\u7AE0-\u5B66\u4E60\u5355\u8BCD","slug":"/course/starbook/learn-word-rand","permalink":"/en/course/starbook/learn-word-rand","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/course/starbook/\u7B2C\u4E94\u7AE0-\u5B66\u4E60\u5355\u8BCD/5.2.\u968F\u673A\u83B7\u53D6\u82E5\u5E72\u5355\u8BCD.md","tags":[],"version":"current","lastUpdatedBy":"oldme","lastUpdatedAt":1735822233000,"frontMatter":{"title":"5.2 Randomly Retrieve Words","hide_title":true,"slug":"/course/starbook/learn-word-rand","keywords":["GoFrame","API","Random Words","Word Query","GoFrame Framework","Paginated List","API Design","Programming Logic","API Testing","Word List"],"description":"Design a random word retrieval API using the GoFrame framework. Provide a path words/rand API that supports retrieving a limited number of words between 1 and 300. Use OrderRandom for random queries and Limit to restrict the number of results. The controller calls the logic to process query results and conducts API testing to verify the functionality."},"sidebar":"courseStarBookSidebar","previous":{"title":"5.1 Preface","permalink":"/en/course/starbook/learn-word-overview"},"next":{"title":"5.3 Set Proficiency Level","permalink":"/en/course/starbook/learn-word-set-level"}}'),i=n("785893"),o=n("250065");let s={title:"5.2 Randomly Retrieve Words",hide_title:!0,slug:"/course/starbook/learn-word-rand",keywords:["GoFrame","API","Random Words","Word Query","GoFrame Framework","Paginated List","API Design","Programming Logic","API Testing","Word List"],description:"Design a random word retrieval API using the GoFrame framework. Provide a path words/rand API that supports retrieving a limited number of words between 1 and 300. Use OrderRandom for random queries and Limit to restrict the number of results. The controller calls the logic to process query results and conducts API testing to verify the functionality."},d=void 0,a={},l=[{value:"Add Api",id:"add-api",level:2},{value:"Write Logic",id:"write-logic",level:2},{value:"Controller Calls Logic",id:"controller-calls-logic",level:2},{value:"API Testing",id:"api-testing",level:2}];function c(e){let r={blockquote:"blockquote",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.p,{children:"Randomly retrieving several words is similar to fetching a paginated list of words:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"No paginated query, instead use random query;"}),"\n",(0,i.jsx)(r.li,{children:"No fuzzy query;"}),"\n",(0,i.jsx)(r.li,{children:"The returned data is basically the same."}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"add-api",children:"Add Api"}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"api/words/v1/learn_words.go"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'package v1  \n  \nimport (  \n    "github.com/gogf/gf/v2/frame/g"  \n    "star/internal/model"\n)  \n  \ntype RandListReq struct {  \n    g.Meta `path:"words/rand" method:"get" sm:"Randomly Retrieve Word List" tags:"Words"`  \n    Limit  uint `json:"limit" v:"between:1,300" dc:"Limit number, default 50"`  \n}  \n  \ntype RandListRes struct {  \n    List []List `json:"list"`  \n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"RandListReq"})," provides a ",(0,i.jsx)(r.code,{children:"Limit"})," field to specify the number of items to retrieve, ranging from ",(0,i.jsx)(r.code,{children:"1-300"}),". ",(0,i.jsx)(r.code,{children:"RandListRes"})," uses the same data structure as the paginated word list but lacks the ",(0,i.jsx)(r.code,{children:"Total"})," field."]}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"words/rand"})," is an exact match with higher priority than the word detail interface: ",(0,i.jsx)(r.code,{children:"words/{id}"}),"."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"write-logic",children:"Write Logic"}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"internal/logic/words/learn_words.go"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'package words  \n  \nimport (  \n    "context"  \n  \n    "github.com/gogf/gf/v2/errors/gerror"\n    "star/internal/dao"\n    "star/internal/model"\n    "star/internal/model/entity"\n)  \n  \n// Rand Randomly retrieve a few words  \nfunc (w *Words) Rand(ctx context.Context, uid, limit uint) ([]entity.Words, error) {  \n    if limit <= 0 {  \n       limit = 50  \n    }  \n    var (  \n       list = make([]entity.Words, limit)  \n       err  error  \n    )  \n    db := dao.Words.Ctx(ctx)  \n    if uid > 0 {  \n       db = db.Where("uid", uid)  \n    }  \n  \n    err = db.Limit(int(limit)).OrderRandom().Scan(&list)  \n    return list, err  \n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"OrderRandom"})," is a random query method provided by ",(0,i.jsx)(r.code,{children:"GoFrame ORM"}),", and the ",(0,i.jsx)(r.code,{children:"Limit"})," method is used to restrict the number of queries."]}),"\n",(0,i.jsx)(r.h2,{id:"controller-calls-logic",children:"Controller Calls Logic"}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"internal/controller/words/words_v1_rand_list.go"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'package words  \n  \nimport (  \n    "context"  \n  \n    "star/api/words/v1"\n    "star/internal/model"\n)  \n  \nfunc (c *ControllerV1) RandList(ctx context.Context, req *v1.RandListReq) (res *v1.RandListRes, err error) {  \n    uid, err := c.users.GetUid(ctx)  \n    if err != nil {  \n       return nil, err  \n    }  \n  \n    wordList, err := c.words.Rand(ctx, uid, req.Limit)  \n    if err != nil {  \n       return nil, err  \n    }  \n  \n    var list []v1.List  \n    for _, v := range wordList {  \n       list = append(list, v1.List{  \n          Id:               v.Id,  \n          Word:             v.Word,  \n          Definition:       v.Definition,  \n          ProficiencyLevel: model.ProficiencyLevel(v.ProficiencyLevel),  \n       })  \n    }  \n  \n    return &v1.RandListRes{  \n       List: list,  \n    }, nil  \n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"api-testing",children:"API Testing"}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.p,{children:"Prepare some test data and conduct tests; detailed explanations are omitted here for brevity."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:'$ curl -X GET http://127.0.0.1:8000/v1/words/rand \\\n     -H "Authorization: eyJhbGci...5U" \\\n     -H "Content-Type: application/json" \\\n\n{\n\xa0 \xa0 "code": 0,\n\xa0 \xa0 "message": "",\n\xa0 \xa0 "data": {\n\xa0 \xa0 \xa0 \xa0 "list": [\n        \xa0 \xa0 ...\n\xa0 \xa0 \xa0 \xa0 ]\n\xa0 \xa0 }\n}\n'})})]})}function u(e={}){let{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},250065:function(e,r,n){n.d(r,{Z:function(){return d},a:function(){return s}});var t=n(667294);let i={},o=t.createContext(i);function s(e){let r=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);