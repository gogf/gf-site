"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["32236"],{242132:function(e,n,t){t.r(n),t.d(n,{metadata:()=>o,contentTitle:()=>r,default:()=>m,assets:()=>c,toc:()=>d,frontMatter:()=>s});var o=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6CDB\u578B\u7C7B\u578B-gvar/\u6CDB\u578B\u7C7B\u578B-\u6CE8\u610F\u4E8B\u9879","title":"Generic - Precautions","description":"Precautions for using generic types in the GoFrame framework. Although generics improve development convenience, they may affect long-term maintenance in complex business projects. It is recommended to use generics in foundational components and middleware projects while clearly defining the data types of business models to leverage the advantages of compiled languages.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6CDB\u578B\u7C7B\u578B-gvar/\u6CDB\u578B\u7C7B\u578B-\u6CE8\u610F\u4E8B\u9879.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6CDB\u578B\u7C7B\u578B-gvar","slug":"/docs/components/container-gvar-notice","permalink":"/en/docs/components/container-gvar-notice","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6CDB\u578B\u7C7B\u578B-gvar/\u6CDB\u578B\u7C7B\u578B-\u6CE8\u610F\u4E8B\u9879.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":2,"frontMatter":{"slug":"/docs/components/container-gvar-notice","title":"Generic - Precautions","sidebar_position":2,"hide_title":true,"description":"Precautions for using generic types in the GoFrame framework. Although generics improve development convenience, they may affect long-term maintenance in complex business projects. It is recommended to use generics in foundational components and middleware projects while clearly defining the data types of business models to leverage the advantages of compiled languages.","keywords":["GoFrame","GoFrame framework","generic types","business models","long-term maintenance","foundational components","middleware projects","compiled languages","data types","type checking"]},"sidebar":"mainSidebar","previous":{"title":"Generic - Methods","permalink":"/en/docs/components/container-gvar-funcs"},"next":{"title":"Safe Type","permalink":"/en/docs/components/container-gtype"}}'),a=t("785893"),i=t("250065");let s={slug:"/docs/components/container-gvar-notice",title:"Generic - Precautions",sidebar_position:2,hide_title:!0,description:"Precautions for using generic types in the GoFrame framework. Although generics improve development convenience, they may affect long-term maintenance in complex business projects. It is recommended to use generics in foundational components and middleware projects while clearly defining the data types of business models to leverage the advantages of compiled languages.",keywords:["GoFrame","GoFrame framework","generic types","business models","long-term maintenance","foundational components","middleware projects","compiled languages","data types","type checking"]},r=void 0,c={},d=[{value:"Precautions",id:"precautions",level:2},{value:"Recommendations",id:"recommendations",level:2}];function l(e){let n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"precautions",children:"Precautions"}),"\n",(0,a.jsx)(n.p,{children:"Although the generic types provided by the framework significantly enhance development convenience, they should be used with caution for business models (not abused), as generic types can obscure the actual data types. This can be more detrimental than beneficial for long-term maintenance in business projects, especially complex ones. The data types of a business model should be as clear, meaningful, and immutable as possible to facilitate type checking and optimization during the compilation stage, and to benefit long-term maintenance."}),"\n",(0,a.jsx)(n.p,{children:"For example, here is a real business model case provided by an enthusiastic community member:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'type MiDispatchData struct {\n    Status      *g.Var `json:"status"`\n    BrandId     *g.Var `json:"brand_id"`\n    AreaId      *g.Var `json:"area_id"`\n    Year        *g.Var `json:"year"`\n    Month       *g.Var `json:"month"`\n    Day         *g.Var `json:"day"`\n    Hour        *g.Var `json:"hour"`\n    RequestTime *g.Var `json:"request_time"`\n    Source      *g.Var `json:"source"`\n    BikeId      *g.Var `json:"bike_id"`\n    BikeType    *g.Var `json:"bike_type"`\n    Lon         *g.Var `json:"lon"`\n    Lat         *g.Var `json:"lat"`\n    SiteId      *g.Var `json:"site_id"`\n    BikeMac     *g.Var `json:"bike_mac"`\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"While this approach allows the program to run normally and covers business scenarios, it loses the compiler advantage of compiled languages (similar to PHP variables), making it difficult to determine the data type of fields during later project maintenance."}),"\n",(0,a.jsx)(n.h2,{id:"recommendations",children:"Recommendations"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Generics are more frequently used in foundational components and middleware projects."}),"\n",(0,a.jsxs)(n.li,{children:["If a field has multiple meanings or types in a business scenario, generics can be used instead of types like ",(0,a.jsx)(n.code,{children:"interface{}"}),"."]}),"\n"]})]})}function m(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return r},a:function(){return s}});var o=t(667294);let a={},i=o.createContext(a);function s(e){let n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);