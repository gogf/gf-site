"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["18746"],{229439:function(e,n,t){t.r(n),t.d(n,{metadata:()=>u,contentTitle:()=>r,default:()=>l,assets:()=>a,toc:()=>c,frontMatter:()=>s});var u=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u961F\u5217\u7C7B\u578B-gqueue/\u961F\u5217\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528","title":"Queue - Usage","description":"Using the gqueue component in the GoFrame framework for basic queue operations, including enqueuing and dequeuing elements, obtaining queue length, and closing the queue. It demonstrates in detail managing queue elements through Push and Pop methods and shows the relationship between the queue and glist linked list to ensure efficient construction of concurrency-safe program logic under the GoFrame framework.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u961F\u5217\u7C7B\u578B-gqueue/\u961F\u5217\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u961F\u5217\u7C7B\u578B-gqueue","slug":"/docs/components/container-gqueue-example","permalink":"/en/docs/components/container-gqueue-example","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u961F\u5217\u7C7B\u578B-gqueue/\u961F\u5217\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/components/container-gqueue-example","title":"Queue - Usage","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","GoFrame framework","queue","gqueue","gtimer","Pop","Push","queue length","queue close","glist"],"description":"Using the gqueue component in the GoFrame framework for basic queue operations, including enqueuing and dequeuing elements, obtaining queue length, and closing the queue. It demonstrates in detail managing queue elements through Push and Pop methods and shows the relationship between the queue and glist linked list to ensure efficient construction of concurrency-safe program logic under the GoFrame framework."},"sidebar":"mainSidebar","previous":{"title":"Queue","permalink":"/en/docs/components/container-gqueue"},"next":{"title":"Queue - Performance","permalink":"/en/docs/components/container-gqueue-benchmark"}}'),i=t("785893"),o=t("250065");let s={slug:"/docs/components/container-gqueue-example",title:"Queue - Usage",sidebar_position:0,hide_title:!0,keywords:["GoFrame","GoFrame framework","queue","gqueue","gtimer","Pop","Push","queue length","queue close","glist"],description:"Using the gqueue component in the GoFrame framework for basic queue operations, including enqueuing and dequeuing elements, obtaining queue length, and closing the queue. It demonstrates in detail managing queue elements through Push and Pop methods and shows the relationship between the queue and glist linked list to ensure efficient construction of concurrency-safe program logic under the GoFrame framework."},r=void 0,a={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Using <code>Queue.Pop</code>",id:"using-queuepop",level:3},{value:"Using <code>Queue.C</code>",id:"using-queuec",level:3},{value:"Enqueue/Dequeue Elements",id:"enqueuedequeue-elements",level:2},{value:"Queue Length",id:"queue-length",level:2},{value:"Queue Close",id:"queue-close",level:2},{value:"<code>gqueue</code> and <code>glist</code>",id:"gqueue-and-glist",level:2}];function g(e){let n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsxs)(n.h3,{id:"using-queuepop",children:["Using ",(0,i.jsx)(n.code,{children:"Queue.Pop"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/gogf/gf/v2/os/gtimer"\n    "github.com/gogf/gf/v2/container/gqueue"\n)\n\nfunc main() {\n    q := gqueue.New()\n\n    // Data producer, writes data to the queue every second\n    gtimer.SetInterval(time.Second, func() {\n        v := gtime.Now().String()\n        q.Push(v)\n        fmt.Println("Push:", v)\n    })\n\n    // Close the queue after 3 seconds\n    gtimer.SetTimeout(3*time.Second, func() {\n        q.Close()\n    })\n\n    // Consumer, continuously reads queue data and outputs to the terminal\n    for {\n        if v := q.Pop(); v != nil {\n            fmt.Println(" Pop:", v)\n        } else {\n            break\n        }\n    }\n\n    // The program exits immediately when the queue is closed at the third second, so only 2 seconds of data will be printed in the result. After execution, the output will be:\n    // Output:\n    // Push: 2021-09-07 14:03:00\n    //  Pop: 2021-09-07 14:03:00\n    // Push: 2021-09-07 14:03:01\n    //  Pop: 2021-09-07 14:03:01\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"using-queuec",children:["Using ",(0,i.jsx)(n.code,{children:"Queue.C"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "fmt"\n    "time"\n\n    _ "github.com/gogf/gf/contrib/drivers/mysql/v2"\n    "github.com/gogf/gf/v2/container/gqueue"\n    "github.com/gogf/gf/v2/os/gctx"\n    "github.com/gogf/gf/v2/os/gtime"\n    "github.com/gogf/gf/v2/os/gtimer"\n)\n\nfunc main() {\n    queue := gqueue.New()\n    gtimer.AddTimes(gctx.GetInitCtx(), time.Second, 3, func(ctx context.Context) {\n        queue.Push(gtime.Now().String())\n    })\n    for {\n        select {\n        case queueItem := <-queue.C:\n            fmt.Println(queueItem)\n\n        case <-time.After(3 * time.Second):\n            fmt.Println("timeout, exit loop")\n            return\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"enqueuedequeue-elements",children:"Enqueue/Dequeue Elements"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/gogf/gf/v2/os/gtimer"\n    "github.com/gogf/gf/v2/container/gqueue"\n)\n\nfunc main() {\n    q := gqueue.New()\n\n    for i := 0; i < 10; i++ {\n        q.Push(i)\n    }\n\n    fmt.Println(q.Pop())\n    fmt.Println(q.Pop())\n    fmt.Println(q.Pop())\n\n    // Output:\n    // 0\n    // 1\n    // 2\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"queue-length",children:"Queue Length"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/gogf/gf/v2/os/gtimer"\n    "github.com/gogf/gf/v2/container/gqueue"\n)\n\nfunc main() {\n    q := gqueue.New()\n\n    q.Push(1)\n    q.Push(2)\n\n    fmt.Println(q.Len())\n    // size is an alias for the len method\n    fmt.Println(q.Size())\n\n    // May Output:\n    // 2\n    // 2\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"queue-close",children:"Queue Close"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/gogf/gf/v2/os/gtimer"\n    "github.com/gogf/gf/v2/container/gqueue"\n)\n\nfunc main() {\n    q := gqueue.New()\n\n    for i := 0; i < 10; i++ {\n        q.Push(i)\n    }\n\n    fmt.Println(q.Pop())\n    q.Close()\n    fmt.Println(q.Pop())\n    fmt.Println(q.Len())\n\n    // Output:\n    // 0\n    // <nil>\n    // 0\n}\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"gqueue-and-glist",children:[(0,i.jsx)(n.code,{children:"gqueue"})," and ",(0,i.jsx)(n.code,{children:"glist"})]}),"\n",(0,i.jsxs)(n.p,{children:["The underlying implementation of ",(0,i.jsx)(n.code,{children:"gqueue"})," is based on the ",(0,i.jsx)(n.code,{children:"glist"})," linked list, which provides dynamic size characteristics. Writing data when the queue is full or reading data when the queue is empty will result in blocking."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"glist"})," is a concurrent-safe linked list and can behave like a normal list when the concurrent-safe feature is turned off, without encountering blocking during data storage and retrieval."]})]})}function l(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return r},a:function(){return s}});var u=t(667294);let i={},o=u.createContext(i);function s(e){let n=u.useContext(o);return u.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),u.createElement(o.Provider,{value:n},e.children)}}}]);