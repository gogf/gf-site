"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["66333"],{248462:function(e,r,n){n.r(r),n.d(r,{metadata:()=>t,contentTitle:()=>o,default:()=>u,assets:()=>d,toc:()=>l,frontMatter:()=>a});var t=JSON.parse('{"id":"quick/\u5FEB\u901F\u5F00\u59CB/\u4E2D\u95F4\u4EF6\u521D\u8BD5\u7528","title":"Using Middleware","description":"Use middleware in the GoFrame framework to intercept requests and return results, and implement custom processing logic through pre and post middleware. The example code demonstrates how to define an error handling middleware and bind it to a route. Middleware makes request error handling and output format unification flexible and powerful.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/quick/\u5FEB\u901F\u5F00\u59CB/\u4E2D\u95F4\u4EF6\u521D\u8BD5\u7528.md","sourceDirName":"quick/\u5FEB\u901F\u5F00\u59CB","slug":"/quick/middleware","permalink":"/en/quick/middleware","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/quick/\u5FEB\u901F\u5F00\u59CB/\u4E2D\u95F4\u4EF6\u521D\u8BD5\u7528.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732612158000,"sidebarPosition":6,"frontMatter":{"slug":"/quick/middleware","title":"Using Middleware","hide_title":true,"sidebar_position":6,"keywords":["GoFrame","Middleware","Web Server","ErrorHandler","Request Interception","Pre-middleware","Post-middleware","Custom Error Handling","GoFrame Framework","Request Flow Control"],"description":"Use middleware in the GoFrame framework to intercept requests and return results, and implement custom processing logic through pre and post middleware. The example code demonstrates how to define an error handling middleware and bind it to a route. Middleware makes request error handling and output format unification flexible and powerful."},"sidebar":"quickSidebar","previous":{"title":"Standard Routing","permalink":"/en/quick/strict-router"},"next":{"title":"Response Structure","permalink":"/en/quick/common-response"}}'),i=n("785893"),s=n("250065");let a={slug:"/quick/middleware",title:"Using Middleware",hide_title:!0,sidebar_position:6,keywords:["GoFrame","Middleware","Web Server","ErrorHandler","Request Interception","Pre-middleware","Post-middleware","Custom Error Handling","GoFrame Framework","Request Flow Control"],description:"Use middleware in the GoFrame framework to intercept requests and return results, and implement custom processing logic through pre and post middleware. The example code demonstrates how to define an error handling middleware and bind it to a route. Middleware makes request error handling and output format unification flexible and powerful."},o=void 0,d={},l=[{value:"Understanding Middleware",id:"understanding-middleware",level:2},{value:"Implementing Error Handling",id:"implementing-error-handling",level:2},{value:"Testing the Changes",id:"testing-the-changes",level:2},{value:"Looking Ahead",id:"looking-ahead",level:2}];function c(e){let r={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["Remember the question from our previous chapter about handling error objects? Let's solve it by exploring the ",(0,i.jsx)(r.code,{children:"Web Server"}),"'s middleware feature."]}),"\n",(0,i.jsx)(r.h2,{id:"understanding-middleware",children:"Understanding Middleware"}),"\n",(0,i.jsx)(r.p,{children:"Middleware acts as an interceptor in your web server, allowing you to process requests both before and after they reach your route handlers. You can use middleware to modify requests, validate data, handle errors, or transform responses."}),"\n",(0,i.jsxs)(r.p,{children:["Middleware functions look similar to regular route handlers but include a special ",(0,i.jsx)(r.code,{children:"Middleware"})," object for controlling request flow. There are two types:"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Pre-middleware"}),": Executes before the route handler"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Post-middleware"}),": Executes after the route handler"]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Here's the basic structure:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:"func Middleware(r *ghttp.Request) {\n    // Pre-middleware logic\n    r.Middleware.Next()\n    // Post-middleware logic\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"r.Middleware.Next()"})," call passes control to the next handler in the chain. If you skip this call, the chain stops and returns immediately (useful for authentication middleware that needs to block unauthorized requests)."]}),"\n",(0,i.jsx)(r.h2,{id:"implementing-error-handling",children:"Implementing Error Handling"}),"\n",(0,i.jsx)(r.p,{children:"Let's enhance our previous example with middleware:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "context"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\ntype HelloReq struct {\n    g.Meta `path:"/" method:"get"`\n    Name   string `v:"required" dc:"User\'s name"`\n    Age    int    `v:"required" dc:"User\'s age"`\n}\ntype HelloRes struct{}\n\ntype Hello struct{}\n\nfunc (Hello) Say(ctx context.Context, req *HelloReq) (res *HelloRes, err error) {\n    r := g.RequestFromCtx(ctx)\n    r.Response.Writef(\n        "Hello %s! Your Age is %d",\n        req.Name,\n        req.Age,\n    )\n    return\n}\n\nfunc ErrorHandler(r *ghttp.Request) {\n    r.Middleware.Next()\n    \n    if err := r.GetError(); err != nil {\n        r.Response.Write("Error: ", err.Error())\n        return\n    }\n}\n\nfunc main() {\n    s := g.Server()\n    s.Group("/", func(group *ghttp.RouterGroup) {\n        group.Middleware(ErrorHandler)\n        group.Bind(\n            new(Hello),\n        )\n    })\n    s.SetPort(8000)\n    s.Run()\n}\n'})}),"\n",(0,i.jsx)(r.p,{children:"Key changes:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["We've added an ",(0,i.jsx)(r.code,{children:"ErrorHandler"})," middleware that checks for errors after the route handler executes"]}),"\n",(0,i.jsxs)(r.li,{children:["The middleware is applied to all routes in the group via ",(0,i.jsx)(r.code,{children:"group.Middleware(ErrorHandler)"})]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"testing-the-changes",children:"Testing the Changes"}),"\n",(0,i.jsx)(r.p,{children:"When you run the server, you'll see:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-text",children:"2024-11-06 22:30:06.927 [INFO] pid[35434]: http server started listening on [:8000]\n2024-11-06 22:30:06.927 [INFO] {905637567a67051830833b2189796dda} openapi specification is disabled\n\n  ADDRESS | METHOD | ROUTE |      HANDLER      |    MIDDLEWARE      \n----------|--------|-------|-------------------|--------------------\n  :8000   | GET    | /     | main.(*Hello).Say | main.ErrorHandler  \n----------|--------|-------|-------------------|--------------------\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Notice that our ",(0,i.jsx)(r.code,{children:"ErrorHandler"})," is now listed in the middleware column."]}),"\n",(0,i.jsxs)(r.p,{children:["Let's test with valid parameters at ",(0,i.jsx)(r.a,{href:"http://127.0.0.1:8000/?name=john&age=18",children:"http://127.0.0.1:8000/?name=john&age=18"}),":"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"img.png",src:n(442915).Z+"",width:"1024",height:"226"})}),"\n",(0,i.jsxs)(r.p,{children:["And with missing parameters at ",(0,i.jsx)(r.a,{href:"http://127.0.0.1:8000/",children:"http://127.0.0.1:8000/"}),":"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"img_4.png",src:n(720581).Z+"",width:"786",height:"230"})}),"\n",(0,i.jsx)(r.h2,{id:"looking-ahead",children:"Looking Ahead"}),"\n",(0,i.jsx)(r.p,{children:"We've seen how middleware can elegantly handle error cases and customize error messages. But this is just scratching the surface of what middleware can do."}),"\n",(0,i.jsx)(r.p,{children:"Consider a common scenario: most APIs in a project typically return responses in a consistent format (like JSON). Could we use middleware to standardize this across all our endpoints? Absolutely! That's exactly what we'll explore in the next chapter."})]})}function u(e={}){let{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},442915:function(e,r,n){n.d(r,{Z:function(){return t}});let t=n.p+"assets/images/img-0c2fc34c17e9ca5ab24ca490b332cc85.png"},720581:function(e,r,n){n.d(r,{Z:function(){return t}});let t=n.p+"assets/images/img_4-c5e48f95cc3ef344f366af9225b6078d.png"},250065:function(e,r,n){n.d(r,{Z:function(){return o},a:function(){return a}});var t=n(667294);let i={},s=t.createContext(i);function a(e){let r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);