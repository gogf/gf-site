"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["36503"],{567448:function(n,e,r){r.r(e),r.d(e,{metadata:()=>a,contentTitle:()=>c,default:()=>g,assets:()=>s,toc:()=>l,frontMatter:()=>o});var a=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6570\u7EC4\u7C7B\u578B-garray/\u6570\u7EC4\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528","title":"Array - Usage","description":"Using array types in the GoFrame framework, including creating concurrency-safe arrays, sorted arrays, array traversal and modification, as well as random access and popping operations. The basic array operations are demonstrated through example code, providing advanced usages such as sorting, filtering, and reversing arrays, helping developers better understand and master the array handling capabilities in the GoFrame framework.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6570\u7EC4\u7C7B\u578B-garray/\u6570\u7EC4\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6570\u7EC4\u7C7B\u578B-garray","slug":"/docs/components/container-garray-example","permalink":"/en/docs/components/container-garray-example","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u6570\u7EC4\u7C7B\u578B-garray/\u6570\u7EC4\u7C7B\u578B-\u57FA\u672C\u4F7F\u7528.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/components/container-garray-example","title":"Array - Usage","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","array","Go language","concurrency-safe","sorted array","array traversal","pop","random access","containment check","null value filtering"],"description":"Using array types in the GoFrame framework, including creating concurrency-safe arrays, sorted arrays, array traversal and modification, as well as random access and popping operations. The basic array operations are demonstrated through example code, providing advanced usages such as sorting, filtering, and reversing arrays, helping developers better understand and master the array handling capabilities in the GoFrame framework."},"sidebar":"mainSidebar","previous":{"title":"Array","permalink":"/en/docs/components/container-garray"},"next":{"title":"Array - Methods","permalink":"/en/docs/components/container-garray-funcs"}}'),t=r("785893"),i=r("250065");let o={slug:"/docs/components/container-garray-example",title:"Array - Usage",sidebar_position:0,hide_title:!0,keywords:["GoFrame","array","Go language","concurrency-safe","sorted array","array traversal","pop","random access","containment check","null value filtering"],description:"Using array types in the GoFrame framework, including creating concurrency-safe arrays, sorted arrays, array traversal and modification, as well as random access and popping operations. The basic array operations are demonstrated through example code, providing advanced usages such as sorting, filtering, and reversing arrays, helping developers better understand and master the array handling capabilities in the GoFrame framework."},c=void 0,s={},l=[{value:"Ordinary Array",id:"ordinary-array",level:3},{value:"Sorted Array",id:"sorted-array",level:3},{value:"<code>Iterate*</code> Array Traversal",id:"iterate-array-traversal",level:3},{value:"<code>Pop*</code> Array Item Pop",id:"pop-array-item-pop",level:3},{value:"<code>Rand/PopRand</code> Random Access/Pop",id:"randpoprand-random-accesspop",level:3},{value:"<code>Contains/ContainsI</code> Containment Check",id:"containscontainsi-containment-check",level:3},{value:"<code>FilterEmpty/FilterNil</code> Null Value Filtering",id:"filteremptyfilternil-null-value-filtering",level:3},{value:"<code>Reverse</code> Array Reversal",id:"reverse-array-reversal",level:3},{value:"<code>Shuffle</code> Random Sorting",id:"shuffle-random-sorting",level:3},{value:"<code>Walk</code> Traversal Modification",id:"walk-traversal-modification",level:3},{value:"<code>Join</code> Array Item Join",id:"join-array-item-join",level:3},{value:"<code>Chunk</code> Array Chunking",id:"chunk-array-chunking",level:3},{value:"<code>Merge</code> Array Merging",id:"merge-array-merging",level:3},{value:"<code>JSON</code> Serialization/Deserialization",id:"json-serializationdeserialization",level:3}];function d(n){let e={code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h3,{id:"ordinary-array",children:"Ordinary Array"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/garray"\n)\n\nfunc main () {\n    // Create a concurrency-safe int type array\n    a := garray.NewIntArray(true)\n\n    // Add data items\n    for i := 0; i < 10; i++ {\n        a.Append(i)\n    }\n\n    // Get the current array length\n    fmt.Println(a.Len())\n\n    // Get the current list of data items\n    fmt.Println(a.Slice())\n\n    // Get the item at a specified index\n    fmt.Println(a.Get(6))\n\n    // Insert a data item after a specified index\n    a.InsertAfter(9, 11)\n    // Insert a data item before a specified index\n    a.InsertBefore(10, 10)\n    fmt.Println(a.Slice())\n\n    // Modify the data item at a specified index\n    a.Set(0, 100)\n    fmt.Println(a.Slice())\n\n    // Search for a data item, return the found index position\n    fmt.Println(a.Search(5))\n\n    // Remove the data item at a specified index\n    a.Remove(0)\n    fmt.Println(a.Slice())\n\n    // Concurrency-safe, write-lock operation\n    a.LockFunc(func(array []int) {\n        // Change the last item to 100\n        array[len(array) - 1] = 100\n    })\n\n    // Concurrency-safe, read-lock operation\n    a.RLockFunc(func(array []int) {\n        fmt.Println(array[len(array) - 1])\n    })\n\n    // Clear the array\n    fmt.Println(a.Slice())\n    a.Clear()\n    fmt.Println(a.Slice())\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"After execution, the output is:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-10",children:"[0 1 2 3 4 5 6 7 8 9]\n6 true\n[0 1 2 3 4 5 6 7 8 9 10 11]\n[100 1 2 3 4 5 6 7 8 9 10 11]\n5\n[1 2 3 4 5 6 7 8 9 10 11]\n100\n[1 2 3 4 5 6 7 8 9 10 100]\n[]\n"})}),"\n",(0,t.jsx)(e.h3,{id:"sorted-array",children:"Sorted Array"}),"\n",(0,t.jsx)(e.p,{children:"The methods of sorted arrays are similar to ordinary arrays, but with automatic sorting and uniqueness filtering features."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/garray"\n)\n\nfunc main () {\n    // Customize sorted array, descending order (SortedIntArray manages data in ascending order)\n    a := garray.NewSortedArray(func(v1, v2 interface{}) int {\n        if v1.(int) < v2.(int) {\n            return 1\n        }\n        if v1.(int) > v2.(int) {\n            return -1\n        }\n        return 0\n    })\n\n    // Add data\n    a.Add(2)\n    a.Add(3)\n    a.Add(1)\n    fmt.Println(a.Slice())\n\n    // Add duplicate data\n    a.Add(3)\n    fmt.Println(a.Slice())\n\n    // Retrieve data, return the last comparison index position, retrieval result\n    // Retrieval result: 0: match; <0: argument less than comparison value; >0: argument greater than comparison value\n    fmt.Println(a.Search(1))\n\n    // Set unique\n    a.SetUnique(true)\n    fmt.Println(a.Slice())\n    a.Add(1)\n    fmt.Println(a.Slice())\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"After execution, the output is:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"[3 2 1]\n[3 3 2 1]\n3 0\n[3 2 1]\n[3 2 1]\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"iterate-array-traversal",children:[(0,t.jsx)(e.code,{children:"Iterate*"})," Array Traversal"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/garray"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    array := garray.NewStrArrayFrom(g.SliceStr{"a", "b", "c"})\n    // Iterator is alias of IteratorAsc, which iterates the array readonly in ascending order\n    //  with given callback function <f>.\n    // If <f> returns true, then it continues iterating; or false to stop.\n    array.Iterator(func(k int, v string) bool {\n        fmt.Println(k, v)\n        return true\n    })\n    // IteratorDesc iterates the array readonly in descending order with given callback function <f>.\n    // If <f> returns true, then it continues iterating; or false to stop.\n    array.IteratorDesc(func(k int, v string) bool {\n        fmt.Println(k, v)\n        return true\n    })\n\n    // Output:\n    // 0 a\n    // 1 b\n    // 2 c\n    // 2 c\n    // 1 b\n    // 0 a\n}\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"pop-array-item-pop",children:[(0,t.jsx)(e.code,{children:"Pop*"})," Array Item Pop"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/garray"\n)\n\nfunc main() {\n    array := garray.NewFrom([]interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9})\n\n    // Any Pop* functions pick, delete and return the item from the array.\n\n    fmt.Println(array.PopLeft())\n    fmt.Println(array.PopLefts(2))\n    fmt.Println(array.PopRight())\n    fmt.Println(array.PopRights(2))\n\n    // Output:\n    // 1 true\n    // [2 3]\n    // 9 true\n    // [7 8]\n}\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"randpoprand-random-accesspop",children:[(0,t.jsx)(e.code,{children:"Rand/PopRand"})," Random Access/Pop"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/garray"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    array := garray.NewFrom(g.Slice{1, 2, 3, 4, 5, 6, 7, 8, 9})\n\n    // Randomly retrieve and return 2 items from the array.\n    // It does not delete the items from the array.\n    fmt.Println(array.Rands(2))\n\n    // Randomly pick and return one item from the array.\n    // It deletes the picked item from the array.\n    fmt.Println(array.PopRand())\n}\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"containscontainsi-containment-check",children:[(0,t.jsx)(e.code,{children:"Contains/ContainsI"})," Containment Check"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/garray"\n)\n\nfunc main() {\n    var array garray.StrArray\n    array.Append("a")\n    fmt.Println(array.Contains("a"))\n    fmt.Println(array.Contains("A"))\n    fmt.Println(array.ContainsI("A"))\n\n    // Output:\n    // true\n    // false\n    // true\n}\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"filteremptyfilternil-null-value-filtering",children:[(0,t.jsx)(e.code,{children:"FilterEmpty/FilterNil"})," Null Value Filtering"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/garray"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    array1 := garray.NewFrom(g.Slice{0, 1, 2, nil, "", g.Slice{}, "john"})\n    array2 := garray.NewFrom(g.Slice{0, 1, 2, nil, "", g.Slice{}, "john"})\n    fmt.Printf("%#v\\n", array1.FilterNil().Slice())\n    fmt.Printf("%#v\\n", array2.FilterEmpty().Slice())\n\n    // Output:\n    // []interface {}{0, 1, 2, "", []interface {}{}, "john"}\n    // []interface {}{1, 2, "john"}\n}\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"reverse-array-reversal",children:[(0,t.jsx)(e.code,{children:"Reverse"})," Array Reversal"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/garray"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    array := garray.NewFrom(g.Slice{1, 5, 3})\n\n    // Reverse makes array with elements reverse.\n    fmt.Println(array.Reverse().Slice())\n\n    // Output:\n    // [3 5 1]\n}\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"shuffle-random-sorting",children:[(0,t.jsx)(e.code,{children:"Shuffle"})," Random Sorting"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/garray"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    array := garray.NewFrom(g.Slice{1, 2, 3, 4, 5, 6, 7, 8, 9})\n\n    // Shuffle randomly shuffles the array.\n    fmt.Println(array.Shuffle().Slice())\n}\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"walk-traversal-modification",children:[(0,t.jsx)(e.code,{children:"Walk"})," Traversal Modification"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/garray"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    var array garray.StrArray\n    tables := g.SliceStr{"user", "user_detail"}\n    prefix := "gf_"\n    array.Append(tables...)\n    // Add prefix for given table names.\n    array.Walk(func(value string) string {\n        return prefix + value\n    })\n    fmt.Println(array.Slice())\n\n    // Output:\n    // [gf_user gf_user_detail]\n}\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"join-array-item-join",children:[(0,t.jsx)(e.code,{children:"Join"})," Array Item Join"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/garray"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    array := garray.NewFrom(g.Slice{"a", "b", "c", "d"})\n    fmt.Println(array.Join(","))\n\n    // Output:\n    // a,b,c,d\n}\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"chunk-array-chunking",children:[(0,t.jsx)(e.code,{children:"Chunk"})," Array Chunking"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/garray"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    array := garray.NewFrom(g.Slice{1, 2, 3, 4, 5, 6, 7, 8, 9})\n\n    // Chunk splits an array into multiple arrays,\n    // the size of each array is determined by <size>.\n    // The last chunk may contain less than size elements.\n    fmt.Println(array.Chunk(2))\n\n    // Output:\n    // [[1 2] [3 4] [5 6] [7 8] [9]]\n}\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"merge-array-merging",children:[(0,t.jsx)(e.code,{children:"Merge"})," Array Merging"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/gogf/gf/v2/container/garray"\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    array1 := garray.NewFrom(g.Slice{1, 2})\n    array2 := garray.NewFrom(g.Slice{3, 4})\n    slice1 := g.Slice{5, 6}\n    slice2 := []int{7, 8}\n    slice3 := []string{"9", "0"}\n    fmt.Println(array1.Slice())\n    array1.Merge(array1)\n    array1.Merge(array2)\n    array1.Merge(slice1)\n    array1.Merge(slice2)\n    array1.Merge(slice3)\n    fmt.Println(array1.Slice())\n\n    // Output:\n    // [1 2]\n    // [1 2 1 2 3 4 5 6 7 8 9 0]\n}\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"json-serializationdeserialization",children:[(0,t.jsx)(e.code,{children:"JSON"})," Serialization/Deserialization"]}),"\n",(0,t.jsxs)(e.p,{children:["All container types under the ",(0,t.jsx)(e.code,{children:"garray"})," module implement the standard library ",(0,t.jsx)(e.code,{children:"json"})," data format serialization/deserialization interface."]}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"Marshal"})}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n       "encoding/json"\n       "fmt"\n       "github.com/gogf/gf/v2/container/garray"\n)\n\nfunc main() {\n       type Student struct {\n           Id     int\n           Name   string\n           Scores *garray.IntArray\n       }\n       s := Student{\n           Id:     1,\n           Name:   "john",\n           Scores: garray.NewIntArrayFrom([]int{100, 99, 98}),\n       }\n       b, _ := json.Marshal(s)\n       fmt.Println(string(b))\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"After execution, the output is:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:'    {"Id":1,"Name":"john","Scores":[100,99,98]}\n'})}),"\n",(0,t.jsxs)(e.ol,{start:"2",children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"Unmarshal"})}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\n\nimport (\n       "encoding/json"\n       "fmt"\n       "github.com/gogf/gf/v2/container/garray"\n)\n\n\nfunc main() {\n       b := []byte(`{"Id":1,"Name":"john","Scores":[100,99,98]}`)\n       type Student struct {\n           Id     int\n           Name   string\n           Scores *garray.IntArray\n       }\n       s := Student{}\n       json.Unmarshal(b, &s)\n       fmt.Println(s)\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"After execution, the output is:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"{1 john [100,99,98]}\n"})})]})}function g(n={}){let{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},250065:function(n,e,r){r.d(e,{Z:function(){return c},a:function(){return o}});var a=r(667294);let t={},i=a.createContext(t);function o(n){let e=a.useContext(i);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);