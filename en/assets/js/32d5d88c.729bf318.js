"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["54292"],{595973:function(e,n,t){t.r(n),t.d(n,{metadata:()=>r,contentTitle:()=>s,default:()=>l,assets:()=>d,toc:()=>c,frontMatter:()=>o});var r=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u547D\u4EE4\u7BA1\u7406/\u547D\u4EE4\u7BA1\u7406-\u7ED3\u6784\u5316\u53C2\u6570","title":"Command - Structure","description":"Structured parameter processing for command line management through the GoFrame framework. Manage parent and child commands through object-oriented management, define standardized input parameter objects, and implement automatic data conversion and validation features for command lines. Using GoFrame\'s framework development tools, users can easily manage multiple command-line projects, support data reading from configurations, and improve project development efficiency and stability.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u547D\u4EE4\u7BA1\u7406/\u547D\u4EE4\u7BA1\u7406-\u7ED3\u6784\u5316\u53C2\u6570.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u547D\u4EE4\u7BA1\u7406","slug":"/docs/core/gcmd-struct","permalink":"/en/docs/core/gcmd-struct","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u547D\u4EE4\u7BA1\u7406/\u547D\u4EE4\u7BA1\u7406-\u7ED3\u6784\u5316\u53C2\u6570.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":4,"frontMatter":{"slug":"/docs/core/gcmd-struct","title":"Command - Structure","sidebar_position":4,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","Command Line Management","Structured Parameters","Automatic Data Conversion","Parameter Validation","Command Line Tools","Data Type Conversion","Configuration Reading","Framework Development"],"description":"Structured parameter processing for command line management through the GoFrame framework. Manage parent and child commands through object-oriented management, define standardized input parameter objects, and implement automatic data conversion and validation features for command lines. Using GoFrame\'s framework development tools, users can easily manage multiple command-line projects, support data reading from configurations, and improve project development efficiency and stability."},"sidebar":"mainSidebar","previous":{"title":"Command - Object","permalink":"/en/docs/core/gcmd-command"},"next":{"title":"Command - Interaction","permalink":"/en/docs/core/gcmd-scan"}}'),a=t("785893"),i=t("250065");let o={slug:"/docs/core/gcmd-struct",title:"Command - Structure",sidebar_position:4,hide_title:!0,keywords:["GoFrame","GoFrame Framework","Command Line Management","Structured Parameters","Automatic Data Conversion","Parameter Validation","Command Line Tools","Data Type Conversion","Configuration Reading","Framework Development"],description:"Structured parameter processing for command line management through the GoFrame framework. Manage parent and child commands through object-oriented management, define standardized input parameter objects, and implement automatic data conversion and validation features for command lines. Using GoFrame's framework development tools, users can easily manage multiple command-line projects, support data reading from configurations, and improve project development efficiency and stability."},s=void 0,d={},c=[{value:"Pain Points in Command Line Management",id:"pain-points-in-command-line-management",level:2},{value:"Object-Oriented Command Management",id:"object-oriented-command-management",level:2},{value:"Structured Parameter Management",id:"structured-parameter-management",level:2},{value:"Complete Usage Example",id:"complete-usage-example",level:2},{value:"Predefined Tags",id:"predefined-tags",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Automatic Data Conversion",id:"automatic-data-conversion",level:3},{value:"Automatic Data Validation",id:"automatic-data-validation",level:3},{value:"Reading Data from Configuration",id:"reading-data-from-configuration",level:3}];function m(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"pain-points-in-command-line-management",children:"Pain Points in Command Line Management"}),"\n",(0,a.jsxs)(n.p,{children:["Previously, we introduced command line management by obtaining parsed parameters and option data through the ",(0,a.jsx)(n.code,{children:"parser"})," object of the callback function. The following pain points exist when using it:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Need to manually pass hard-coded parameter index or option name information to obtain data."}),"\n",(0,a.jsx)(n.li,{children:"Difficult to define descriptions and introductions for parameters/options."}),"\n",(0,a.jsx)(n.li,{children:"Difficult to define data types for parameters/options."}),"\n",(0,a.jsx)(n.li,{children:"Difficult to perform general data validation on parameters/options."}),"\n",(0,a.jsx)(n.li,{children:"It is a disaster for projects that need to manage a large number of command lines."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"object-oriented-command-management",children:"Object-Oriented Command Management"}),"\n",(0,a.jsxs)(n.p,{children:["Let's take a simple example of structured parameter management. We transform the previously introduced ",(0,a.jsx)(n.code,{children:"Command"})," example into structured management:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "fmt"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gcmd"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\ntype cMain struct {\n    g.Meta `name:"main"`\n}\n\ntype cMainHttpInput struct {\n    g.Meta `name:"http" brief:"start http server"`\n}\ntype cMainHttpOutput struct{}\n\ntype cMainGrpcInput struct {\n    g.Meta `name:"grpc" brief:"start grpc server"`\n}\ntype cMainGrpcOutput struct{}\n\nfunc (c *cMain) Http(ctx context.Context, in cMainHttpInput) (out *cMainHttpOutput, err error) {\n    fmt.Println("start http server")\n    return\n}\n\nfunc (c *cMain) Grpc(ctx context.Context, in cMainGrpcInput) (out *cMainGrpcOutput, err error) {\n    fmt.Println("start grpc server")\n    return\n}\n\nfunc main() {\n    cmd, err := gcmd.NewFromObject(cMain{})\n    if err != nil {\n        panic(err)\n    }\n    cmd.Run(gctx.New())\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["As you can see, we manage the parent command in the form of an object, manage its subcommands in the form of methods, and define the description/parameters/options of subcommands through standardized ",(0,a.jsx)(n.code,{children:"Input"})," input parameter objects. In most scenarios, you can ignore the use of the ",(0,a.jsx)(n.code,{children:"Output"})," return object, but for standardization and extensibility, it must be retained. If not used, just return ",(0,a.jsx)(n.code,{children:"nil"})," for this return parameter. The struct tags used will be introduced later."]}),"\n",(0,a.jsx)(n.p,{children:"We compile the example code and run it to see the effect:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ main\nUSAGE\n    main COMMAND [OPTION]\n\nCOMMAND\n    http    start http server\n    grpc    start grpc server\n\nDESCRIPTION\n    this is the command entry for starting your process\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Using the ",(0,a.jsx)(n.code,{children:"http"})," command:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ main http\nstart http server\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Using the ",(0,a.jsx)(n.code,{children:"grpc"})," command:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ main grpc\nstart grpc server\n"})}),"\n",(0,a.jsx)(n.p,{children:"The effect is consistent with the previously introduced example."}),"\n",(0,a.jsx)(n.h2,{id:"structured-parameter-management",children:"Structured Parameter Management"}),"\n",(0,a.jsx)(n.p,{children:"Since the command line is managed through objects, let's carefully look at how parameters/options are managed through structure."}),"\n",(0,a.jsxs)(n.p,{children:["We simplify the above instance a bit for a simple example of starting an ",(0,a.jsx)(n.code,{children:"http"})," service through the ",(0,a.jsx)(n.code,{children:"http"})," command:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n    "github.com/gogf/gf/v2/os/gcmd"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\ntype cMain struct {\n    g.Meta `name:"main" brief:"start http server"`\n}\n\ntype cMainHttpInput struct {\n    g.Meta `name:"http" brief:"start http server"`\n    Name   string `v:"required" name:"NAME" arg:"true" brief:"server name"`\n    Port   int    `v:"required" short:"p" name:"port"  brief:"port of http server"`\n}\ntype cMainHttpOutput struct{}\n\nfunc (c *cMain) Http(ctx context.Context, in cMainHttpInput) (out *cMainHttpOutput, err error) {\n    s := g.Server(in.Name)\n    s.BindHandler("/", func(r *ghttp.Request) {\n        r.Response.Write("Hello world")\n    })\n    s.SetPort(in.Port)\n    s.Run()\n    return\n}\n\nfunc main() {\n    cmd, err := gcmd.NewFromObject(cMain{})\n    if err != nil {\n        panic(err)\n    }\n    cmd.Run(gctx.New())\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["We defined two input parameters for the ",(0,a.jsx)(n.code,{children:"http"})," command:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"NAME"})," The name of the service, entered through a parameter. The uppercase form is used here for easy display in the automatically generated help information."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"port"})," The port of the service, entered through the ",(0,a.jsx)(n.code,{children:"p/port"})," option."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["We also use the ",(0,a.jsx)(n.code,{children:'v:"required"'})," validation tag to bind mandatory validation rules for these two parameters. Yes, in the ",(0,a.jsx)(n.code,{children:"GoFrame"})," framework, a unified validation component is used wherever validation is involved. For details, please refer to the chapter: ",(0,a.jsx)(n.a,{href:"/en/docs/core/gvalid",children:"Data Validation"})]}),"\n",(0,a.jsx)(n.p,{children:"Let's compile it and see the effect:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'$ main http\narguments validation failed for command "http": The Name field is required\n1. arguments validation failed for command "http"\n   1).  github.com/gogf/gf/v2/os/gcmd.newCommandFromMethod.func1\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/os/gcmd/gcmd_command_object.go:290\n   2).  github.com/gogf/gf/v2/os/gcmd.(*Command).doRun\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/os/gcmd/gcmd_command_run.go:120\n   3).  github.com/gogf/gf/v2/os/gcmd.(*Command).RunWithValueError\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/os/gcmd/gcmd_command_run.go:77\n   4).  github.com/gogf/gf/v2/os/gcmd.(*Command).RunWithValue\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/v2/os/gcmd/gcmd_command_run.go:32\n   5).  github.com/gogf/gf/v2/os/gcmd.(*Command).Run\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/.test/test.go:38\n2. The Name field is required\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Upon execution, there's an error due to data validation indicating that both mandatory parameters (",(0,a.jsx)(n.code,{children:"Name/Port"}),") must be passed."]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["The error here prints stack information because the ",(0,a.jsx)(n.code,{children:"GoFrame"})," framework uses a full error stack design, where all component errors come with a bottom-up error stack to facilitate quick error localization. Of course, we can obtain the returned error object and disable the stack information through the ",(0,a.jsx)(n.code,{children:"RunWithError"})," method."]})}),"\n",(0,a.jsx)(n.p,{children:"Let's add parameter input and try again:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ main http my-http-server -p 8199\n2022-01-19 22:52:45.808 [DEBU] openapi specification is disabled\n\n      SERVER     | DOMAIN  | ADDRESS | METHOD | ROUTE |                             HANDLER                             |    MIDDLEWARE\n-----------------|---------|---------|--------|-------|-----------------------------------------------------------------|--------------------\n  my-http-server | default | :8199   | ALL    | /     | main.(*cMain).Http.func1                                        |\n-----------------|---------|---------|--------|-------|-----------------------------------------------------------------|--------------------\n  my-http-server | default | :8199   | ALL    | /*    | github.com/gogf/gf/v2/net/ghttp.internalMiddlewareServerTracing | GLOBAL MIDDLEWARE\n-----------------|---------|---------|--------|-------|-----------------------------------------------------------------|--------------------\n\n2022-01-19 22:52:45.810 66292: http server started listening on [:8199]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Yes, that's correct."}),"\n",(0,a.jsx)(n.h2,{id:"complete-usage-example",children:"Complete Usage Example"}),"\n",(0,a.jsxs)(n.p,{children:["The development tool of the ",(0,a.jsx)(n.code,{children:"GoFrame"})," framework typically uses object-oriented, structured command line management. If interested, you can check the source code for more understanding: ",(0,a.jsx)(n.a,{href:"https://github.com/gogf/gf/tree/master/cmd/gf",children:"https://github.com/gogf/gf/tree/master/cmd/gf"})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:t(588339).Z+"",width:"3072",height:"1750"})}),"\n",(0,a.jsx)(n.h2,{id:"predefined-tags",children:"Predefined Tags"}),"\n",(0,a.jsxs)(n.p,{children:["In structured design, we use some struct tags, most of which originate from the attributes of the ",(0,a.jsx)(n.code,{children:"Command"})," command. Let's introduce them here:"]}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Tag"}),(0,a.jsx)(n.th,{children:"Abbreviation"}),(0,a.jsx)(n.th,{children:"Description"}),(0,a.jsx)(n.th,{children:"Note"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"name"})}),(0,a.jsx)(n.td,{children:"-"}),(0,a.jsx)(n.td,{children:"Name"}),(0,a.jsxs)(n.td,{children:["If it is an input parameter structure, it will automatically read the ",(0,a.jsx)(n.strong,{children:"method name"})," as ",(0,a.jsx)(n.code,{children:"name"})," when ",(0,a.jsx)(n.code,{children:"name"})," is not specified"]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"short"})}),(0,a.jsx)(n.td,{children:"-"}),(0,a.jsx)(n.td,{children:"Command abbreviation"}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"usage"})}),(0,a.jsx)(n.td,{children:"-"}),(0,a.jsx)(n.td,{children:"Command usage"}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"brief"})}),(0,a.jsx)(n.td,{children:"-"}),(0,a.jsx)(n.td,{children:"Command description"}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"arg"})}),(0,a.jsx)(n.td,{children:"-"}),(0,a.jsx)(n.td,{children:"Indicates the input parameter is from a parameter rather than an option"}),(0,a.jsx)(n.td,{children:"Only for attribute tags"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"orphan"})}),(0,a.jsx)(n.td,{children:"-"}),(0,a.jsx)(n.td,{children:"Indicates the option is without parameters"}),(0,a.jsxs)(n.td,{children:["Attributes are usually of ",(0,a.jsx)(n.code,{children:"bool"})," type"]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"description"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"dc"})}),(0,a.jsx)(n.td,{children:"Detailed description of the command"}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"additional"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"ad"})}),(0,a.jsx)(n.td,{children:"Additional description information of the command"}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"examples"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"eg"})}),(0,a.jsx)(n.td,{children:"Usage examples of the command"}),(0,a.jsx)(n.td,{})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"root"})}),(0,a.jsx)(n.td,{children:"-"}),(0,a.jsx)(n.td,{children:"Specifies the subcommand name as the parent command, and other methods as its subcommands"}),(0,a.jsxs)(n.td,{children:["Only for ",(0,a.jsx)(n.strong,{children:"main command"})," object struct ",(0,a.jsx)(n.code,{children:"Meta"})," tags"]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"strict"})}),(0,a.jsx)(n.td,{children:"-"}),(0,a.jsx)(n.td,{children:"Indicates the command strictly parses parameters/options, returning an error when unsupported parameters/options are input"}),(0,a.jsxs)(n.td,{children:["Only for object struct ",(0,a.jsx)(n.code,{children:"Meta"})," tags"]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"config"})}),(0,a.jsx)(n.td,{children:"-"}),(0,a.jsx)(n.td,{children:"Indicates that option data for the command supports reading from a specified configuration, sourced from the default global singleton configuration object"}),(0,a.jsxs)(n.td,{children:["Only for method input struct ",(0,a.jsx)(n.code,{children:"Meta"})," tags"]})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,a.jsx)(n.h3,{id:"automatic-data-conversion",children:"Automatic Data Conversion"}),"\n",(0,a.jsxs)(n.p,{children:["Structured parameter input supports automatic data type conversion. You just need to define the data types, and the rest is handled by the framework components. Automatic data type conversion is present in many components of the framework, especially in parameter inputs for ",(0,a.jsx)(n.code,{children:"HTTP/GRPC"})," services. The underlying data conversion component used is: ",(0,a.jsx)(n.a,{href:"/en/docs/core/gconv",children:"Type Conversion"})]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["The command line parameter data conversion uses ",(0,a.jsx)(n.strong,{children:"case insensitive, and ignores special characters"})," rules to match attribute fields. For example, if there is a ",(0,a.jsx)(n.code,{children:"Name"})," field property in the input parameter structure, no matter whether the command line inputs ",(0,a.jsx)(n.code,{children:"name"})," or ",(0,a.jsx)(n.code,{children:"NAME"})," as a named parameter, it will be received by the ",(0,a.jsx)(n.code,{children:"Name"})," field property."]})}),"\n",(0,a.jsx)(n.h3,{id:"automatic-data-validation",children:"Automatic Data Validation"}),"\n",(0,a.jsxs)(n.p,{children:["Similarly, the data validation component is also a unified component. Please refer to the chapter: ",(0,a.jsx)(n.a,{href:"/en/docs/core/gvalid",children:"Data Validation"})," for details."]}),"\n",(0,a.jsx)(n.h3,{id:"reading-data-from-configuration",children:"Reading Data from Configuration"}),"\n",(0,a.jsxs)(n.p,{children:["When the corresponding data is not passed in the command line, the input parameter's structure data supports automatic acquisition from the configuration component, which only needs to set the ",(0,a.jsx)(n.code,{children:"config"})," tag in ",(0,a.jsx)(n.code,{children:"Meta"}),". The configuration source is the default global singleton configuration object. You can refer to the example in the ",(0,a.jsx)(n.code,{children:"GoFrame"})," framework development tool source code: ",(0,a.jsx)(n.a,{href:"https://github.com/gogf/gf/tree/master/cmd/gf",children:"https://github.com/gogf/gf/tree/master/cmd/gf"})]})]})}function l(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},588339:function(e,n,t){t.d(n,{Z:function(){return r}});let r=t.p+"assets/images/fa0dce21882f5ac6fb8014b287122e73-a9707f7afaf256a39a6f9a9fcc603cc1.png"},250065:function(e,n,t){t.d(n,{Z:function(){return s},a:function(){return o}});var r=t(667294);let a={},i=r.createContext(a);function o(e){let n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);