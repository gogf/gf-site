"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["74252"],{197131:function(e,n,r){r.r(n),r.d(n,{metadata:()=>o,contentTitle:()=>d,default:()=>u,assets:()=>t,toc:()=>c,frontMatter:()=>s});var o=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u94FE\u5F0F\u64CD\u4F5C/ORM\u94FE\u5F0F\u64CD\u4F5C-\u6570\u636E\u67E5\u8BE2/ORM\u67E5\u8BE2-\u5E38\u7528\u64CD\u4F5C\u793A\u4F8B","title":"Model Query - Operators","description":"Common operation examples for ORM queries using the GoFrame framework, including IN, LIKE, MIN/MAX/AVG/SUM operations. It also introduces the use of chaining query methods like WhereIn, WhereNotIn, WhereBetween, etc., and helps understand different query strategies and parameter filtering through examples.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u94FE\u5F0F\u64CD\u4F5C/ORM\u94FE\u5F0F\u64CD\u4F5C-\u6570\u636E\u67E5\u8BE2/ORM\u67E5\u8BE2-\u5E38\u7528\u64CD\u4F5C\u793A\u4F8B.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u94FE\u5F0F\u64CD\u4F5C/ORM\u94FE\u5F0F\u64CD\u4F5C-\u6570\u636E\u67E5\u8BE2","slug":"/docs/core/gdb-chaining-query-example","permalink":"/en/docs/core/gdb-chaining-query-example","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u94FE\u5F0F\u64CD\u4F5C/ORM\u94FE\u5F0F\u64CD\u4F5C-\u6570\u636E\u67E5\u8BE2/ORM\u67E5\u8BE2-\u5E38\u7528\u64CD\u4F5C\u793A\u4F8B.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":9,"frontMatter":{"slug":"/docs/core/gdb-chaining-query-example","title":"Model Query - Operators","sidebar_position":9,"hide_title":true,"keywords":["GoFrame","ORM Query","Database Operations","Chaining Queries","Common Conditions","Statistical Methods","Field Uniqueness","Query Examples","GoFrame Framework","Parameter Filtering"],"description":"Common operation examples for ORM queries using the GoFrame framework, including IN, LIKE, MIN/MAX/AVG/SUM operations. It also introduces the use of chaining query methods like WhereIn, WhereNotIn, WhereBetween, etc., and helps understand different query strategies and parameter filtering through examples."},"sidebar":"mainSidebar","previous":{"title":"Model Query - Subquery","permalink":"/en/docs/core/gdb-chaining-query-sub-query"},"next":{"title":"ORM Model - Association","permalink":"/en/docs/core/gdb-chaining-relation"}}'),i=r("785893"),l=r("250065");let s={slug:"/docs/core/gdb-chaining-query-example",title:"Model Query - Operators",sidebar_position:9,hide_title:!0,keywords:["GoFrame","ORM Query","Database Operations","Chaining Queries","Common Conditions","Statistical Methods","Field Uniqueness","Query Examples","GoFrame Framework","Parameter Filtering"],description:"Common operation examples for ORM queries using the GoFrame framework, including IN, LIKE, MIN/MAX/AVG/SUM operations. It also introduces the use of chaining query methods like WhereIn, WhereNotIn, WhereBetween, etc., and helps understand different query strategies and parameter filtering through examples."},d=void 0,t={},c=[{value:"<code>in</code> Query",id:"in-query",level:2},{value:"<code>like</code> Query",id:"like-query",level:2},{value:"<code>min/max/avg/sum</code>",id:"minmaxavgsum",level:2},{value:"<code>count</code> Query",id:"count-query",level:2},{value:"<code>distinct</code> Query",id:"distinct-query",level:2},{value:"<code>between</code> Query",id:"between-query",level:2},{value:"<code>null</code> Query",id:"null-query",level:2}];function a(e){let n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h2,{id:"in-query",children:[(0,i.jsx)(n.code,{children:"in"})," Query"]}),"\n",(0,i.jsxs)(n.p,{children:["Use string or ",(0,i.jsx)(n.code,{children:"slice"})," parameter types. When using the ",(0,i.jsx)(n.code,{children:"slice"})," parameter type, only one ",(0,i.jsx)(n.code,{children:"?"})," placeholder is needed."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// SELECT * FROM user WHERE uid IN(100,10000,90000)\ng.Model("user").Where("uid IN(?,?,?)", 100, 10000, 90000).All()\ng.Model("user").Where("uid", g.Slice{100, 10000, 90000}).All()\n\n// SELECT * FROM user WHERE gender=1 AND uid IN(100,10000,90000)\ng.Model("user").Where("gender=? AND uid IN(?)", 1, g.Slice{100, 10000, 90000}).All()\n\n// SELECT COUNT(*) FROM user WHERE age in(18,50)\ng.Model("user").Where("age IN(?,?)", 18, 50).Count()\ng.Model("user").Where("age", g.Slice{18, 50}).Count()\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Use any ",(0,i.jsx)(n.code,{children:"map"})," parameter type."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// SELECT * FROM user WHERE gender=1 AND uid IN(100,10000,90000)\ng.Model("user").Where(g.Map{\n    "gender" : 1,\n    "uid"    : g.Slice{100,10000,90000},\n}).All()\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"struct"})," parameter type, note that the order of query conditions depends on the order of struct attribute definitions."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type User struct {\n    Id     []int  `orm:"uid"`\n    Gender int    `orm:"gender"`\n}\n// SELECT * FROM `user` WHERE uid IN(100,10000,90000) AND gender=1\ng.Model("user").Where(User{\n    Gender: 1,\n    Id:     []int{100, 10000, 90000},\n}).All()\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["For usability, if the passed ",(0,i.jsx)(n.code,{children:"slice"})," parameter is empty or ",(0,i.jsx)(n.code,{children:"nil"}),", the query will not throw an error but convert to a ",(0,i.jsx)(n.code,{children:"false"})," condition statement."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// SELECT * FROM `user` WHERE 0=1\ng.Model("user").Where("uid", g.Slice{}).All()\n// SELECT * FROM `user` WHERE `uid` IS NULL\ng.Model("user").Where("uid", nil).All()\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ORM"})," also provides common condition methods ",(0,i.jsx)(n.code,{children:"WhereIn/WhereNotIn/WhereOrIn/WhereOrNotIn"})," for common ",(0,i.jsx)(n.code,{children:"In"})," query condition filtering. Method definitions are as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (m *Model) WhereIn(column string, in interface{}) *Model\nfunc (m *Model) WhereNotIn(column string, in interface{}) *Model\nfunc (m *Model) WhereOrIn(column string, in interface{}) *Model\nfunc (m *Model) WhereOrNotIn(column string, in interface{}) *Model\n"})}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// SELECT * FROM `user` WHERE (`gender`=1) AND (`type` IN(1,2,3))\ng.Model("user").Where("gender", 1).WhereIn("type", g.Slice{1,2,3}).All()\n\n// SELECT * FROM `user` WHERE (`gender`=1) AND (`type` NOT IN(1,2,3))\ng.Model("user").Where("gender", 1).WhereNotIn("type", g.Slice{1,2,3}).All()\n\n// SELECT * FROM `user` WHERE (`gender`=1) OR (`type` IN(1,2,3))\ng.Model("user").Where("gender", 1).WhereOrIn("type", g.Slice{1,2,3}).All()\n\n// SELECT * FROM `user` WHERE (`gender`=1) OR (`type` NOT IN(1,2,3))\ng.Model("user").Where("gender", 1).WhereOrNotIn("type", g.Slice{1,2,3}).All()\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"like-query",children:[(0,i.jsx)(n.code,{children:"like"})," Query"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// SELECT * FROM `user` WHERE name like \'%john%\'\ng.Model("user").Where("name like ?", "%john%").All()\n// SELECT * FROM `user` WHERE birthday like \'1990-%\'\ng.Model("user").Where("birthday like ?", "1990-%").All()\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Starting from ",(0,i.jsx)(n.code,{children:"goframe v1.16"}),", ",(0,i.jsx)(n.code,{children:"goframe"}),"'s ",(0,i.jsx)(n.code,{children:"ORM"})," also provides common condition methods ",(0,i.jsx)(n.code,{children:"WhereLike/WhereNotLike/WhereOrLike/WhereOrNotLike"})," for common ",(0,i.jsx)(n.code,{children:"Like"})," query condition filtering. Method definitions are as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (m *Model) WhereLike(column string, like interface{}) *Model\nfunc (m *Model) WhereNotLike(column string, like interface{}) *Model\nfunc (m *Model) WhereOrLike(column string, like interface{}) *Model\nfunc (m *Model) WhereOrNotLike(column string, like interface{}) *Model\n"})}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// SELECT * FROM `user` WHERE (`gender`=1) AND (`name` LIKE \'john%\')\ng.Model("user").Where("gender", 1).WhereLike("name", "john%").All()\n\n// SELECT * FROM `user` WHERE (`gender`=1) AND (`name` NOT LIKE \'john%\')\ng.Model("user").Where("gender", 1).WhereNotLike("name", "john%").All()\n\n// SELECT * FROM `user` WHERE (`gender`=1) OR (`name` LIKE \'john%\')\ng.Model("user").Where("gender", 1).WhereOrLike("name", "john%").All()\n\n// SELECT * FROM `user` WHERE (`gender`=1) OR (`name` NOT LIKE \'john%\')\ng.Model("user").Where("gender", 1).WhereOrNotLike("name", "john%").All()\n'})}),"\n",(0,i.jsx)(n.h2,{id:"minmaxavgsum",children:(0,i.jsx)(n.code,{children:"min/max/avg/sum"})}),"\n",(0,i.jsxs)(n.p,{children:["We directly apply the statistical method on the ",(0,i.jsx)(n.code,{children:"Fields"})," method, for example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// SELECT MIN(score) FROM `user` WHERE `uid`=1 LIMIT 1\ng.Model("user").Fields("MIN(score)").Where("uid", 1).Value()\n\n// SELECT MAX(score) FROM `user` WHERE `uid`=1 LIMIT 1\ng.Model("user").Fields("MAX(score)").Where("uid", 1).Value()\n\n// SELECT AVG(score) FROM `user` WHERE `uid`=1 LIMIT 1\ng.Model("user").Fields("AVG(score)").Where("uid", 1).Value()\n\n// SELECT SUM(score) FROM `user` WHERE `uid`=1  LIMIT 1\ng.Model("user").Fields("SUM(score)").Where("uid", 1).Value()\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Starting from ",(0,i.jsx)(n.code,{children:"goframe v1.16"}),", ",(0,i.jsx)(n.code,{children:"goframe"}),"'s ",(0,i.jsx)(n.code,{children:"ORM"})," also provides common statistical methods ",(0,i.jsx)(n.code,{children:"Min/Max/Avg/Sum"})," for common field statistical queries. Method definitions are as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (m *Model) Min(column string) (float64, error)\nfunc (m *Model) Max(column string) (float64, error)\nfunc (m *Model) Avg(column string) (float64, error)\nfunc (m *Model) Sum(column string) (float64, error)\n"})}),"\n",(0,i.jsx)(n.p,{children:"The above examples using shortcut statistical methods:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// SELECT MIN(`score`) FROM `user` WHERE `uid`=1 LIMIT 1\ng.Model("user").Where("uid", 1).Min("score")\n\n// SELECT MAX(`score`) FROM `user` WHERE `uid`=1 LIMIT 1\ng.Model("user").Where("uid", 1).Max("score")\n\n// SELECT AVG(`score`) FROM `user` WHERE `uid`=1 LIMIT 1\ng.Model("user").Where("uid", 1).Avg("score")\n\n// SELECT SUM(`score`) FROM `user` WHERE `uid`=1 LIMIT 1\ng.Model("user").Where("uid", 1).Sum("score")\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"count-query",children:[(0,i.jsx)(n.code,{children:"count"})," Query"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// SELECT COUNT(1) FROM `user` WHERE `birthday`=\'1990-10-01\'\ng.Model("user").Where("birthday", "1990-10-01").Count()\n// SELECT COUNT(uid) FROM `user` WHERE `birthday`=\'1990-10-01\'\ng.Model("user").Fields("uid").Where("birthday", "1990-10-01").Count()\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Starting from ",(0,i.jsx)(n.code,{children:"goframe v1.16"}),", ",(0,i.jsx)(n.code,{children:"goframe"}),"'s ",(0,i.jsx)(n.code,{children:"ORM"})," also provides a common method ",(0,i.jsx)(n.code,{children:"CountColumn"})," for ",(0,i.jsx)(n.code,{children:"Count"})," by field. Method definition is as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (m *Model) CountColumn(column string) (int, error)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'g.Model("user").Where("birthday", "1990-10-01").CountColumn("uid")\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"distinct-query",children:[(0,i.jsx)(n.code,{children:"distinct"})," Query"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// SELECT DISTINCT uid,name FROM `user`\ng.Model("user").Fields("DISTINCT uid,name").All()\n// SELECT COUNT(DISTINCT uid,name) FROM `user`\ng.Model("user").Fields("DISTINCT uid,name").Count()\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Starting from ",(0,i.jsx)(n.code,{children:"goframe v1.16"}),", ",(0,i.jsx)(n.code,{children:"goframe"}),"'s ",(0,i.jsx)(n.code,{children:"ORM"})," also provides a method ",(0,i.jsx)(n.code,{children:"Distinct"})," for field uniqueness filtering. Method definition is as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (m *Model) Distinct() *Model\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// SELECT COUNT(DISTINCT `name`) FROM `user`\ng.Model("user").Distinct().CountColumn("name")\n\n// SELECT COUNT(DISTINCT uid,name) FROM `user`\ng.Model("user").Distinct().CountColumn("uid,name")\n\n// SELECT DISTINCT group,age FROM `user`\ng.Model("user").Fields("group, age").Distinct().All()\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"between-query",children:[(0,i.jsx)(n.code,{children:"between"})," Query"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// SELECT * FROM `user` WHERE age between 18 and 20\ng.Model("user").Where("age between ? and ?", 18, 20).All()\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Starting from ",(0,i.jsx)(n.code,{children:"goframe v1.16"}),", ",(0,i.jsx)(n.code,{children:"goframe"}),"'s ",(0,i.jsx)(n.code,{children:"ORM"})," also provides common condition methods ",(0,i.jsx)(n.code,{children:"WhereBetween/WhereNotBetween/WhereOrBetween/WhereOrNotBetween"})," for common ",(0,i.jsx)(n.code,{children:"Between"})," query condition filtering. Method definitions are as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (m *Model) WhereBetween(column string, min, max interface{}) *Model\nfunc (m *Model) WhereNotBetween(column string, min, max interface{}) *Model\nfunc (m *Model) WhereOrBetween(column string, min, max interface{}) *Model\nfunc (m *Model) WhereOrNotBetween(column string, min, max interface{}) *Model\n"})}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// SELECT * FROM `user` WHERE (`gender`=0) AND (`age` BETWEEN 16 AND 20)\ng.Model("user").Where("gender", 0).WhereBetween("age", 16, 20).All()\n\n// SELECT * FROM `user` WHERE (`gender`=0) AND (`age` NOT BETWEEN 16 AND 20)\ng.Model("user").Where("gender", 0).WhereNotBetween("age", 16, 20).All()\n\n// SELECT * FROM `user` WHERE (`gender`=0) OR (`age` BETWEEN 16 AND 20)\ng.Model("user").Where("gender", 0).WhereOrBetween("age", 16, 20).All()\n\n// SELECT * FROM `user` WHERE (`gender`=0) OR (`age` NOT BETWEEN 16 AND 20)\ng.Model("user").Where("gender", 0).WhereOrNotBetween("age", 16, 20).All()\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"null-query",children:[(0,i.jsx)(n.code,{children:"null"})," Query"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ORM"})," provides common condition methods ",(0,i.jsx)(n.code,{children:"WhereNull/WhereNotNull/WhereOrNull/WhereOrNotNull"})," for common ",(0,i.jsx)(n.code,{children:"Null"})," query condition filtering. Method definitions are as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (m *Model) WhereNull(columns ...string) *Model\nfunc (m *Model) WhereNotNull(columns ...string) *Model\nfunc (m *Model) WhereOrNull(columns ...string) *Model\nfunc (m *Model) WhereOrNotNull(columns ...string) *Model\n"})}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// SELECT * FROM `user` WHERE (`created_at`>\'2021-05-01 00:00:00\') AND (`inviter` IS NULL)\ng.Model("user").Where("created_at>?", gtime.New("2021-05-01")).WhereNull("inviter").All()\n\n// SELECT * FROM `user` WHERE (`created_at`>\'2021-05-01 00:00:00\') AND (`inviter` IS NOT NULL)\ng.Model("user").Where("created_at>?", gtime.New("2021-05-01")).WhereNotNull("inviter").All()\n\n// SELECT * FROM `user` WHERE (`created_at`>\'2021-05-01 00:00:00\') OR (`inviter` IS NULL)\ng.Model("user").Where("created_at>?", gtime.New("2021-05-01")).WhereOrNull("inviter").All()\n\n// SELECT * FROM `user` WHERE (`created_at`>\'2021-05-01 00:00:00\') OR (`inviter` IS NOT NULL)\ng.Model("user").Where("created_at>?", gtime.New("2021-05-01")).WhereOrNotNull("inviter").All()\n'})}),"\n",(0,i.jsx)(n.p,{children:"Additionally, these methods support multiple field inputs, for example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// SELECT * FROM `user` WHERE (`created_at`>\'2021-05-01 00:00:00\') AND (`inviter` IS NULL) AND (`creator` IS NULL)\ng.Model("user").Where("created_at>?", gtime.New("2021-05-01")).WhereNull("inviter", "creator").All()\n'})})]})}function u(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return d},a:function(){return s}});var o=r(667294);let i={},l=o.createContext(i);function s(e){let n=o.useContext(l);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);