"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["77242"],{447460:function(e,t,r){r.r(t),r.d(t,{metadata:()=>n,contentTitle:()=>a,default:()=>u,assets:()=>s,toc:()=>c,frontMatter:()=>o});var n=JSON.parse('{"id":"docs/WEB\u670D\u52A1\u5F00\u53D1/\u8DEF\u7531\u7BA1\u7406/\u8DEF\u7531\u7BA1\u7406-\u8DEF\u7531\u6CE8\u518C/\u8DEF\u7531\u6CE8\u518C-\u89C4\u8303\u8DEF\u7531/\u89C4\u8303\u8DEF\u7531-\u5982\u4F55\u4F7F\u7528","title":"Standard Router - Usage","description":"Define router methods, manage and register routers, and standardize request and response objects in the GoFrame framework. By using the grouped router\'s Bind method and the basic BindHandler method, we can effectively manage routers. It also includes how to validate input data and use a unified post-middleware for data processing.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/WEB\u670D\u52A1\u5F00\u53D1/\u8DEF\u7531\u7BA1\u7406/\u8DEF\u7531\u7BA1\u7406-\u8DEF\u7531\u6CE8\u518C/\u8DEF\u7531\u6CE8\u518C-\u89C4\u8303\u8DEF\u7531/\u89C4\u8303\u8DEF\u7531-\u5982\u4F55\u4F7F\u7528.md","sourceDirName":"docs/WEB\u670D\u52A1\u5F00\u53D1/\u8DEF\u7531\u7BA1\u7406/\u8DEF\u7531\u7BA1\u7406-\u8DEF\u7531\u6CE8\u518C/\u8DEF\u7531\u6CE8\u518C-\u89C4\u8303\u8DEF\u7531","slug":"/docs/web/router-registering-strict-router-usage","permalink":"/en/docs/web/router-registering-strict-router-usage","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/WEB\u670D\u52A1\u5F00\u53D1/\u8DEF\u7531\u7BA1\u7406/\u8DEF\u7531\u7BA1\u7406-\u8DEF\u7531\u6CE8\u518C/\u8DEF\u7531\u6CE8\u518C-\u89C4\u8303\u8DEF\u7531/\u89C4\u8303\u8DEF\u7531-\u5982\u4F55\u4F7F\u7528.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732541616000,"sidebarPosition":1,"frontMatter":{"slug":"/docs/web/router-registering-strict-router-usage","title":"Standard Router - Usage","sidebar_position":1,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","Router Method Definition","Request Object","Response Object","Normalized Router","Bind Method","BindHandler","Data Validation","OpenAPIv3"],"description":"Define router methods, manage and register routers, and standardize request and response objects in the GoFrame framework. By using the grouped router\'s Bind method and the basic BindHandler method, we can effectively manage routers. It also includes how to validate input data and use a unified post-middleware for data processing."},"sidebar":"mainSidebar","previous":{"title":"Standard Router - Example","permalink":"/en/docs/web/router-registering-strict-router-example"},"next":{"title":"Standard Router - FAQ","permalink":"/en/docs/web/router-registering-strict-router-faq"}}'),i=r("785893"),d=r("250065");let o={slug:"/docs/web/router-registering-strict-router-usage",title:"Standard Router - Usage",sidebar_position:1,hide_title:!0,keywords:["GoFrame","GoFrame Framework","Router Method Definition","Request Object","Response Object","Normalized Router","Bind Method","BindHandler","Data Validation","OpenAPIv3"],description:"Define router methods, manage and register routers, and standardize request and response objects in the GoFrame framework. By using the grouped router's Bind method and the basic BindHandler method, we can effectively manage routers. It also includes how to validate input data and use a unified post-middleware for data processing."},a=void 0,s={},c=[{value:"Router Method Definition",id:"router-method-definition",level:2},{value:"Unified Router Registration",id:"unified-router-registration",level:2},{value:"<code>Group.Bind</code> Method",id:"groupbind-method",level:3},{value:"<code>BindHandler</code> Method",id:"bindhandler-method",level:3},{value:"Standardized Parameter Structure",id:"standardized-parameter-structure",level:2},{value:"Input Data Validation",id:"input-data-validation",level:2},{value:"Unified Return Middleware",id:"unified-return-middleware",level:2},{value:"Extended Introduction",id:"extended-introduction",level:2},{value:"<code>OpenAPIv3</code> Protocol",id:"openapiv3-protocol",level:3},{value:"<code>Request</code> Object in <code>Ctx</code>",id:"request-object-in-ctx",level:3}];function l(e){let t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"router-method-definition",children:"Router Method Definition"}),"\n",(0,i.jsx)(t.p,{children:"From the example above, we can see that the router method definition uses a fixed format:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:"func Handler(ctx context.Context, req *Request) (res *Response, err error)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Among them, both the input and output parameters are two, and they are all required without any omission. Briefly described as:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Parameter"}),(0,i.jsx)(t.th,{children:"Description"}),(0,i.jsx)(t.th,{children:"Note"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"ctx context.Context"})}),(0,i.jsx)(t.td,{children:"Context"}),(0,i.jsxs)(t.td,{children:["The ",(0,i.jsx)(t.code,{children:"Server"})," component will automatically fetch and pass it to the API method from the request."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"req *Request"})}),(0,i.jsx)(t.td,{children:"Request Object"}),(0,i.jsx)(t.td,{children:"Even if no parameters are received, it must be defined because the request structure not only contains the request parameter definition but also the request definition of the API."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"res *Response"})}),(0,i.jsx)(t.td,{children:"Response Object"}),(0,i.jsx)(t.td,{children:"Even if there are no return parameters, it must be defined because the return structure not only contains the return parameter definition but also can include the API return definition."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"err error"})}),(0,i.jsx)(t.td,{children:"Error Object"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"Server"})," uses this parameter to determine whether the API execution is successful or failed."]})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"unified-router-registration",children:"Unified Router Registration"}),"\n",(0,i.jsxs)(t.h3,{id:"groupbind-method",children:[(0,i.jsx)(t.code,{children:"Group.Bind"})," Method"]}),"\n",(0,i.jsxs)(t.p,{children:["We recommend using an object-oriented approach to manage all router methods and perform unified registration through the ",(0,i.jsx)(t.code,{children:"Bind"})," method of ",(0,i.jsx)(t.strong,{children:"grouped routers"}),". It should be noted that in a normalized routing manner, the routing address and request method will be defined through tags in the ",(0,i.jsx)(t.code,{children:"g.Meta"})," metadata object in the request structure. The grouped router can define all the routing prefixes under the group."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:r(567026).Z+"",width:"1792",height:"1035"})}),"\n",(0,i.jsxs)(t.h3,{id:"bindhandler-method",children:[(0,i.jsx)(t.code,{children:"BindHandler"})," Method"]}),"\n",(0,i.jsxs)(t.p,{children:["We can also register the normalized router through the basic ",(0,i.jsx)(t.code,{children:"BindHandler"})," method, but this method can only register one router function. Usage example:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'s := g.Server()\ns.BindHandler("/user/{uid}", func(ctx context.Context, req *SaveReq) (res *SaveRes, err error) {\n    // ...\n})\n'})}),"\n",(0,i.jsx)(t.h2,{id:"standardized-parameter-structure",children:"Standardized Parameter Structure"}),"\n",(0,i.jsx)(t.p,{children:"In normalized router registration, the definition of the request/response parameter structure is very important. This structure not only contains the input parameter definition but also includes the API definition, especially information such as routing address, request method, and API description. Maintaining parameter structures in a structured data approach facilitates richer API capability expansion, team API interaction, long-term API maintenance, and automated API documentation generation."}),"\n",(0,i.jsxs)(t.p,{children:["To ensure naming normalization, input data structures are named in the ",(0,i.jsx)(t.code,{children:"XxxReq"})," way, and output data structures are named in the ",(0,i.jsx)(t.code,{children:"XxxRes"})," way. Even when input or output parameters are null, the corresponding data structures need to be defined for future expansion and API information management. For a description of the tags involved in ",(0,i.jsx)(t.code,{children:"OpenAPIv3"})," in the structure, please refer to the subsequent chapters."]}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsx)(t.p,{children:"Request parameters are automatically converted to request data structures, and field mapping conversions are case insensitive and will automatically ignore special characters."})}),"\n",(0,i.jsx)(t.h4,{id:"",children:(0,i.jsx)(t.img,{src:r(228123).Z+"",width:"1792",height:"1035"})}),"\n",(0,i.jsx)(t.h2,{id:"input-data-validation",children:"Input Data Validation"}),"\n",(0,i.jsxs)(t.p,{children:["The request structure will be automatically validated before being executed by the ",(0,i.jsx)(t.code,{children:"API"})," API. If one of the rule validations fails, the subsequent validations will be terminated (using the ",(0,i.jsx)(t.code,{children:"bail"})," validation modification rule automatically). The validation function uses the unified validation component of the framework, please refer to: ",(0,i.jsx)(t.a,{href:"/en/docs/core/gvalid",children:"Data Validation"})]}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsxs)(t.p,{children:["Special attention should be paid: if there are multiple validation rules for parameter validation and there is a ",(0,i.jsx)(t.code,{children:"required*"})," rule in the rules, it is recommended to place the ",(0,i.jsx)(t.code,{children:"required*"})," validation rule before all rules. Otherwise, the feature of the ",(0,i.jsx)(t.code,{children:"bail"})," validation rule enabled in the built-in standardized router (terminate further validation upon failure) may cause subsequent ",(0,i.jsx)(t.code,{children:"required*"})," rules to be ineffective."]})}),"\n",(0,i.jsx)(t.h2,{id:"unified-return-middleware",children:"Unified Return Middleware"}),"\n",(0,i.jsxs)(t.p,{children:["The data return processing for the API requires setting up a ",(0,i.jsx)(t.strong,{children:"unified post-middleware"}),", and you can also use the data return middleware provided by ",(0,i.jsx)(t.code,{children:"Server"})," by default. When developers customize middleware, they can refer to the middleware ",(0,i.jsx)(t.code,{children:"MiddlewareHandlerResponse"})," provided by ",(0,i.jsx)(t.code,{children:"Server"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"By the way, here is an important method when customizing the return middleware:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:"// GetHandlerResponse retrieves and returns the handler response object and its error.\nfunc (r *Request) GetHandlerResponse() interface{}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["When executing via the post-middleware, use the ",(0,i.jsx)(t.code,{children:"GetHandlerResponse"})," method of the request object to get the result of the current business execution and handle it accordingly."]}),"\n",(0,i.jsx)(t.h2,{id:"extended-introduction",children:"Extended Introduction"}),"\n",(0,i.jsxs)(t.h3,{id:"openapiv3-protocol",children:[(0,i.jsx)(t.code,{children:"OpenAPIv3"})," Protocol"]}),"\n",(0,i.jsxs)(t.p,{children:["The API documentation automatically generated by the ",(0,i.jsx)(t.code,{children:"Server"})," component uses the latest ",(0,i.jsx)(t.code,{children:"OpenAPIv3"})," protocol. For more details, please refer to the chapter: ",(0,i.jsx)(t.a,{href:"/en/docs/web/api-document",children:"API Document"})]}),"\n",(0,i.jsxs)(t.h3,{id:"request-object-in-ctx",children:[(0,i.jsx)(t.code,{children:"Request"})," Object in ",(0,i.jsx)(t.code,{children:"Ctx"})]}),"\n",(0,i.jsxs)(t.p,{children:["We can get the ",(0,i.jsx)(t.code,{children:"Request"})," object from ",(0,i.jsx)(t.code,{children:"ctx"})," using the ",(0,i.jsx)(t.code,{children:"RequestFromCtx/g.RequestFromCtx"})," method."]}),"\n",(0,i.jsx)(t.p,{children:"Method definition:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:"func RequestFromCtx(ctx context.Context) *Request\n"})}),"\n",(0,i.jsx)(t.p,{children:"Usage example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'func (c *cHello) Hello(ctx context.Context, req *apiv1.HelloReq) (res *apiv1.HelloRes, err error) {\n    g.RequestFromCtx(ctx).Response.Writeln("Hello World!")\n    return\n}\n'})})]})}function u(e={}){let{wrapper:t}={...(0,d.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},228123:function(e,t,r){r.d(t,{Z:function(){return n}});let n=r.p+"assets/images/43ccaf0d2e204185da41deddc05246ff-79753e50647ce7f5027630d04d86b026.png"},567026:function(e,t,r){r.d(t,{Z:function(){return n}});let n=r.p+"assets/images/9ecfa0a73fc10e3810e7ff80ddbedc92-fcb511bb0d7b921a24514a0e8d742916.png"},250065:function(e,t,r){r.d(t,{Z:function(){return a},a:function(){return o}});var n=r(667294);let i={},d=n.createContext(i);function o(e){let t=n.useContext(d);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(d.Provider,{value:t},e.children)}}}]);