"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["51778"],{532312:function(e,r,n){n.r(r),n.d(r,{metadata:()=>t,contentTitle:()=>a,default:()=>h,assets:()=>c,toc:()=>d,frontMatter:()=>o});var t=JSON.parse('{"id":"course/starbook/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u6CE8\u518C/2.3.\u6CE8\u518C\u63A5\u53E3","title":"2.3 Registration API","description":"Developing a user registration API using the GoFrame framework, including steps for adding an API, writing the business logic layer, controller call logic, controller registration, and running the project. By generating data access objects and data models, the interface interacts with the database, and ultimately tests the interface\'s functionality during project execution.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/course/starbook/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u6CE8\u518C/2.3.\u6CE8\u518C\u63A5\u53E3.md","sourceDirName":"course/starbook/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u6CE8\u518C","slug":"/course/starbook/register-general","permalink":"/en/course/starbook/register-general","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/course/starbook/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u6CE8\u518C/2.3.\u6CE8\u518C\u63A5\u53E3.md","tags":[],"version":"current","lastUpdatedBy":"oldme","lastUpdatedAt":1735822233000,"frontMatter":{"title":"2.3 Registration API","hide_title":true,"slug":"/course/starbook/register-general","keywords":["GoFrame","User Registration API","Data Model","API Development","Business Logic Layer","HTTP Request","Code Generation","Controller Registration","Database Interaction","Project Execution"],"description":"Developing a user registration API using the GoFrame framework, including steps for adding an API, writing the business logic layer, controller call logic, controller registration, and running the project. By generating data access objects and data models, the interface interacts with the database, and ultimately tests the interface\'s functionality during project execution."},"sidebar":"courseStarBookSidebar","previous":{"title":"2.2 Data Model","permalink":"/en/course/starbook/register-model"},"next":{"title":"2.4 Business Optimization","permalink":"/en/course/starbook/register-optimization"}}'),s=n("785893"),i=n("250065");let o={title:"2.3 Registration API",hide_title:!0,slug:"/course/starbook/register-general",keywords:["GoFrame","User Registration API","Data Model","API Development","Business Logic Layer","HTTP Request","Code Generation","Controller Registration","Database Interaction","Project Execution"],description:"Developing a user registration API using the GoFrame framework, including steps for adding an API, writing the business logic layer, controller call logic, controller registration, and running the project. By generating data access objects and data models, the interface interacts with the database, and ultimately tests the interface's functionality during project execution."},a=void 0,c={},d=[{value:"Add API",id:"add-api",level:2},{value:"Write Logic",id:"write-logic",level:2},{value:"Controller Calls Logic",id:"controller-calls-logic",level:2},{value:"Register the Controller",id:"register-the-controller",level:2},{value:"Run the Project",id:"run-the-project",level:2}];function l(e){let r={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",hr:"hr",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.p,{children:'After preparing the data model, we can use our "three-step" rule to develop the user interface.'}),"\n",(0,s.jsx)(r.h2,{id:"add-api",children:"Add API"}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.em,{children:"api/users/v1/users.go"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'package v1\n\nimport "github.com/gogf/gf/v2/frame/g"\n\ntype RegisterReq struct {\n    g.Meta   `path:"users/register" method:"post"`\n    Username string `json:"username"`\n    Password string `json:"password"`\n    Email    string `json:"email"`\n}\n\ntype RegisterRes struct {\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["For better maintenance of the interface, a version number is usually added at the beginning of the interface address. ",(0,s.jsx)(r.code,{children:"GoFrame"})," recommends using multi-level directories to manage versions, and the version number of this interface is ",(0,s.jsx)(r.code,{children:"v1"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"RegisterReq"})," and ",(0,s.jsx)(r.code,{children:"RegisterRes"})," define the HTTP request object and response object respectively. ",(0,s.jsx)(r.code,{children:"g.Meta"})," is embedded into the request structure and defines general interface attributes through the ",(0,s.jsx)(r.code,{children:"Go Tag"})," method. This code means we have added a user registration interface, with the address ",(0,s.jsx)(r.code,{children:"/users/register"}),", request method ",(0,s.jsx)(r.code,{children:"POST"}),", and three request parameters: ",(0,s.jsx)(r.code,{children:"Username"}),", ",(0,s.jsx)(r.code,{children:"Password"}),", and ",(0,s.jsx)(r.code,{children:"Email"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["Execute the command to generate the ",(0,s.jsx)(r.code,{children:"Controller"})," corresponding to the API:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"$ gf gen ctrl\ngenerated: D:\\project\\star\\api\\users\\users.go\ngenerated: internal\\controller\\users\\users.go\ngenerated: internal\\controller\\users\\users_new.go\ngenerated: internal\\controller\\users\\users_v1_register.go\ndone!\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Among the four generated files, we only need to focus on ",(0,s.jsx)(r.code,{children:"users_v1_register.go"}),", which is used to receive HTTP requests and call ",(0,s.jsx)(r.code,{children:"Logic"})," to complete the business process."]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:["If you have installed the ",(0,s.jsx)(r.a,{href:"https://plugins.jetbrains.com/plugin/23324-goframe-helper",children:"GoFrame Helper"})," plugin, the ",(0,s.jsx)(r.code,{children:"gf gen ctrl"})," command will be executed automatically. You can also use the official automatic generation method: ",(0,s.jsx)(r.a,{href:"/en/docs/cli/gen-ctrl#automatic-mode-recommended",children:"Tutorial Configuration"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"write-logic",children:"Write Logic"}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Logic"})," is the business logic layer, stored in ",(0,s.jsx)(r.code,{children:"internal/logic"}),", which is called by the ",(0,s.jsx)(r.code,{children:"Controller"})," to implement specific business logic."]}),"\n",(0,s.jsx)(r.p,{children:"Define a 'Users' object:"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.em,{children:"internal/logic/users/users.go"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"package users  \n  \ntype Users struct {  \n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"Write registration methods:"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.em,{children:"internal/logic/users/register.go"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'package users\n\nimport (\n    "context"\n\n    "star/internal/dao"\n    "star/internal/model/do"\n)\n\nfunc (u *Users) Register(ctx context.Context, username, password, email string) error {\n    _, err := dao.Users.Ctx(ctx).Data(do.Users{\n        Username: username,\n        Password: password,\n        Email:    email,\n    }).Insert()\n    if err != nil {\n        return err\n    }\n    return nil\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"dao.Users"})," is the data access object generated earlier, used for interacting with the database. ",(0,s.jsx)(r.code,{children:"do.Users"})," is the generated data model used for data entry, and there is a similar data model ",(0,s.jsx)(r.code,{children:"entity.Users"})," used for data output."]}),"\n",(0,s.jsx)(r.h2,{id:"controller-calls-logic",children:"Controller Calls Logic"}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"Controller"})," layer is responsible for receiving ",(0,s.jsx)(r.code,{children:"Req"})," request objects and then calling one or more ",(0,s.jsx)(r.code,{children:"Logic"})," to complete the business logic. Some simple logic can also be directly handled in the ",(0,s.jsx)(r.code,{children:"Controller"}),". The results of the processing are wrapped in the agreed ",(0,s.jsx)(r.code,{children:"Res"})," data structure and returned. Here, the ",(0,s.jsx)(r.code,{children:"Res"})," data structure is empty, so returning ",(0,s.jsx)(r.code,{children:"nil"})," is sufficient."]}),"\n",(0,s.jsx)(r.p,{children:"Encapsulate the 'Users' object into the controller for easy subsequent calls."}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.em,{children:"internal/controller/users/users_new.go"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'...\n\npackage users  \n  \nimport (  \n    "star/api/users"  \n    usersL "star/internal/logic/users"  \n)  \n  \ntype ControllerV1 struct {  \n    users *usersL.Users  \n}  \n  \nfunc NewV1() users.IUsersV1 {  \n    return &ControllerV1{  \n       users: &usersL.Users{},  \n    }\n}\n'})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.em,{children:"internal/controller/users/users_v1_register.go"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'package users\n\nimport (\n    "context"\n\n    "star/internal/logic/users"\n\n    "star/api/users/v1"\n)\n\nfunc (c *ControllerV1) Register(ctx context.Context, req *v1.RegisterReq) (res *v1.RegisterRes, err error) {\n    err = c.users.Register(ctx, req.Username, req.Password, req.Email)\n    return nil, err\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"register-the-controller",children:"Register the Controller"}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)(r.p,{children:["All controllers must be registered in ",(0,s.jsx)(r.code,{children:"cmd"})," to be effective. The ",(0,s.jsx)(r.code,{children:"cmd"})," layer is responsible for guiding the program to start, with significant work including initializing logic, registering route objects, starting the ",(0,s.jsx)(r.code,{children:"server"})," to listen, and blocking the running program until the ",(0,s.jsx)(r.code,{children:"server"})," exits."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.em,{children:"internal/cmd/cmd.go"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'package cmd\n\n\xb7\xb7\xb7\n\nvar (\n    Main = gcmd.Command{\n        Name:  "main",\n        Usage: "main",\n        Brief: "start http server",\n        Func: func(ctx context.Context, parser *gcmd.Parser) (err error) {\n            s := g.Server()\n            s.Group("/", func(group *ghttp.RouterGroup) {\n                group.Middleware(ghttp.MiddlewareHandlerResponse)\n                group.Group("/v1", func(group *ghttp.RouterGroup) {\n                    group.Bind(\n                        users.NewV1(),\n                    )\n                })\n            })\n            s.Run()\n            return nil\n        },\n    }\n)\n'})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"group.Group"})," is a method for grouped route registration provided by the framework, and it is the recommended registration method by the framework. We prefix with ",(0,s.jsx)(r.code,{children:"v1"})," corresponding to the ",(0,s.jsx)(r.code,{children:"api"})," directory to facilitate interface version management."]}),"\n",(0,s.jsx)(r.h2,{id:"run-the-project",children:"Run the Project"}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"$ gf run main.go\nbuild: .\\main.go\ngo build -o .\\main.exe  .\\main.go\n.\\main.exe \nbuild running pid: 8648\n2024-11-08 10:36:48.013 [INFO] pid[8648]: http server started listening on [:8000]\n2024-11-08 10:36:48.013 [INFO] {e05c16b565dd0518360ebe639e1c623d} swagger ui is serving at address: http://127.0.0.1:8000/swagger/\n2024-11-08 10:36:48.014 [INFO] {e05c16b565dd0518360ebe639e1c623d} openapi specification is serving at address: http://127.0.0.1:8000/api.json\n\n  ADDRESS | METHOD |       ROUTE        |                         HANDLER                         |           MIDDLEWARE\n----------|--------|--------------------|---------------------------------------------------------|----------------------------------\n  :8000   | ALL    | /api.json          | github.com/gogf/gf/v2/net/ghttp.(*Server).openapiSpec   |\n----------|--------|--------------------|---------------------------------------------------------|----------------------------------\n  :8000   | ALL    | /swagger/*         | github.com/gogf/gf/v2/net/ghttp.(*Server).swaggerUI     | HOOK_BEFORE_SERVE\n----------|--------|--------------------|---------------------------------------------------------|----------------------------------\n  :8000   | POST   | /v1/users/register | star/internal/controller/users.(*ControllerV1).Register | ghttp.MiddlewareHandlerResponse\n----------|--------|--------------------|---------------------------------------------------------|----------------------------------\n"})}),"\n",(0,s.jsxs)(r.p,{children:["The result of running prints out three interface addresses. ",(0,s.jsx)(r.code,{children:"/swagger"})," and ",(0,s.jsx)(r.code,{children:"/api.json"})," are interface document addresses generated by the framework, which we will explain in detail in ",(0,s.jsx)(r.a,{href:"/en/course/starbook/register-api-doc",children:"2.5 API Documentation"}),". The other address ",(0,s.jsx)(r.code,{children:"/v1/users/register"})," is the user registration interface we developed. Send a ",(0,s.jsx)(r.code,{children:"POST"})," request to test it."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:'$ curl -X POST http://127.0.0.1:8000/v1/users/register -H "Content-Type: application/json" -d "{\\"username\\":\\"oldme\\", \\"password\\":\\"123456\\", \\"email\\":\\"tyyn1022@gmail.com\\"}"\n\n{\n    "code":0,\n    "message":"",\n    "data":null\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["A ",(0,s.jsx)(r.code,{children:"code"})," of ",(0,s.jsx)(r.code,{children:"0"})," indicates success. Check the database to see if a record has been inserted:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sql",children:"SELECT * FROM users;\n"})}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"ID"}),(0,s.jsx)(r.th,{children:"Username"}),(0,s.jsx)(r.th,{children:"Password"}),(0,s.jsx)(r.th,{children:"Email"}),(0,s.jsx)(r.th,{children:"Created_At"}),(0,s.jsx)(r.th,{children:"Updated_At"})]})}),(0,s.jsx)(r.tbody,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"1"}),(0,s.jsx)(r.td,{children:"oldme"}),(0,s.jsx)(r.td,{children:"123456"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"mailto:tyyn1022@gmail.com",children:"tyyn1022@gmail.com"})}),(0,s.jsx)(r.td,{children:"2024-11-08 10:36:48"}),(0,s.jsx)(r.td,{children:"2024-11-08 10:36:48"})]})})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Created_At"})," and ",(0,s.jsx)(r.code,{children:"Updated_At"})," are two convention fields that will be automatically maintained by the ",(0,s.jsx)(r.code,{children:"ORM"}),", representing the creation time and modification time respectively."]})]})}function h(e={}){let{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},250065:function(e,r,n){n.d(r,{Z:function(){return a},a:function(){return o}});var t=n(667294);let s={},i=t.createContext(s);function o(e){let r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);