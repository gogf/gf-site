"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["31448"],{86672:function(e,t,r){r.r(t),r.d(t,{metadata:()=>i,contentTitle:()=>o,default:()=>h,assets:()=>a,toc:()=>c,frontMatter:()=>d});var i=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u63A5\u53E3\u5F00\u53D1/ORM\u63A5\u53E3\u5F00\u53D1-\u9A71\u52A8\u5F00\u53D1","title":"ORM Interface - Driver","description":"ORM interface development in the GoFrame framework, specifically for database driver development and registration. By implementing the interface of the gdb module, you can add third-party database drivers not supported by GoFrame by default or customize existing drivers, ensuring consistency in upper-layer business operations. This document provides detailed steps and sample code to help developers get started quickly.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u63A5\u53E3\u5F00\u53D1/ORM\u63A5\u53E3\u5F00\u53D1-\u9A71\u52A8\u5F00\u53D1.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u63A5\u53E3\u5F00\u53D1","slug":"/docs/core/gdb-interface-driver","permalink":"/en/docs/core/gdb-interface-driver","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u5E93ORM/ORM\u63A5\u53E3\u5F00\u53D1/ORM\u63A5\u53E3\u5F00\u53D1-\u9A71\u52A8\u5F00\u53D1.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":1,"frontMatter":{"slug":"/docs/core/gdb-interface-driver","title":"ORM Interface - Driver","sidebar_position":1,"hide_title":true,"keywords":["GoFrame","GoFrame framework","database driver","custom driver","interface development","driver development","database component","gdb module","Driver interface","ORM"],"description":"ORM interface development in the GoFrame framework, specifically for database driver development and registration. By implementing the interface of the gdb module, you can add third-party database drivers not supported by GoFrame by default or customize existing drivers, ensuring consistency in upper-layer business operations. This document provides detailed steps and sample code to help developers get started quickly."},"sidebar":"mainSidebar","previous":{"title":"ORM Interface - Callback","permalink":"/en/docs/core/gdb-interface-callback"},"next":{"title":"ORM - Context","permalink":"/en/docs/core/gdb-context"}}'),n=r("785893"),s=r("250065");let d={slug:"/docs/core/gdb-interface-driver",title:"ORM Interface - Driver",sidebar_position:1,hide_title:!0,keywords:["GoFrame","GoFrame framework","database driver","custom driver","interface development","driver development","database component","gdb module","Driver interface","ORM"],description:"ORM interface development in the GoFrame framework, specifically for database driver development and registration. By implementing the interface of the gdb module, you can add third-party database drivers not supported by GoFrame by default or customize existing drivers, ensuring consistency in upper-layer business operations. This document provides detailed steps and sample code to help developers get started quickly."},o=void 0,a={},c=[{value:"Driver Registration",id:"driver-registration",level:2},{value:"Driver Implementation",id:"driver-implementation",level:2},{value:"Considerations",id:"considerations",level:2}];function l(e){let t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"The significance of the framework's database component driver is that the various methods of upper-layer business operations with the database do not change, and you can switch to a new database by simply modifying the database type in the configuration."}),"\n",(0,n.jsx)(t.p,{children:"We can achieve the design of interfaces in the database component to add third-party database drivers not supported by the framework by default or customize existing drivers. The development of a driver is not about fully developing a database protocol implementation code, but rather using an existing third-party database driver and integrating it with the framework's database component by implementing its interface, ensuring consistency in upper-layer operations."}),"\n",(0,n.jsx)(t.h2,{id:"driver-registration",children:"Driver Registration"}),"\n",(0,n.jsxs)(t.p,{children:["We previously mentioned the ",(0,n.jsx)(t.code,{children:"Driver"})," interface. After implementing this interface, we can register a custom driver to the ",(0,n.jsx)(t.code,{children:"gdb"})," module through the following method:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:"// Register registers custom database driver to gdb.\nfunc Register(name string, driver Driver) error\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The driver name ",(0,n.jsx)(t.code,{children:"name"})," can be an existing driver name, such as ",(0,n.jsx)(t.code,{children:"mysql"}),", ",(0,n.jsx)(t.code,{children:"mssql"}),", ",(0,n.jsx)(t.code,{children:"pgsql"}),", etc. When a driver with the same name is registered, the new driver will overwrite the old one."]}),"\n",(0,n.jsx)(t.h2,{id:"driver-implementation",children:"Driver Implementation"}),"\n",(0,n.jsxs)(t.p,{children:["Developing a custom driver and registering it to the ",(0,n.jsx)(t.code,{children:"gdb"})," module is very simple. You can refer to the database type code examples already connected in the ",(0,n.jsx)(t.code,{children:"gdb"})," module source code: ",(0,n.jsx)(t.a,{href:"https://github.com/gogf/gf/tree/master/contrib/drivers",children:"https://github.com/gogf/gf/tree/master/contrib/drivers"})]}),"\n",(0,n.jsxs)(t.p,{children:["It should be noted that the most common way to develop or modify a driver is to directly inherit from the existing ",(0,n.jsx)(t.code,{children:"*Core"})," type, as the ",(0,n.jsx)(t.code,{children:"Driver"})," interface will pass this type of object, for example:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:"// DriverMysql is the driver for mysql database.\ntype DriverMysql struct {\n    *Core\n}\n\n// New creates and returns a database object for mysql.\n// It implements the interface of gdb.Driver for extra database driver installation.\nfunc (d *DriverMysql) New(core *Core, node *ConfigNode) (DB, error) {\n    return &DriverMysql{\n        Core: core,\n    }, nil\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"considerations",children:"Considerations"}),"\n",(0,n.jsx)(t.p,{children:"A new driver should at least implement the following interface methods:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Interface Method"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Open"})}),(0,n.jsx)(t.td,{children:"Used to create a database connection."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"GetChars"})}),(0,n.jsx)(t.td,{children:"Used to get the safety/escape symbols of the database."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Tables"})}),(0,n.jsx)(t.td,{children:"Returns the list of tables in the current/specified database."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"TableFields"})}),(0,n.jsx)(t.td,{children:"Returns field list information for the specified table."})]})]})]})]})}function h(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},250065:function(e,t,r){r.d(t,{Z:function(){return o},a:function(){return d}});var i=r(667294);let n={},s=i.createContext(n);function d(e){let t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);