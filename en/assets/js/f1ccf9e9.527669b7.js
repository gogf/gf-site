"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["33922"],{388654:function(e,n,i){i.r(n),i.d(n,{metadata:()=>t,contentTitle:()=>a,default:()=>h,assets:()=>d,toc:()=>c,frontMatter:()=>s});var t=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u73AF\u5883\u53D8\u91CF-genv","title":"Environment","description":"The genv environment variable management component in the GoFrame framework, including how to batch set environment variables and how to obtain environment variables through command-line options. When an environment variable does not exist, it supports reading from command-line options. Additionally, it covers adding, deleting, and naming conversion rules for environment variables.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u73AF\u5883\u53D8\u91CF-genv.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173","slug":"/docs/components/os-genv","permalink":"/en/docs/components/os-genv","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u73AF\u5883\u53D8\u91CF-genv.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":12,"frontMatter":{"slug":"/docs/components/os-genv","title":"Environment","sidebar_position":12,"hide_title":true,"keywords":["GoFrame","Environment Variable Management","genv","SetMap","GetWithCmd","GoFrame Framework","Environment Variable Setting","Command Line Options","Delete Environment Variables","Batch Setting of Environment Variables"],"description":"The genv environment variable management component in the GoFrame framework, including how to batch set environment variables and how to obtain environment variables through command-line options. When an environment variable does not exist, it supports reading from command-line options. Additionally, it covers adding, deleting, and naming conversion rules for environment variables."},"sidebar":"mainSidebar","previous":{"title":"Configuration","permalink":"/en/docs/components/os-gcfg"},"next":{"title":"File Watching","permalink":"/en/docs/components/os-gfsnotify"}}'),o=i("785893"),r=i("250065");let s={slug:"/docs/components/os-genv",title:"Environment",sidebar_position:12,hide_title:!0,keywords:["GoFrame","Environment Variable Management","genv","SetMap","GetWithCmd","GoFrame Framework","Environment Variable Setting","Command Line Options","Delete Environment Variables","Batch Setting of Environment Variables"],description:"The genv environment variable management component in the GoFrame framework, including how to batch set environment variables and how to obtain environment variables through command-line options. When an environment variable does not exist, it supports reading from command-line options. Additionally, it covers adding, deleting, and naming conversion rules for environment variables."},a=void 0,d={},c=[{value:"<code>SetMap</code>",id:"setmap",level:2},{value:"<code>GetWithCmd</code>",id:"getwithcmd",level:2},{value:"<code>All</code>",id:"all",level:2},{value:"<code>Map</code>",id:"map",level:2},{value:"<code>Get</code>",id:"get",level:2},{value:"<code>Set</code>",id:"set",level:2},{value:"<code>SetMap</code>",id:"setmap-1",level:2},{value:"<code>Contains</code>",id:"contains",level:2},{value:"<code>Remove</code>",id:"remove",level:2},{value:"<code>Build</code>",id:"build",level:2}];function l(e){let n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Environment variable management component."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Usage"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'import "github.com/gogf/gf/v2/os/genv"\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"API Documentation"}),":"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/os/genv",children:"https://pkg.go.dev/github.com/gogf/gf/v2/os/genv"})}),"\n",(0,o.jsx)(n.h2,{id:"setmap",children:(0,o.jsx)(n.code,{children:"SetMap"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func SetMap(m map[string]string) error\n"})}),"\n",(0,o.jsx)(n.p,{children:"This method is used for batch setting of environment variables. Usage example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'genv.SetMap(g.MapStrStr{\n    "APPID":     "order",\n    "THREAD":    "16",\n    "ENDPOINTS": "127.0.0.1:6379",\n})\n'})}),"\n",(0,o.jsx)(n.h2,{id:"getwithcmd",children:(0,o.jsx)(n.code,{children:"GetWithCmd"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func GetWithCmd(key string, def ...interface{}) *gvar.Var\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This method is used to get the specified option value in the environment variable. If the environment variable does not exist, it will read from the command-line option. However, the naming rules for both will be different. For example: ",(0,o.jsx)(n.code,{children:'genv.GetWithCmd("gf.debug")'})," will first try to read the value of the ",(0,o.jsx)(n.code,{children:"GF_DEBUG"})," environment variable, and if it does not exist, it will go to the ",(0,o.jsx)(n.code,{children:"gf.debug"})," option in the command line."]}),"\n",(0,o.jsx)(n.p,{children:"Note the naming conversion rules:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Environment variables convert names to uppercase and ",(0,o.jsx)(n.code,{children:"."})," characters to ",(0,o.jsx)(n.code,{children:"_"})," characters."]}),"\n",(0,o.jsxs)(n.li,{children:["In the command line, names are converted to lowercase and ",(0,o.jsx)(n.code,{children:"_"})," characters to ",(0,o.jsx)(n.code,{children:"."})," characters."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"all",children:(0,o.jsx)(n.code,{children:"All"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func All() []string\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This method returns the string in the environment variable and returns it in the form of ",(0,o.jsx)(n.code,{children:"key=value"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"map",children:(0,o.jsx)(n.code,{children:"Map"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func Map() map[string]string\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This method returns the string in the environment variable and returns it in the form of ",(0,o.jsx)(n.code,{children:"map"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"get",children:(0,o.jsx)(n.code,{children:"Get"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func Get(key string, def ...interface{}) *gvar.Var\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This method is used to create a generic type environment variable. If the given ",(0,o.jsx)(n.code,{children:"key"})," does not exist, it returns a default generic type environment variable."]}),"\n",(0,o.jsx)(n.h2,{id:"set",children:(0,o.jsx)(n.code,{children:"Set"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func Set(key, value string) error\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This method sets environment variables with the given ",(0,o.jsx)(n.code,{children:"key"})," and ",(0,o.jsx)(n.code,{children:"value"}),", and returns an ",(0,o.jsx)(n.code,{children:"Error"})," type if there is an error."]}),"\n",(0,o.jsx)(n.h2,{id:"setmap-1",children:(0,o.jsx)(n.code,{children:"SetMap"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func SetMap(m map[string]string) error\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This method stores environment variables through a parameter of type ",(0,o.jsx)(n.code,{children:"map"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"contains",children:(0,o.jsx)(n.code,{children:"Contains"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func Contains(key string) bool\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This method checks whether the ",(0,o.jsx)(n.code,{children:"key"})," exists in the environment variable."]}),"\n",(0,o.jsx)(n.h2,{id:"remove",children:(0,o.jsx)(n.code,{children:"Remove"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func Remove(key ...string) error\n"})}),"\n",(0,o.jsx)(n.p,{children:"This method can delete one or more environment variables."}),"\n",(0,o.jsx)(n.h2,{id:"build",children:(0,o.jsx)(n.code,{children:"Build"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"func Build(m map[string]string) []string\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This method constructs and returns the ",(0,o.jsx)(n.code,{children:"map"})," parameter in the form of an array."]})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},250065:function(e,n,i){i.d(n,{Z:function(){return a},a:function(){return s}});var t=i(667294);let o={},r=t.createContext(o);function s(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);