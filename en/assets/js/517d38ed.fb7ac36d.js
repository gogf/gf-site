"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["32676"],{461690:function(e,n,r){r.r(n),r.d(n,{metadata:()=>i,contentTitle:()=>a,default:()=>u,assets:()=>c,toc:()=>l,frontMatter:()=>s});var i=JSON.parse('{"id":"course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1/2.1.\u524D\u7F6E\u51C6\u5907","title":"2.1 Prerequisites","description":"This section covers the prerequisites for the user service, including service initialization using GoFrame CLI, database configuration, and project structure setup.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1/2.1.\u524D\u7F6E\u51C6\u5907.md","sourceDirName":"course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1","slug":"/course/proxima-book/user-overview","permalink":"/en/course/proxima-book/user-overview","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/course/proxima-book/\u7B2C\u4E8C\u7AE0-\u7528\u6237\u670D\u52A1/2.1.\u524D\u7F6E\u51C6\u5907.md","tags":[],"version":"current","lastUpdatedBy":"oldme","lastUpdatedAt":1734398801000,"frontMatter":{"title":"2.1 Prerequisites","hide_title":true,"slug":"/course/proxima-book/user-overview","keywords":["GoFrame","microservice setup","user service initialization","database configuration","project structure","service preparation"],"description":"This section covers the prerequisites for the user service, including service initialization using GoFrame CLI, database configuration, and project structure setup."},"sidebar":"courseProximaBookSidebar","previous":{"title":"Chapter 2 - User Service","permalink":"/en/course/proxima-book/user"},"next":{"title":"2.2 Business Logic","permalink":"/en/course/proxima-book/user-logic"}}'),t=r("785893"),o=r("250065");let s={title:"2.1 Prerequisites",hide_title:!0,slug:"/course/proxima-book/user-overview",keywords:["GoFrame","microservice setup","user service initialization","database configuration","project structure","service preparation"],description:"This section covers the prerequisites for the user service, including service initialization using GoFrame CLI, database configuration, and project structure setup."},a=void 0,c={},l=[{value:"Code Initialization",id:"code-initialization",level:2},{value:"Database Setup",id:"database-setup",level:2},{value:"Creating Tables",id:"creating-tables",level:3},{value:"Generating DAO Models",id:"generating-dao-models",level:3},{value:"Generating Protocol Buffer Entity Models",id:"generating-protocol-buffer-entity-models",level:3},{value:"Differences Between <code>gen dao</code> and <code>gen pbentity</code>",id:"differences-between-gen-dao-and-gen-pbentity",level:3}];function d(e){let n={blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Most aspects of microservice development are similar to monolithic services, and in many cases, even simpler. This chapter covers some basic preparations that should be familiar to everyone."}),"\n",(0,t.jsx)(n.h2,{id:"code-initialization",children:"Code Initialization"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["GoFrame provides a command for initializing microservice repositories. Execute the following command to create a service named ",(0,t.jsx)(n.code,{children:"user"})," in the ",(0,t.jsx)(n.code,{children:"app"})," directory."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'$ gf init app/user -a\ninitializing...\ninitialization done! \nyou can now run "cd app/user && gf run main.go" to start your journey, enjoy!\n'})}),"\n",(0,t.jsxs)(n.p,{children:["After successful initialization, a microservice will be created in the ",(0,t.jsx)(n.code,{children:"app"})," directory. It's similar to a monolithic service, except that it lacks the ",(0,t.jsx)(n.code,{children:"go.mod"})," and ",(0,t.jsx)(n.code,{children:"go.sum"})," files."]}),"\n",(0,t.jsx)(n.p,{children:"Delete the following files to start with a clean environment:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"app/user/api/*\napp/user/internal/controller/*\napp/user/internal/cmd/cmd.go\n"})}),"\n",(0,t.jsx)(n.p,{children:"After completing these steps, enter the microservice repository to begin development."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ cd app/user\n"})}),"\n",(0,t.jsx)(n.h2,{id:"database-setup",children:"Database Setup"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"creating-tables",children:"Creating Tables"}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.code,{children:"user"})," database, execute the following SQL statement to create a table for storing user data:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE users (\n  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password CHAR(32) NOT NULL,\n  email VARCHAR(100),\n  created_at DATETIME,\n  updated_at DATETIME\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"generating-dao-models",children:"Generating DAO Models"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"app/user/hack/config.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'gfcli:  \n  gen:  \n    dao:  \n      - link: "mysql:root:12345678@tcp(srv.com:3306)/user"  \n        descriptionTag: true\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ gf gen dao\ngenerated: D:\\project\\proxima\\app\\user\\internal\\dao\\users.go\ngenerated: D:\\project\\proxima\\app\\user\\internal\\dao\\internal\\users.go\ngenerated: D:\\project\\proxima\\app\\user\\internal\\model\\do\\users.go\ngenerated: D:\\project\\proxima\\app\\user\\internal\\model\\entity\\users.go\ndone!\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: Execute the ",(0,t.jsx)(n.code,{children:"gf gen dao"})," command in the microservice repository (i.e., the ",(0,t.jsx)(n.code,{children:"app/user"})," directory). Be careful not to get this wrong. Similar rules apply to other related operations."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"generating-protocol-buffer-entity-models",children:"Generating Protocol Buffer Entity Models"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"app/user/hack/config.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'gfcli:\n  gen:  \n    dao:  \n      - link: "mysql:root:12345678@tcp(srv.com:3306)/user"  \n        descriptionTag: true  \n  \n    pbentity:  \n      - link: "mysql:root:12345678@tcp(srv.com:3306)/user"\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ gf gen pbentity\ngenerated: D:\\project\\proxima\\app\\user\\manifest\\protobuf\\pbentity\\users.proto\ndone!\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"differences-between-gen-dao-and-gen-pbentity",children:["Differences Between ",(0,t.jsx)(n.code,{children:"gen dao"})," and ",(0,t.jsx)(n.code,{children:"gen pbentity"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"gen dao"})," generates Go files primarily used within the microservice, such as for ORM operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"gen pbentity"})," generates Protocol Buffer files mainly used for gRPC communication between microservices"]}),"\n"]})]})}function u(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return a},a:function(){return s}});var i=r(667294);let t={},o=i.createContext(t);function s(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);