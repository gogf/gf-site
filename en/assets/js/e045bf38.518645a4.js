"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["50427"],{569195:function(e,n,l){l.r(n),l.d(n,{metadata:()=>i,contentTitle:()=>a,default:()=>h,assets:()=>d,toc:()=>o,frontMatter:()=>t});var i=JSON.parse('{"id":"examples/httpserver/upload-file/upload-file","title":"File Upload Example","description":"Handle file uploads in a HTTP server using GoFrame framework","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/examples/httpserver/upload-file/upload-file.md","sourceDirName":"examples/httpserver/upload-file","slug":"/examples/httpserver/upload-file","permalink":"/en/examples/httpserver/upload-file","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/examples/httpserver/upload-file/upload-file.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1740107000000,"frontMatter":{"title":"File Upload Example","slug":"/examples/httpserver/upload-file","keywords":["http","server","file","upload","goframe"],"description":"Handle file uploads in a HTTP server using GoFrame framework","hide_title":true},"sidebar":"examplesSidebar","previous":{"title":"Response with JSON Array","permalink":"/en/examples/httpserver/response-json-array"},"next":{"title":"WebSocket","permalink":"/en/examples/httpserver/websocket"}}'),r=l("785893"),s=l("250065");let t={title:"File Upload Example",slug:"/examples/httpserver/upload-file",keywords:["http","server","file","upload","goframe"],description:"Handle file uploads in a HTTP server using GoFrame framework",hide_title:!0},a="HTTP Server File Upload",d={},o=[{value:"Description",id:"description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Structure",id:"structure",level:2},{value:"Features",id:"features",level:2},{value:"Usage",id:"usage",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Notes",id:"notes",level:2}];function c(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"http-server-file-upload",children:"HTTP Server File Upload"})}),"\n",(0,r.jsxs)(n.p,{children:["Github Source: ",(0,r.jsx)(n.a,{href:"https://github.com/gogf/examples/tree/main/httpserver/upload-file",children:"https://github.com/gogf/examples/tree/main/httpserver/upload-file"})]}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["This example demonstrates how to implement file upload functionality in a HTTP server using ",(0,r.jsx)(n.code,{children:"GoFrame"}),". It showcases:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A modern and user-friendly file upload interface"}),"\n",(0,r.jsx)(n.li,{children:"Server-side file upload handling"}),"\n",(0,r.jsx)(n.li,{children:"Progress tracking for file uploads"}),"\n",(0,r.jsx)(n.li,{children:"Proper error handling and validation"}),"\n",(0,r.jsx)(n.li,{children:"Maximum file size configuration"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The example provides both a REST API endpoint and a web interface for file uploads."}),"\n",(0,r.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://golang.org/dl/",children:"Go"})," ",(0,r.jsx)(n.code,{children:"1.22"})," or higher"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://git-scm.com/downloads",children:"Git"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://goframe.org",children:"GoFrame"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"structure",children:"Structure"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"go.mod"}),": The Go module file for dependency management."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"go.sum"}),": The Go module checksum file."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"main.go"}),": The main application entry point that implements the file upload server."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"static/"}),": Directory containing static web files","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"index.html"}),": A modern web interface for file uploads with progress tracking."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The project is organized as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"upload-file/\n\u251C\u2500\u2500 go.mod           # Go module definition\n\u251C\u2500\u2500 go.sum           # Go module checksums\n\u251C\u2500\u2500 main.go          # Server implementation\n\u2514\u2500\u2500 static/          # Static web assets\n    \u2514\u2500\u2500 index.html   # Upload interface\n"})}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Modern web interface for file uploads"}),"\n",(0,r.jsx)(n.li,{children:"Progress bar for upload tracking"}),"\n",(0,r.jsx)(n.li,{children:"Support for large file uploads (up to 600MB)"}),"\n",(0,r.jsx)(n.li,{children:"File validation and error handling"}),"\n",(0,r.jsx)(n.li,{children:"Optional message attachment with uploads"}),"\n",(0,r.jsx)(n.li,{children:"Access log enabled for debugging"}),"\n",(0,r.jsx)(n.li,{children:"Clean API documentation"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Run the example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"go run main.go\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The server will start at ",(0,r.jsx)(n.a,{href:"http://127.0.0.1:8199",children:"http://127.0.0.1:8199"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Access the upload interface:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Web Interface: ",(0,r.jsx)(n.a,{href:"http://127.0.0.1:8199/",children:"http://127.0.0.1:8199/"})]}),"\n",(0,r.jsxs)(n.li,{children:["API Endpoint: POST ",(0,r.jsx)(n.a,{href:"http://127.0.0.1:8199/upload",children:"http://127.0.0.1:8199/upload"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Upload files using either:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'The web interface by selecting a file and clicking "Upload"'}),"\n",(0,r.jsxs)(n.li,{children:["Using curl:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://127.0.0.1:8199/upload \\\n     -F "file=@/path/to/your/file" \\\n     -F "msg=Optional message"\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,r.jsx)(n.p,{children:"The example implements several key features:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"A modern HTML/CSS/JS frontend for file uploads"}),"\n",(0,r.jsx)(n.li,{children:"Server-side file handling using GoFrame's features"}),"\n",(0,r.jsx)(n.li,{children:"Progress tracking for large file uploads"}),"\n",(0,r.jsx)(n.li,{children:"Proper error handling and validation"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Key components:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Maximum file size limit of 600MB"}),"\n",(0,r.jsx)(n.li,{children:"Access logging for debugging"}),"\n",(0,r.jsx)(n.li,{children:"Clean separation of frontend and backend code"}),"\n",(0,r.jsx)(n.li,{children:"Type-safe request/response structures"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The maximum file size is set to 600MB"}),"\n",(0,r.jsx)(n.li,{children:"Access logs are enabled for debugging"}),"\n",(0,r.jsx)(n.li,{children:"The server supports multipart/form-data uploads"}),"\n",(0,r.jsx)(n.li,{children:"Frontend provides visual feedback during uploads"}),"\n",(0,r.jsx)(n.li,{children:"All uploads are validated server-side"}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},250065:function(e,n,l){l.d(n,{Z:function(){return a},a:function(){return t}});var i=l(667294);let r={},s=i.createContext(r);function t(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);