"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["62289"],{119502:function(e,n,a){a.r(n),a.d(n,{metadata:()=>o,contentTitle:()=>i,default:()=>l,assets:()=>s,toc:()=>m,frontMatter:()=>r});var o=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u547D\u4EE4\u7BA1\u7406/\u547D\u4EE4\u7BA1\u7406-\u547D\u4EE4\u884C\u5BF9\u8C61","title":"Command - Object","description":"Manage command line objects and commands using the gcmd library in the GoFrame framework, covering the definition of Command object, the use of callback methods, and hierarchical management of commands. It also provides examples of starting HTTP and gRPC services via command line within the GoFrame framework, demonstrating how to add subcommands to commands and automatically generate help information.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u547D\u4EE4\u7BA1\u7406/\u547D\u4EE4\u7BA1\u7406-\u547D\u4EE4\u884C\u5BF9\u8C61.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u547D\u4EE4\u7BA1\u7406","slug":"/docs/core/gcmd-command","permalink":"/en/docs/core/gcmd-command","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u547D\u4EE4\u7BA1\u7406/\u547D\u4EE4\u7BA1\u7406-\u547D\u4EE4\u884C\u5BF9\u8C61.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":3,"frontMatter":{"slug":"/docs/core/gcmd-command","title":"Command - Object","sidebar_position":3,"hide_title":true,"keywords":["GoFrame","command line management","gcmd","Command object","callback methods","Parser parsing","start command","hierarchical command","subcommand","help information"],"description":"Manage command line objects and commands using the gcmd library in the GoFrame framework, covering the definition of Command object, the use of callback methods, and hierarchical management of commands. It also provides examples of starting HTTP and gRPC services via command line within the GoFrame framework, demonstrating how to add subcommands to commands and automatically generate help information."},"sidebar":"mainSidebar","previous":{"title":"Command - Args Parsing","permalink":"/en/docs/core/gcmd-parser"},"next":{"title":"Command - Structure","permalink":"/en/docs/core/gcmd-struct"}}'),t=a("785893"),c=a("250065");let r={slug:"/docs/core/gcmd-command",title:"Command - Object",sidebar_position:3,hide_title:!0,keywords:["GoFrame","command line management","gcmd","Command object","callback methods","Parser parsing","start command","hierarchical command","subcommand","help information"],description:"Manage command line objects and commands using the gcmd library in the GoFrame framework, covering the definition of Command object, the use of callback methods, and hierarchical management of commands. It also provides examples of starting HTTP and gRPC services via command line within the GoFrame framework, demonstrating how to add subcommands to commands and automatically generate help information."},i=void 0,s={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Callback Methods",id:"callback-methods",level:2},{value:"<code>Func</code> Callback",id:"func-callback",level:2},{value:"Help Information Generation",id:"help-information-generation",level:2},{value:"Hierarchical Command Management",id:"hierarchical-command-management",level:2},{value:"Parent Commands and Subcommands",id:"parent-commands-and-subcommands",level:3},{value:"Hierarchical Command Usage Example",id:"hierarchical-command-usage-example",level:3}];function d(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["In most scenarios, we manage single or multiple commands using the ",(0,t.jsx)(n.code,{children:"Command"})," command line object, and the default command line parsing rules (without explicitly using the ",(0,t.jsx)(n.code,{children:"Parser"})," parser) are sufficient. The ",(0,t.jsx)(n.code,{children:"Command"})," object is defined as follows:"]}),"\n",(0,t.jsxs)(n.p,{children:["For detailed information, refer to the interface documentation: ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/os/gcmd@master#Command",children:"https://pkg.go.dev/github.com/gogf/gf/v2/os/gcmd@master#Command"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"// Command holds the info about an argument that can handle custom logic.\ntype Command struct {\n    Name          string        // Command name(case-sensitive).\n    Usage         string        // A brief line description about its usage, eg: gf build main.go [OPTION]\n    Brief         string        // A brief info that describes what this command will do.\n    Description   string        // A detailed description.\n    Arguments     []Argument    // Argument array, configuring how this command act.\n    Func          Function      // Custom function.\n    FuncWithValue FuncWithValue // Custom function with output parameters that can interact with command caller.\n    HelpFunc      Function      // Custom help function\n    Examples      string        // Usage examples.\n    Additional    string        // Additional info about this command, which will be appended to the end of help info.\n    Strict        bool          // Strict parsing options, which means it returns error if invalid option given.\n    Config        string        // Config node name, which also retrieves the values from config component along with command line.\n    parent        *Command      // Parent command for internal usage.\n    commands      []*Command    // Sub commands of this command.\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"As each object has detailed comments, we will not elaborate further here."}),"\n",(0,t.jsx)(n.h2,{id:"callback-methods",children:"Callback Methods"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Command"})," object supports ",(0,t.jsx)(n.code,{children:"3"})," callback methods:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Func"}),": We usually customize this callback method to implement the command execution operation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FuncWithValue"}),": Method similar to ",(0,t.jsx)(n.code,{children:"Func"}),", but supports return values, often used in scenarios where command lines call each other. Typically not needed in general projects."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"HelpFunc"}),": Custom help information. Generally unnecessary, as the ",(0,t.jsx)(n.code,{children:"Command"})," object can automatically generate help information."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["We focus mainly on the ",(0,t.jsx)(n.code,{children:"Func"})," callback method. Other methods can be explored if interested."]}),"\n",(0,t.jsxs)(n.h2,{id:"func-callback",children:[(0,t.jsx)(n.code,{children:"Func"})," Callback"]}),"\n",(0,t.jsx)(n.p,{children:"Method definition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"// Function is a custom command callback function that is bound to a certain argument.\ntype Function func(ctx context.Context, parser *Parser) (err error)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As seen, within the callback method, we use the ",(0,t.jsx)(n.code,{children:"parser"})," object to obtain parsing parameters and options and return ",(0,t.jsx)(n.code,{children:"error"})," to inform the upper-level calling method whether the execution was successful."]}),"\n",(0,t.jsx)(n.p,{children:"Example usage:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n    "github.com/gogf/gf/v2/os/gcmd"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nvar (\n    Main = &gcmd.Command{\n        Name:        "main",\n        Brief:       "start http server",\n        Description: "this is the command entry for starting your http server",\n        Func: func(ctx context.Context, parser *gcmd.Parser) (err error) {\n            s := g.Server()\n            s.BindHandler("/", func(r *ghttp.Request) {\n                r.Response.Write("Hello world")\n            })\n            s.SetPort(8199)\n            s.Run()\n            return\n        },\n    }\n)\n\nfunc main() {\n    Main.Run(gctx.New())\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"This is what most projects\u2019 command line objects for starting up would look like. Most projects have only one entry point and only one callback method implementation."}),"\n",(0,t.jsx)(n.h2,{id:"help-information-generation",children:"Help Information Generation"}),"\n",(0,t.jsxs)(n.p,{children:["Although the ",(0,t.jsx)(n.code,{children:"Command"})," object can customize the ",(0,t.jsx)(n.code,{children:"HelpFunc"})," help callback method, the ",(0,t.jsx)(n.code,{children:"Command"})," object can automatically generate ",(0,t.jsx)(n.code,{children:"Help"})," usage help information. In most scenarios, customization is unnecessary. Moreover, the ",(0,t.jsx)(n.code,{children:"gcmd"})," component has built-in support for ",(0,t.jsx)(n.code,{children:"h/help"})," options by default, so programs using the ",(0,t.jsx)(n.code,{children:"gcmd"})," component can automatically generate ",(0,t.jsx)(n.code,{children:"Help"})," help information using these two options."]}),"\n",(0,t.jsxs)(n.p,{children:["Let\u2019s look at an example. We first build the previous example into a binary ",(0,t.jsx)(n.code,{children:"main"})," file using ",(0,t.jsx)(n.code,{children:"go build main.go"}),", and then take a quick look at the automatically generated help information when there is only one command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ ./main -h\nUSAGE\n    main [OPTION]\n\nDESCRIPTION\n    this is the command entry for starting your http server\n"})}),"\n",(0,t.jsx)(n.h2,{id:"hierarchical-command-management",children:"Hierarchical Command Management"}),"\n",(0,t.jsx)(n.h3,{id:"parent-commands-and-subcommands",children:"Parent Commands and Subcommands"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"Command"})," command can add subcommands. When a ",(0,t.jsx)(n.code,{children:"Command"})," has subcommands, it becomes a parent command. Subcommands can also add their own subcommands, forming a hierarchical command relationship. Both parent commands and subcommands can have their own callback methods, but in most scenarios, once a ",(0,t.jsx)(n.code,{children:"Command"})," becomes a parent command, callback methods often become unnecessary. We typically add subcommands to a ",(0,t.jsx)(n.code,{children:"Command"})," using the ",(0,t.jsx)(n.code,{children:"AddCommand"})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"// AddCommand adds one or more sub-commands to current command.\nfunc (c *Command) AddCommand(commands ...*Command) error\n"})}),"\n",(0,t.jsx)(n.h3,{id:"hierarchical-command-usage-example",children:"Hierarchical Command Usage Example"}),"\n",(0,t.jsx)(n.p,{children:"Let us demonstrate an example of multi-command management. We will improve the previous example by adding two subcommands."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "fmt"\n\n    "github.com/gogf/gf/v2/os/gcmd"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nvar (\n    Main = &gcmd.Command{\n        Name:        "main",\n        Brief:       "start http server",\n        Description: "this is the command entry for starting your process",\n    }\n    Http = &gcmd.Command{\n        Name:        "http",\n        Brief:       "start http server",\n        Description: "this is the command entry for starting your http server",\n        Func: func(ctx context.Context, parser *gcmd.Parser) (err error) {\n            fmt.Println("start http server")\n            return\n        },\n    }\n    Grpc = &gcmd.Command{\n        Name:        "grpc",\n        Brief:       "start grpc server",\n        Description: "this is the command entry for starting your grpc server",\n        Func: func(ctx context.Context, parser *gcmd.Parser) (err error) {\n            fmt.Println("start grpc server")\n            return\n        },\n    }\n)\n\nfunc main() {\n    err := Main.AddCommand(Http, Grpc)\n    if err != nil {\n        panic(err)\n    }\n    Main.Run(gctx.New())\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["As seen, we use the ",(0,t.jsx)(n.code,{children:"AddCommand"})," command to add two subcommands ",(0,t.jsx)(n.code,{children:"http/grpc"})," to the main command, used respectively for starting ",(0,t.jsx)(n.code,{children:"http/grpc"})," services. When subcommands exist, parent command often has no need for a ",(0,t.jsx)(n.code,{children:"Func"})," callback definition, so we removed the ",(0,t.jsx)(n.code,{children:"Func"})," definition of the ",(0,t.jsx)(n.code,{children:"main"})," command here."]}),"\n",(0,t.jsx)(n.p,{children:"After compilation, let us execute to see the effect:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ main\nUSAGE\n    main COMMAND [OPTION]\n\nCOMMAND\n    http    start http server\n    grpc    start grpc server\n\nDESCRIPTION\n    this is the command entry for starting your process\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Using the ",(0,t.jsx)(n.code,{children:"http"})," command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ main http\nstart http server\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Using the ",(0,t.jsx)(n.code,{children:"grpc"})," command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ main grpc\nstart grpc server\n"})})]})}function l(e={}){let{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},250065:function(e,n,a){a.d(n,{Z:function(){return i},a:function(){return r}});var o=a(667294);let t={},c=o.createContext(t);function r(e){let n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);