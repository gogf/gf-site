"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["56594"],{976588:function(e,t,i){i.r(t),i.d(t,{metadata:()=>o,contentTitle:()=>s,default:()=>c,assets:()=>l,toc:()=>f,frontMatter:()=>a});var o=JSON.parse('{"id":"docs/WEB\u670D\u52A1\u5F00\u53D1/\u670D\u52A1\u914D\u7F6E/\u670D\u52A1\u914D\u7F6E-\u914D\u7F6E\u6587\u4EF6\u6A21\u677F","title":"Configuration - File Template","description":"A file template for GoFrame framework service configuration, detailing various configuration parameters such as address listening, TLS/HTTPS configuration, static service, Cookie and Sessions settings, log recording, etc., helping users better utilize and configure GoFrame HTTP Server.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/WEB\u670D\u52A1\u5F00\u53D1/\u670D\u52A1\u914D\u7F6E/\u670D\u52A1\u914D\u7F6E-\u914D\u7F6E\u6587\u4EF6\u6A21\u677F.md","sourceDirName":"docs/WEB\u670D\u52A1\u5F00\u53D1/\u670D\u52A1\u914D\u7F6E","slug":"/docs/web/server-config-file-template","permalink":"/en/docs/web/server-config-file-template","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/WEB\u670D\u52A1\u5F00\u53D1/\u670D\u52A1\u914D\u7F6E/\u670D\u52A1\u914D\u7F6E-\u914D\u7F6E\u6587\u4EF6\u6A21\u677F.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732451468000,"sidebarPosition":1,"frontMatter":{"slug":"/docs/web/server-config-file-template","title":"Configuration - File Template","sidebar_position":1,"hide_title":true,"keywords":["GoFrame framework","service configuration","configuration file template","ServerConfig","HTTP Server","TLS/HTTPS","static file service","log configuration","Cookie configuration","Sessions configuration"],"description":"A file template for GoFrame framework service configuration, detailing various configuration parameters such as address listening, TLS/HTTPS configuration, static service, Cookie and Sessions settings, log recording, etc., helping users better utilize and configure GoFrame HTTP Server."},"sidebar":"mainSidebar","previous":{"title":"Configuration - File","permalink":"/en/docs/web/server-config-file"},"next":{"title":"Configuration - Methods","permalink":"/en/docs/web/server-config-funcs"}}'),r=i("785893"),n=i("250065");let a={slug:"/docs/web/server-config-file-template",title:"Configuration - File Template",sidebar_position:1,hide_title:!0,keywords:["GoFrame framework","service configuration","configuration file template","ServerConfig","HTTP Server","TLS/HTTPS","static file service","log configuration","Cookie configuration","Sessions configuration"],description:"A file template for GoFrame framework service configuration, detailing various configuration parameters such as address listening, TLS/HTTPS configuration, static service, Cookie and Sessions settings, log recording, etc., helping users better utilize and configure GoFrame HTTP Server."},s=void 0,l={},f=[];function u(e){let t={a:"a",code:"code",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Please refer to the ",(0,r.jsx)(t.code,{children:"ServerConfig"})," object properties for all configuration items: ",(0,r.jsx)(t.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/net/ghttp#ServerConfig",children:"https://pkg.go.dev/github.com/gogf/gf/v2/net/ghttp#ServerConfig"})]}),"\n",(0,r.jsx)(t.p,{children:"Below is the configuration file template:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:'server:\n    # Basic Configuration\n    address:             ":80"                 # Local listening address. Default is ":80", multiple addresses are separated by ",". For example: "192.168.2.3:8000,10.0.3.10:8001"\n    httpsAddr:           ":443"                # TLS/HTTPS configuration, also requires certificate and key configuration. Default is off. Configuration format is the same as above.\n    httpsCertPath:       ""                    # Local path of the TLS/HTTPS certificate file, absolute path is recommended. Default is off\n    httpsKeyPath:        ""                    # Local path of the TLS/HTTPS key file, absolute path is recommended. Default is off\n    readTimeout:         "60s"                 # Request read timeout, generally not needed. Default is 60 seconds\n    writeTimeout:        "0"                   # Data write timeout, generally not needed. Default is no timeout (0)\n    idleTimeout:         "60s"                 # Valid only when Keep-Alive is enabled, request idle time. Default is 60 seconds\n    maxHeaderBytes:      "10240"               # Request Header size limit (Byte). Default is 10KB\n    keepAlive:           true                  # Whether to enable Keep-Alive. Default is true\n    serverAgent:         "GoFrame HTTP Server" # Server agent information. Default is "GoFrame HTTP Server"\n\n    # API Documentation\n    openapiPath: "/api.json" # OpenAPI API document address\n    swaggerPath: "/swagger"  # Built-in SwaggerUI display address\n\n    # Static Service Configuration\n    indexFiles:          ["index.html","index.htm"]   # Automatic homepage static file search. Default is ["index.html", "index.htm"]\n    indexFolder:         false                        # Whether to display the list of files in the directory when accessing static file directory. Default is off, request will return 403\n    serverRoot:          "/var/www"                   # Root path of static file service, automatically enables static file service when configured. Default is off\n    searchPaths:         ["/home/www","/var/lib/www"] # Additional file search paths for providing static file service when the root path is not found, search in order. Default is off\n    fileServerEnabled:   false                        # Total switch for static file service. Default is false\n\n    # Cookie Configuration\n    cookieMaxAge:        "365d"             # Cookie validity period. Default is 365 days\n    cookiePath:          "/"                # Cookie valid path. Default is "/" meaning valid for all paths on the site\n    cookieDomain:        ""                 # Cookie valid domain. Default is the domain name of the current configured Cookie\n\n    # Sessions Configuration\n    sessionMaxAge:       "24h"              # Session validity period. Default is 24 hours\n    sessionIdName:       "gfsessionid"      # Key name of SessionId. Default is gfsessionid\n    sessionCookieOutput: true               # Whether to return SessionId to Cookie when Session feature is enabled. Default is true\n    sessionPath:         "/tmp/gsessions"   # File directory path for Session storage. Default is gsessions directory under the current system temporary directory\n\n    # Basic Log Configuration\n    # This configuration is similar to nginx, mainly for request log recording\n    logPath:             ""                 # Directory path for storing log files, absolute path is recommended. Default is empty, meaning off\n    logStdout:           true               # Whether to output the log to the terminal. Default is true\n    errorStack:          true               # Whether to record stack information to the log when Server catches exceptions. Default is true\n    errorLogEnabled:     true               # Whether to record exception log information to the log. Default is true\n    errorLogPattern:     "error-{Ymd}.log"  # Exception error log file format. Default is "error-{Ymd}.log"\n    accessLogEnabled:    false              # Whether to record access logs. Default is false\n    accessLogPattern:    "access-{Ymd}.log" # Access log file format. Default is "access-{Ymd}.log"\n\n    # Extended Log Configuration (Parameter log component configuration)\n    # This configuration mainly affects server (ghttp module) logs, such as web service listening port, web service routes, and does not affect g.Log\n    logger:\n        path:                  "/var/log/"           # Log file path. Default is empty, meaning off, only output to terminal\n        file:                  "{Y-m-d}.log"         # Log file format. Default is "{Y-m-d}.log"\n        prefix:                ""                    # Log content output prefix. Default is empty\n        level:                 "all"                 # Log output level\n        timeFormat:            "2006-01-02T15:04:05" # Custom time format for log output, configured using Golang standard time format\n        ctxKeys:               []                    # Custom Context variable names, automatically print Context variables to logs. Default is empty\n        header:                true                  # Whether to print the log header information. Default is true\n        stdout:                true                  # Whether to output the log to the terminal at the same time. Default is true\n        rotateSize:            0                     # Rotate files by file size. Default is 0, meaning rotating feature is off\n        rotateExpire:          0                     # Rotate files by time interval. Default is 0, meaning rotating feature is off\n        rotateBackupLimit:     0                     # Clean up split files by the number of split files when splitting feature is enabled. Default is 0, meaning no backup, split and delete\n        rotateBackupExpire:    0                     # Clean up split files by their validity period when splitting feature is enabled. Default is 0, meaning no backup, split and delete\n        rotateBackupCompress:  0                     # Compression ratio (0-9) for rotated files. Default is 0, meaning no compression\n        rotateCheckInterval:   "1h"                  # Time check interval for rotating splits, generally not needed. Default is 1 hour\n        stdoutColorDisabled:   false                 # Disable color printing on the terminal. Default is on\n        writerColorEnable:     false                 # Whether to include color in log files. Default is false, meaning no color\n\n    # PProf Configuration\n    pprofEnabled: false # Whether to enable PProf performance debugging feature. Default is false\n    pprofPattern: ""    # Valid only when PProf is enabled, indicates the page access path of the PProf feature, effective for all domains bound to the current Server.\n\n    # Graceful Restart Feature\n    graceful:                false # Whether to enable graceful restart feature, adds a local TCP port with 10000 for inter-process communication when enabled. Default is false\n    gracefulTimeout:         2     # Seconds for the parent process to exit after a graceful restart, default is 2 seconds. If the request takes more time than this value, it may cause the request to be interrupted\n    gracefulShutdownTimeout: 5     # When the Server is shut down, if there are HTTP requests being executed, how many seconds the Server waits before forcing close\n\n    # Other Configuration\n    clientMaxBodySize:   810241024 # Client\'s maximum Body upload limit size, affects file upload size (Byte). Default is 8*1024*1024=8MB\n    formParsingMemory:   1048576   # Buffer size (Byte) when parsing forms, generally not needed. Default is 1024*1024=1MB\n    nameToUriType:       0         # Route generation rule when using object registration in route registration. Default is 0\n    routeOverWrite:      false     # Whether to forcibly overwrite when encountering duplicate route registration. Default is false, duplicate routes will cause an error and exit at startup\n    dumpRouterMap:       true      # Whether to print all route lists when the Server starts. Default is true\n\n'})})]})}function c(e={}){let{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},250065:function(e,t,i){i.d(t,{Z:function(){return s},a:function(){return a}});var o=i(667294);let r={},n=o.createContext(r);function a(e){let t=o.useContext(n);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(n.Provider,{value:t},e.children)}}}]);