"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["94204"],{832898:function(e,r,n){n.r(r),n.d(r,{metadata:()=>o,contentTitle:()=>a,default:()=>p,assets:()=>c,toc:()=>d,frontMatter:()=>s});var o=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u9519\u8BEF\u5904\u7406/\u9519\u8BEF\u5904\u7406-\u5E38\u7528\u65B9\u6CD5","title":"Error Handling - Methods","description":"Common methods for error handling in the GoFrame framework, including error creation, error wrapping, and functions related to error codes, providing multiple ways to create and wrap custom error messages to help developers effectively manage errors and debug code when using the GoFrame framework.","source":"@site/i18n/en/docusaurus-plugin-content-docs/version-2.8.x/docs/\u6838\u5FC3\u7EC4\u4EF6/\u9519\u8BEF\u5904\u7406/\u9519\u8BEF\u5904\u7406-\u5E38\u7528\u65B9\u6CD5.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u9519\u8BEF\u5904\u7406","slug":"/docs/core/gerror-funcs","permalink":"/en/2.8.x/docs/core/gerror-funcs","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/versioned_docs/version-2.8.x/docs/\u6838\u5FC3\u7EC4\u4EF6/\u9519\u8BEF\u5904\u7406/\u9519\u8BEF\u5904\u7406-\u5E38\u7528\u65B9\u6CD5.md","tags":[],"version":"2.8.x","lastUpdatedBy":"John Guo","lastUpdatedAt":1742194305000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/core/gerror-funcs","title":"Error Handling - Methods","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","Error Handling","Error Creation","New","Wrap","NewSkip","Error Code","gerror","Stack Information"],"description":"Common methods for error handling in the GoFrame framework, including error creation, error wrapping, and functions related to error codes, providing multiple ways to create and wrap custom error messages to help developers effectively manage errors and debug code when using the GoFrame framework."},"sidebar":"mainSidebar","previous":{"title":"Error Handling","permalink":"/en/2.8.x/docs/core/gerror"},"next":{"title":"Error Handling - Stack","permalink":"/en/2.8.x/docs/core/gerror-stack"}}'),t=n("785893"),i=n("250065");let s={slug:"/docs/core/gerror-funcs",title:"Error Handling - Methods",sidebar_position:0,hide_title:!0,keywords:["GoFrame","GoFrame Framework","Error Handling","Error Creation","New","Wrap","NewSkip","Error Code","gerror","Stack Information"],description:"Common methods for error handling in the GoFrame framework, including error creation, error wrapping, and functions related to error codes, providing multiple ways to create and wrap custom error messages to help developers effectively manage errors and debug code when using the GoFrame framework."},a=void 0,c={},d=[{value:"<code>New/Newf</code>",id:"newnewf",level:2},{value:"<code>Wrap/Wrapf</code>",id:"wrapwrapf",level:2},{value:"<code>NewSkip/NewSkipf</code>",id:"newskipnewskipf",level:2},{value:"<code>WrapSkip/WrapSkipf</code>",id:"wrapskipwrapskipf",level:2}];function l(e){let r={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["This chapter only introduces some commonly used methods. For a complete list of error methods, please refer to the interface documentation: ",(0,t.jsx)(r.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/errors/gerror",children:"https://pkg.go.dev/github.com/gogf/gf/v2/errors/gerror"})]}),"\n",(0,t.jsx)(r.h2,{id:"newnewf",children:(0,t.jsx)(r.code,{children:"New/Newf"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:["Description: Used to create a custom error message ",(0,t.jsx)(r.code,{children:"error"})," object, including stack information."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Format:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:"// New creates and returns an error which is formatted from given text.\nNew(text string) error\n\n// Newf returns an error that formats as the given format and args.\nNewf(format string, args ...interface{}) error\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"wrapwrapf",children:(0,t.jsx)(r.code,{children:"Wrap/Wrapf"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:["Description: Used to wrap other ",(0,t.jsx)(r.code,{children:"error"})," objects, constructing multi-level error messages, including stack information."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Format:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:"// Wrap wraps error with text. It returns nil if given err is nil.\n// Note that it does not lose the error code of wrapped error, as it inherits the error code from it.\nfunc Wrap(err error, text string) error\n\n// Wrapf returns an error annotating err with a stack trace at the point Wrapf is called, and the format specifier.\n// It returns nil if given `err` is nil.\n// Note that it does not lose the error code of wrapped error, as it inherits the error code from it.\nfunc Wrapf(err error, format string, args ...interface{}) error\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"newskipnewskipf",children:(0,t.jsx)(r.code,{children:"NewSkip/NewSkipf"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:["Description: Used to create a custom error message ",(0,t.jsx)(r.code,{children:"error"})," object, and ignore part of the stack information (ignoring upwards from the current method call location). Advanced functionality, rarely used by general developers."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Format:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:"// NewSkip creates and returns an error which is formatted from given text.\n// The parameter `skip` specifies the stack callers skipped amount.\nfunc NewSkip(skip int, text string) error\n\n// NewSkipf returns an error that formats as the given format and args.\n// The parameter `skip` specifies the stack callers skipped amount.\nfunc NewSkipf(skip int, format string, args ...interface{}) error\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"wrapskipwrapskipf",children:(0,t.jsx)(r.code,{children:"WrapSkip/WrapSkipf"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:["Description: Similar to the ",(0,t.jsx)(r.code,{children:"Wrap/Wrapf"})," methods, but ignores part of the stack information."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Format:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:"// WrapSkip wraps error with text. It returns nil if given err is nil.\n// The parameter `skip` specifies the stack callers skipped amount.\n// Note that it does not lose the error code of wrapped error, as it inherits the error code from it.\nfunc WrapSkip(skip int, err error, text string) error \n\n// WrapSkipf wraps error with text that is formatted with given format and args. It returns nil if given err is nil.\n// The parameter `skip` specifies the stack callers skipped amount.\n// Note that it does not lose the error code of wrapped error, as it inherits the error code from it.\nfunc WrapSkipf(skip int, err error, format string, args ...interface{}) error\n"})}),"\n"]}),"\n"]})]})}function p(e={}){let{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},250065:function(e,r,n){n.d(r,{Z:function(){return a},a:function(){return s}});var o=n(667294);let t={},i=o.createContext(t);function s(e){let r=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(i.Provider,{value:r},e.children)}}}]);