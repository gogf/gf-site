"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["11355"],{486649:function(e,n,t){t.r(n),t.d(n,{metadata:()=>s,contentTitle:()=>c,default:()=>h,assets:()=>d,toc:()=>o,frontMatter:()=>l});var s=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u96C6\u5408\u7C7B\u578B-gset/\u96C6\u5408\u7C7B\u578B-\u65B9\u6CD5\u4ECB\u7ECD","title":"Set - Methods","description":"Implement basic set operations using the GoFrame library, including creating sets, adding elements, set operations, element checking and removal, set iteration, among others. It also provides concrete code examples to help understand and apply these methods.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u96C6\u5408\u7C7B\u578B-gset/\u96C6\u5408\u7C7B\u578B-\u65B9\u6CD5\u4ECB\u7ECD.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u96C6\u5408\u7C7B\u578B-gset","slug":"/docs/components/container-gset-funcs","permalink":"/en/docs/components/container-gset-funcs","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u6570\u636E\u7ED3\u6784/\u96C6\u5408\u7C7B\u578B-gset/\u96C6\u5408\u7C7B\u578B-\u65B9\u6CD5\u4ECB\u7ECD.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":2,"frontMatter":{"slug":"/docs/components/container-gset-funcs","title":"Set - Methods","sidebar_position":2,"hide_title":true,"keywords":["GoFrame","Set Type","StrSet","Method Introduction","Set Operations","Concurrent Safety","String Set","Code Examples","Element Operations","Set Functions"],"description":"Implement basic set operations using the GoFrame library, including creating sets, adding elements, set operations, element checking and removal, set iteration, among others. It also provides concrete code examples to help understand and apply these methods."},"sidebar":"mainSidebar","previous":{"title":"Set - Performance","permalink":"/en/docs/components/container-gset-benchmark"},"next":{"title":"List","permalink":"/en/docs/components/container-glist"}}'),r=t("785893"),i=t("250065");let l={slug:"/docs/components/container-gset-funcs",title:"Set - Methods",sidebar_position:2,hide_title:!0,keywords:["GoFrame","Set Type","StrSet","Method Introduction","Set Operations","Concurrent Safety","String Set","Code Examples","Element Operations","Set Functions"],description:"Implement basic set operations using the GoFrame library, including creating sets, adding elements, set operations, element checking and removal, set iteration, among others. It also provides concrete code examples to help understand and apply these methods."},c=void 0,d={},o=[{value:"<code>NewStrSet</code>",id:"newstrset",level:2},{value:"<code>NewStrSetFrom</code>",id:"newstrsetfrom",level:2},{value:"<code>Add</code>",id:"add",level:2},{value:"<code>AddIfNotExist</code>",id:"addifnotexist",level:2},{value:"<code>AddIfNotExistFunc</code>",id:"addifnotexistfunc",level:2},{value:"<code>AddIfNotExistFuncLock</code>",id:"addifnotexistfunclock",level:2},{value:"<code>Clear</code>",id:"clear",level:2},{value:"<code>Intersect</code>",id:"intersect",level:2},{value:"<code>Diff</code>",id:"diff",level:2},{value:"<code>Union</code>",id:"union",level:2},{value:"<code>Complement</code>",id:"complement",level:2},{value:"<code>Contains</code>",id:"contains",level:2},{value:"<code>ContainsI</code>",id:"containsi",level:2},{value:"<code>Equal</code>",id:"equal",level:2},{value:"<code>IsSubSetOf</code>",id:"issubsetof",level:2},{value:"<code>Iterator</code>",id:"iterator",level:2},{value:"<code>Join</code>",id:"join",level:2},{value:"<code>LockFunc</code>",id:"lockfunc",level:2},{value:"<code>RLockFunc</code>",id:"rlockfunc",level:2},{value:"<code>Merge</code>",id:"merge",level:2},{value:"<code>Pop</code>",id:"pop",level:2},{value:"<code>Pops</code>",id:"pops",level:2},{value:"<code>Remove</code>",id:"remove",level:2},{value:"<code>Size</code>",id:"size",level:2},{value:"<code>Silce</code>",id:"silce",level:2},{value:"<code>String</code>",id:"string",level:2},{value:"<code>Sum</code>",id:"sum",level:2},{value:"<code>Walk</code>",id:"walk",level:2},{value:"<code>MarshalJSON</code>",id:"marshaljson",level:2},{value:"<code>UnmarshalJSON</code>",id:"unmarshaljson",level:2},{value:"<code>UnmarshalValue</code>",id:"unmarshalvalue",level:2}];function a(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["The following is a list of common methods. The documentation may lag behind new features in the code. For more methods and examples, please refer to the code documentation: ",(0,r.jsx)(n.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/container/gset",children:"https://pkg.go.dev/github.com/gogf/gf/v2/container/gset"})]})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["The usage of methods is introduced using the ",(0,r.jsx)(n.code,{children:"StrSet"})," type; methods for other set types are similar and will not be repeated."]})}),"\n",(0,r.jsx)(n.h2,{id:"newstrset",children:(0,r.jsx)(n.code,{children:"NewStrSet"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"NewStrSet"})," creates and returns an empty set that contains unique string data. The ",(0,r.jsx)(n.code,{children:"safe"})," parameter specifies whether to use in concurrent safety, with a default value of ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func NewStrSet(safe ...bool) *StrSet\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleNewStrSet() {\n      strSet := gset.NewStrSet(true)\n      strSet.Add([]string{"str1", "str2", "str3"}...)\n      fmt.Println(strSet.Slice())\n\n      // May Output:\n      // [str3 str1 str2]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"newstrsetfrom",children:(0,r.jsx)(n.code,{children:"NewStrSetFrom"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"NewStrSetFrom"})," creates a set from a given array. The ",(0,r.jsx)(n.code,{children:"safe"})," parameter specifies whether to use in concurrent safety, with a default value of ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func NewStrSetFrom(items []string, safe ...bool) *StrSet\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleNewStrSetFrom() {\n      strSet := gset.NewStrSetFrom([]string{"str1", "str2", "str3"}, true)\n      fmt.Println(strSet.Slice())\n\n      // May Output:\n      // [str1 str2 str3]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"add",children:(0,r.jsx)(n.code,{children:"Add"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Add"})," adds one or more elements to the set."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Add(item ...string)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Add() {\n      strSet := gset.NewStrSetFrom([]string{"str1", "str2", "str3"}, true)\n      strSet.Add("str")\n      fmt.Println(strSet.Slice())\n      fmt.Println(strSet.AddIfNotExist("str"))\n\n      // May Output:\n      // [str str1 str2 str3]\n      // false\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"addifnotexist",children:(0,r.jsx)(n.code,{children:"AddIfNotExist"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"AddIfNotExist"})," checks if the specified element ",(0,r.jsx)(n.code,{children:"item"})," exists in the set. If it does not exist, it adds ",(0,r.jsx)(n.code,{children:"item"})," to the set and returns ",(0,r.jsx)(n.code,{children:"true"}),"; otherwise, it does nothing and returns ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) AddIfNotExist(item string) bool\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_AddIfNotExist() {\n      strSet := gset.NewStrSetFrom([]string{"str1", "str2", "str3"}, true)\n      strSet.Add("str")\n      fmt.Println(strSet.Slice())\n      fmt.Println(strSet.AddIfNotExist("str"))\n\n      // May Output:\n      // [str str1 str2 str3]\n      // false\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"addifnotexistfunc",children:(0,r.jsx)(n.code,{children:"AddIfNotExistFunc"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"AddIfNotExistFunc"})," checks if the specified element ",(0,r.jsx)(n.code,{children:"item"})," exists in the set. If it does not exist and the function ",(0,r.jsx)(n.code,{children:"f"})," returns ",(0,r.jsx)(n.code,{children:"true"}),", it sets ",(0,r.jsx)(n.code,{children:"item"})," into the set and returns ",(0,r.jsx)(n.code,{children:"true"}),"; otherwise, it does nothing and returns ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) AddIfNotExistFunc(item string, f func() bool) bool\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_AddIfNotExistFunc() {\n      strSet := gset.NewStrSetFrom([]string{"str1", "str2", "str3"}, true)\n      strSet.Add("str")\n      fmt.Println(strSet.Slice())\n      fmt.Println(strSet.AddIfNotExistFunc("str5", func() bool {\n          return true\n      }))\n\n      // May Output:\n      // [str1 str2 str3 str]\n      // true\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"addifnotexistfunclock",children:(0,r.jsx)(n.code,{children:"AddIfNotExistFuncLock"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"AddIfNotExistFuncLock"})," is similar to ",(0,r.jsx)(n.code,{children:"AddIfNotExistFunc"}),", but when multiple goroutines simultaneously call ",(0,r.jsx)(n.code,{children:"AddIfNotExistFuncLock"}),", it uses a concurrent safety lock mechanism to ensure that only one goroutine executes at a time. This method is effective only if the ",(0,r.jsx)(n.code,{children:"safe"})," parameter is set to ",(0,r.jsx)(n.code,{children:"true"})," when creating the set; otherwise, it behaves like the ",(0,r.jsx)(n.code,{children:"AddIfNotExistFunc"})," method."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) AddIfNotExistFuncLock(item string, f func() bool) bool\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_AddIfNotExistFuncLock() {\n      strSet := gset.NewStrSetFrom([]string{"str1", "str2", "str3"}, true)\n      strSet.Add("str")\n      fmt.Println(strSet.Slice())\n      fmt.Println(strSet.AddIfNotExistFuncLock("str4", func() bool {\n          return true\n      }))\n\n      // May Output:\n      // [str1 str2 str3 str]\n      // true\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"clear",children:(0,r.jsx)(n.code,{children:"Clear"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Clear"})," removes all elements from the set."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Clear()\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Clear() {\n      strSet := gset.NewStrSetFrom([]string{"str1", "str2", "str3"}, true)\n      fmt.Println(strSet.Size())\n      strSet.Clear()\n      fmt.Println(strSet.Size())\n\n      // Output:\n      // 3\n      // 0\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"intersect",children:(0,r.jsx)(n.code,{children:"Intersect"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Intersect"})," performs an intersection operation between the set ",(0,r.jsx)(n.code,{children:"set"})," and ",(0,r.jsx)(n.code,{children:"others"}),", returning a new set ",(0,r.jsx)(n.code,{children:"newSet"})," where the elements exist in both ",(0,r.jsx)(n.code,{children:"set"})," and ",(0,r.jsx)(n.code,{children:"others"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Intersect(others ...*StrSet) (newSet *StrSet)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Intersect() {\n      s1 := gset.NewStrSet(true)\n      s1.Add([]string{"a", "b", "c"}...)\n      var s2 gset.StrSet\n      s2.Add([]string{"a", "b", "c", "d"}...)\n      fmt.Println(s2.Intersect(s1).Slice())\n\n      // May Output:\n      // [c a b]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"diff",children:(0,r.jsx)(n.code,{children:"Diff"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Diff"})," performs a difference operation between the set ",(0,r.jsx)(n.code,{children:"set"})," and ",(0,r.jsx)(n.code,{children:"others"}),", returning a new set ",(0,r.jsx)(n.code,{children:"newSet"}),". The elements in ",(0,r.jsx)(n.code,{children:"newSet"})," exist in ",(0,r.jsx)(n.code,{children:"set"})," but not in ",(0,r.jsx)(n.code,{children:"others"}),". Note that ",(0,r.jsx)(n.code,{children:"others"})," can specify multiple set parameters."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Diff(others ...*StrSet) (newSet *StrSet)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Diff() {\n      s1 := gset.NewStrSetFrom([]string{"a", "b", "c"}, true)\n      s2 := gset.NewStrSetFrom([]string{"a", "b", "c", "d"}, true)\n      fmt.Println(s2.Diff(s1).Slice())\n\n      // Output:\n      // [d]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"union",children:(0,r.jsx)(n.code,{children:"Union"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Union"})," performs a union operation between the set ",(0,r.jsx)(n.code,{children:"set"})," and ",(0,r.jsx)(n.code,{children:"others"}),", returning a new set ",(0,r.jsx)(n.code,{children:"newSet"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Union(others ...*StrSet) (newSet *StrSet)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Union() {\n      s1 := gset.NewStrSet(true)\n      s1.Add([]string{"a", "b", "c", "d"}...)\n      s2 := gset.NewStrSet(true)\n      s2.Add([]string{"a", "b", "d"}...)\n      fmt.Println(s1.Union(s2).Slice())\n\n      // May Output:\n      // [a b c d]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"complement",children:(0,r.jsx)(n.code,{children:"Complement"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Complement"})," performs a complement operation between ",(0,r.jsx)(n.code,{children:"set"})," and ",(0,r.jsx)(n.code,{children:"full"}),", returning a new set ",(0,r.jsx)(n.code,{children:"newSet"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Complement(full *StrSet) (newSet *StrSet)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Complement() {\n      strSet := gset.NewStrSetFrom([]string{"str1", "str2", "str3", "str4", "str5"}, true)\n      s := gset.NewStrSetFrom([]string{"str1", "str2", "str3"}, true)\n      fmt.Println(s.Complement(strSet).Slice())\n\n      // May Output:\n      // [str4 str5]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"contains",children:(0,r.jsx)(n.code,{children:"Contains"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Contains"})," checks if the set contains ",(0,r.jsx)(n.code,{children:"item"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Contains(item string) bool\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Contains() {\n      var set gset.StrSet\n      set.Add("a")\n      fmt.Println(set.Contains("a"))\n      fmt.Println(set.Contains("A"))\n\n      // Output:\n      // true\n      // false\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"containsi",children:(0,r.jsx)(n.code,{children:"ContainsI"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"ContainsI"})," is similar to ",(0,r.jsx)(n.code,{children:"Contains"}),", but it performs a case-insensitive comparison."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) ContainsI(item string) bool\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_ContainsI() {\n      var set gset.StrSet\n      set.Add("a")\n      fmt.Println(set.ContainsI("a"))\n      fmt.Println(set.ContainsI("A"))\n\n      // Output:\n      // true\n      // true\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"equal",children:(0,r.jsx)(n.code,{children:"Equal"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Equal"})," checks whether two sets are completely equal (including size and elements)."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Equal(other *StrSet) bool\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Equal() {\n      s1 := gset.NewStrSetFrom([]string{"a", "b", "c"}, true)\n      s2 := gset.NewStrSetFrom([]string{"a", "b", "c", "d"}, true)\n      fmt.Println(s2.Equal(s1))\n\n      s3 := gset.NewStrSetFrom([]string{"a", "b", "c"}, true)\n      s4 := gset.NewStrSetFrom([]string{"a", "b", "c"}, true)\n      fmt.Println(s3.Equal(s4))\n\n      // Output:\n      // false\n      // true\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"issubsetof",children:(0,r.jsx)(n.code,{children:"IsSubSetOf"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"IsSubsetOf"})," checks whether the current set ",(0,r.jsx)(n.code,{children:"set"})," is a subset of the specified set ",(0,r.jsx)(n.code,{children:"other"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) IsSubsetOf(other *StrSet) bool\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_IsSubsetOf() {\n      s1 := gset.NewStrSet(true)\n      s1.Add([]string{"a", "b", "c", "d"}...)\n      var s2 gset.StrSet\n      s2.Add([]string{"a", "b", "d"}...)\n      fmt.Println(s2.IsSubsetOf(s1))\n\n      // Output:\n      // true\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"iterator",children:(0,r.jsx)(n.code,{children:"Iterator"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Iterator"})," iterates over the current set ",(0,r.jsx)(n.code,{children:"set"})," using the given callback function ",(0,r.jsx)(n.code,{children:"f"}),". If the function ",(0,r.jsx)(n.code,{children:"f"})," returns ",(0,r.jsx)(n.code,{children:"true"}),", it continues iteration; otherwise, it stops."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Iterator(f func(v string) bool)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Iterator() {\n      s1 := gset.NewStrSet(true)\n      s1.Add([]string{"a", "b", "c", "d"}...)\n      s1.Iterator(func(v string) bool {\n          fmt.Println("Iterator", v)\n          return true\n      })\n\n      // May Output:\n      // Iterator a\n      // Iterator b\n      // Iterator c\n      // Iterator d\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"join",children:(0,r.jsx)(n.code,{children:"Join"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Join"})," concatenates the elements of the set into a new string using ",(0,r.jsx)(n.code,{children:"glue"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Join(glue string) string\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Join() {\n      s1 := gset.NewStrSet(true)\n      s1.Add([]string{"a", "b", "c", "d"}...)\n      fmt.Println(s1.Join(","))\n\n      // May Output:\n      // b,c,d,a\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"lockfunc",children:(0,r.jsx)(n.code,{children:"LockFunc"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"LockFunc"})," is useful only in concurrent safety scenarios. It locks the set ",(0,r.jsx)(n.code,{children:"set"})," with a write lock and executes the callback function ",(0,r.jsx)(n.code,{children:"f"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) LockFunc(f func(m map[string]struct{}))\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_LockFunc() {\n      s1 := gset.NewStrSet(true)\n      s1.Add([]string{"1", "2"}...)\n      s1.LockFunc(func(m map[string]struct{}) {\n          m["3"] = struct{}{}\n      })\n      fmt.Println(s1.Slice())\n\n      // May Output\n      // [2 3 1]\n\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"rlockfunc",children:(0,r.jsx)(n.code,{children:"RLockFunc"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"RLockFunc"})," is useful only in concurrent safety scenarios. It locks the set ",(0,r.jsx)(n.code,{children:"set"})," with a read lock and executes the callback function ",(0,r.jsx)(n.code,{children:"f"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) RLockFunc(f func(m map[string]struct{}))\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_RLockFunc() {\n      s1 := gset.NewStrSet(true)\n      s1.Add([]string{"a", "b", "c", "d"}...)\n      s1.RLockFunc(func(m map[string]struct{}) {\n          fmt.Println(m)\n      })\n\n      // Output:\n      // map[a:{} b:{} c:{} d:{}]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"merge",children:(0,r.jsx)(n.code,{children:"Merge"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Merge"})," merges all elements from the ",(0,r.jsx)(n.code,{children:"others"})," sets into ",(0,r.jsx)(n.code,{children:"set"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Merge(others ...*StrSet) *StrSet\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Merge() {\n      s1 := gset.NewStrSet(true)\n      s1.Add([]string{"a", "b", "c", "d"}...)\n\n      s2 := gset.NewStrSet(true)\n      fmt.Println(s1.Merge(s2).Slice())\n\n      // May Output:\n      // [d a b c]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"pop",children:(0,r.jsx)(n.code,{children:"Pop"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Pop"})," randomly retrieves an element from the set."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Pop() string\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Pop() {\n      s1 := gset.NewStrSet(true)\n      s1.Add([]string{"a", "b", "c", "d"}...)\n\n      fmt.Println(s1.Pop())\n\n      // May Output:\n      // a\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"pops",children:(0,r.jsx)(n.code,{children:"Pops"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Pops"})," randomly pops ",(0,r.jsx)(n.code,{children:"size"})," number of elements from the set. If ",(0,r.jsx)(n.code,{children:"size == -1"}),", it returns all elements."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Pops(size int) []string\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Pops() {\n      s1 := gset.NewStrSet(true)\n      s1.Add([]string{"a", "b", "c", "d"}...)\n      for _, v := range s1.Pops(2) {\n          fmt.Println(v)\n      }\n\n      // May Output:\n      // a\n      // b\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"remove",children:(0,r.jsx)(n.code,{children:"Remove"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Remove"})," removes the specified element ",(0,r.jsx)(n.code,{children:"item"})," from the set."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Remove(item string)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Remove() {\n      s1 := gset.NewStrSet(true)\n      s1.Add([]string{"a", "b", "c", "d"}...)\n      s1.Remove("a")\n      fmt.Println(s1.Slice())\n\n      // May Output:\n      // [b c d]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"size",children:(0,r.jsx)(n.code,{children:"Size"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Size"})," returns the size of the set."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Size() int\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Size() {\n      s1 := gset.NewStrSet(true)\n      s1.Add([]string{"a", "b", "c", "d"}...)\n      fmt.Println(s1.Size())\n\n      // Output:\n      // 4\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"silce",children:(0,r.jsx)(n.code,{children:"Silce"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Slice"})," returns the elements of the set as a slice."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Slice() []string\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Slice() {\n      s1 := gset.NewStrSet(true)\n      s1.Add([]string{"a", "b", "c", "d"}...)\n      fmt.Println(s1.Slice())\n\n      // May Output:\n      // [a,b,c,d]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"string",children:(0,r.jsx)(n.code,{children:"String"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"String"})," returns the set as a string."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) String() string\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_String() {\n      s1 := gset.NewStrSet(true)\n      s1.Add([]string{"a", "b", "c", "d"}...)\n      fmt.Println(s1.String())\n\n      // May Output:\n      // "a","b","c","d"\n}\n\n\n'})}),"\n",(0,r.jsx)(n.h2,{id:"sum",children:(0,r.jsx)(n.code,{children:"Sum"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Sum"})," sums up the elements of the set. Note: It is valid only when the elements are numbers; otherwise, you will get an unexpected result."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Sum() (sum int)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Sum() {\n      s1 := gset.NewStrSet(true)\n      s1.Add([]string{"1", "2", "3", "4"}...)\n      fmt.Println(s1.Sum())\n\n      // Output:\n      // 10\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"walk",children:(0,r.jsx)(n.code,{children:"Walk"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"Walk"})," traverses the current set with the user-provided callback function ",(0,r.jsx)(n.code,{children:"f"}),", and resets the current set with the return results of ",(0,r.jsx)(n.code,{children:"f"}),". Note, in a concurrent safety scenario, this method uses a write lock internally to ensure safety."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) Walk(f func(item string) string) *StrSet\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_Walk() {\n      var (\n          set    gset.StrSet\n          names  = g.SliceStr{"user", "user_detail"}\n          prefix = "gf_"\n      )\n      set.Add(names...)\n      // Add prefix for given table names.\n      set.Walk(func(item string) string {\n          return prefix + item\n      })\n      fmt.Println(set.Slice())\n\n      // May Output:\n      // [gf_user gf_user_detail]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"marshaljson",children:(0,r.jsx)(n.code,{children:"MarshalJSON"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"MarshalJSON"})," implements the ",(0,r.jsx)(n.code,{children:"MarshalJSON"})," interface of ",(0,r.jsx)(n.code,{children:"json.Marshal"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) MarshalJSON() ([]byte, error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_MarshalJSON() {\n      type Student struct {\n          Id     int\n          Name   string\n          Scores *gset.StrSet\n      }\n      s := Student{\n          Id:     1,\n          Name:   "john",\n          Scores: gset.NewStrSetFrom([]string{"100", "99", "98"}, true),\n      }\n      b, _ := json.Marshal(s)\n      fmt.Println(string(b))\n\n      // May Output:\n      // {"Id":1,"Name":"john","Scores":["100","99","98"]}\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"unmarshaljson",children:(0,r.jsx)(n.code,{children:"UnmarshalJSON"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"UnmarshalJSON"})," implements the ",(0,r.jsx)(n.code,{children:"UnmarshalJSON"})," interface of ",(0,r.jsx)(n.code,{children:"json.Unmarshal"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) UnmarshalJSON(b []byte) error\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_UnmarshalJSON() {\n      b := []byte(`{"Id":1,"Name":"john","Scores":["100","99","98"]}`)\n      type Student struct {\n          Id     int\n          Name   string\n          Scores *gset.StrSet\n      }\n      s := Student{}\n      json.Unmarshal(b, &s)\n      fmt.Println(s)\n\n      // May Output:\n      // {1 john "99","98","100"}\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"unmarshalvalue",children:(0,r.jsx)(n.code,{children:"UnmarshalValue"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Description: ",(0,r.jsx)(n.code,{children:"UnmarshalValue"})," implements the internal unified setting interface of the ",(0,r.jsx)(n.code,{children:"goframe"})," framework. It initializes the current object with an ",(0,r.jsx)(n.code,{children:"interface{}"})," type parameter, the usage logic of which is determined by the implementation method of this interface."]}),"\n",(0,r.jsx)(n.li,{children:"Signature:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func (set *StrSet) UnmarshalValue(value interface{}) (err error)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ExampleStrSet_UnmarshalValue() {\n      b := []byte(`{"Id":1,"Name":"john","Scores":["100","99","98"]}`)\n      type Student struct {\n          Id     int\n          Name   string\n          Scores *gset.StrSet\n      }\n      s := Student{}\n      json.Unmarshal(b, &s)\n      fmt.Println(s)\n\n      // May Output:\n      // {1 john "99","98","100"}\n}\n'})})]})}function h(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return c},a:function(){return l}});var s=t(667294);let r={},i=s.createContext(r);function l(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);