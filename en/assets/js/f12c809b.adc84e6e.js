"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["49159"],{585256:function(e,n,s){s.r(n),s.d(n,{metadata:()=>o,contentTitle:()=>i,default:()=>d,assets:()=>a,toc:()=>l,frontMatter:()=>c});var o=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u8FDB\u7A0B\u7BA1\u7406-gproc/\u8FDB\u7A0B\u7BA1\u7406-\u57FA\u672C\u4F7F\u7528","title":"Process - Usage","description":"Process management under the GoFrame framework, including how to execute Shell commands, determine the relationship between the main process and the subprocess, and the basic usage of multi-process management. Demonstrates the use of the gproc package through example code, such as creating subprocesses, managing existing processes, and implementing monitoring and control of specific processes in a Linux environment.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u8FDB\u7A0B\u7BA1\u7406-gproc/\u8FDB\u7A0B\u7BA1\u7406-\u57FA\u672C\u4F7F\u7528.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u8FDB\u7A0B\u7BA1\u7406-gproc","slug":"/docs/components/os-gproc-example","permalink":"/en/docs/components/os-gproc-example","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u8FDB\u7A0B\u7BA1\u7406-gproc/\u8FDB\u7A0B\u7BA1\u7406-\u57FA\u672C\u4F7F\u7528.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/components/os-gproc-example","title":"Process - Usage","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","GoFrame framework","process management","Shell commands","main process","subprocess","gproc","multi-process management","golang","programming examples"],"description":"Process management under the GoFrame framework, including how to execute Shell commands, determine the relationship between the main process and the subprocess, and the basic usage of multi-process management. Demonstrates the use of the gproc package through example code, such as creating subprocesses, managing existing processes, and implementing monitoring and control of specific processes in a Linux environment."},"sidebar":"mainSidebar","previous":{"title":"Process","permalink":"/en/docs/components/os-gproc"},"next":{"title":"Process - Communication","permalink":"/en/docs/components/os-gproc-communication-between-processes"}}'),t=s("785893"),r=s("250065");let c={slug:"/docs/components/os-gproc-example",title:"Process - Usage",sidebar_position:0,hide_title:!0,keywords:["GoFrame","GoFrame framework","process management","Shell commands","main process","subprocess","gproc","multi-process management","golang","programming examples"],description:"Process management under the GoFrame framework, including how to execute Shell commands, determine the relationship between the main process and the subprocess, and the basic usage of multi-process management. Demonstrates the use of the gproc package through example code, such as creating subprocesses, managing existing processes, and implementing monitoring and control of specific processes in a Linux environment."},i=void 0,a={},l=[{value:"Execute Shell Commands",id:"execute-shell-commands",level:2},{value:"Main Process and Subprocess",id:"main-process-and-subprocess",level:2},{value:"Multi-process Management",id:"multi-process-management",level:2}];function m(e){let n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"execute-shell-commands",children:"Execute Shell Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/os/gctx"\n    "github.com/gogf/gf/v2/os/gproc"\n)\n\nfunc main() {\n    r, err := gproc.ShellExec(gctx.New(), `sleep 3; echo "hello gf!";`)\n    fmt.Println("result:", r)\n    fmt.Println(err)\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"After execution, you can see that the program waits for 3 seconds, and the output result is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"result: hello gf!\n\n<nil>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"main-process-and-subprocess",children:"Main Process and Subprocess"}),"\n",(0,t.jsxs)(n.p,{children:["Processes created by the ",(0,t.jsx)(n.code,{children:"gproc.Manager"})," object are marked as subprocesses by default. In a subprocess program, you can use the ",(0,t.jsx)(n.code,{children:"gproc.IsChild()"})," method to determine if it is a subprocess."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "os"\n    "time"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gctx"\n    "github.com/gogf/gf/v2/os/gproc"\n)\n\nfunc main() {\n    var ctx = gctx.New()\n    if gproc.IsChild() {\n        g.Log().Printf(ctx, "%d: Hi, I am child, waiting 3 seconds to die", gproc.Pid())\n        time.Sleep(time.Second)\n        g.Log().Printf(ctx, "%d: 1", gproc.Pid())\n        time.Sleep(time.Second)\n        g.Log().Printf(ctx, "%d: 2", gproc.Pid())\n        time.Sleep(time.Second)\n        g.Log().Printf(ctx, "%d: 3", gproc.Pid())\n    } else {\n        m := gproc.NewManager()\n        p := m.NewProcess(os.Args[0], os.Args, os.Environ())\n        p.Start(ctx)\n        p.Wait()\n        g.Log().Printf(ctx, "%d: child died", gproc.Pid())\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"After execution, the terminal prints the following result:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"2018-05-18 14:35:41.360 28285: Hi, I am child, waiting 3 seconds to die\n2018-05-18 14:35:42.361 28285: 1\n2018-05-18 14:35:43.361 28285: 2\n2018-05-18 14:35:44.361 28285: 3\n2018-05-18 14:35:44.362 28278: child died\n"})}),"\n",(0,t.jsx)(n.h2,{id:"multi-process-management",children:"Multi-process Management"}),"\n",(0,t.jsxs)(n.p,{children:["In addition to creating subprocesses and managing them, ",(0,t.jsx)(n.code,{children:"gproc"})," can also manage other processes not created by itself. ",(0,t.jsx)(n.code,{children:"gproc"})," can manage multiple processes simultaneously. Here we demonstrate the management function with a single process as an example."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["We use the ",(0,t.jsx)(n.code,{children:"gedit"})," software (a commonly used text editor on Linux) to open a file at random. In the process, we see that the process ID of this gedit is ",(0,t.jsx)(n.code,{children:"28536"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"    $ ps aux | grep gedit\n    john  28536  3.6  0.6 946208 56412 ?  Sl  14:39  0:00 gedit /home/john/Documents/text\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Our program is as follows:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n       "fmt"\n\n       "github.com/gogf/gf/v2/os/gproc"\n)\n\nfunc main() {\n       pid := 28536\n       m := gproc.NewManager()\n       m.AddProcess(pid)\n       m.KillAll()\n       m.WaitAll()\n       fmt.Printf("%d was killed\\n", pid)\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["After execution, ",(0,t.jsx)(n.code,{children:"gedit"})," is closed, and the terminal output is:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"28536 was killed\n"})})]})}function d(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return i},a:function(){return c}});var o=s(667294);let t={},r=o.createContext(t);function c(e){let n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);