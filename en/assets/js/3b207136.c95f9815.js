"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["72756"],{943227:function(e,t,n){n.r(t),n.d(t,{metadata:()=>i,contentTitle:()=>a,default:()=>h,assets:()=>d,toc:()=>c,frontMatter:()=>s});var i=JSON.parse('{"id":"docs/WEB\u670D\u52A1\u5F00\u53D1/\u63A5\u53E3\u6587\u6863/\u63A5\u53E3\u6587\u6863-OpenAPIv3","title":"API Document - OpenAPIv3","description":"Use the OpenAPIv3 protocol in the GoFrame framework to standardize the generation of API documentation. By embedding the g.Meta metadata structure, you can automatically generate API information with protocol tags. Additionally, the article shows how to customize extension tags and manually improve the API documentation.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/WEB\u670D\u52A1\u5F00\u53D1/\u63A5\u53E3\u6587\u6863/\u63A5\u53E3\u6587\u6863-OpenAPIv3.md","sourceDirName":"docs/WEB\u670D\u52A1\u5F00\u53D1/\u63A5\u53E3\u6587\u6863","slug":"/docs/web/api-document-openapiv3","permalink":"/en/docs/web/api-document-openapiv3","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/WEB\u670D\u52A1\u5F00\u53D1/\u63A5\u53E3\u6587\u6863/\u63A5\u53E3\u6587\u6863-OpenAPIv3.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732541616000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/web/api-document-openapiv3","title":"API Document - OpenAPIv3","sidebar_position":0,"hide_title":true,"keywords":["OpenAPIv3","GoFrame","API Documentation","Standard Routing","g.Meta","swagger","API","Framework","Metadata","Protocol"],"description":"Use the OpenAPIv3 protocol in the GoFrame framework to standardize the generation of API documentation. By embedding the g.Meta metadata structure, you can automatically generate API information with protocol tags. Additionally, the article shows how to customize extension tags and manually improve the API documentation."},"sidebar":"mainSidebar","previous":{"title":"API Document","permalink":"/en/docs/web/api-document"},"next":{"title":"API Document - Custom UI","permalink":"/en/docs/web/api-document-swagger-ui"}}'),o=n("785893"),r=n("250065");let s={slug:"/docs/web/api-document-openapiv3",title:"API Document - OpenAPIv3",sidebar_position:0,hide_title:!0,keywords:["OpenAPIv3","GoFrame","API Documentation","Standard Routing","g.Meta","swagger","API","Framework","Metadata","Protocol"],description:"Use the OpenAPIv3 protocol in the GoFrame framework to standardize the generation of API documentation. By embedding the g.Meta metadata structure, you can automatically generate API information with protocol tags. Additionally, the article shows how to customize extension tags and manually improve the API documentation."},a=void 0,d={},c=[{value:"I. <code>OpenAPIv3</code>",id:"i-openapiv3",level:2},{value:"II. <code>g.Meta</code> Metadata",id:"ii-gmeta-metadata",level:2},{value:"III. Common Protocol Tags",id:"iii-common-protocol-tags",level:2},{value:"1. Basic Tags",id:"1-basic-tags",level:3},{value:"2. Extension Tags",id:"2-extension-tags",level:3},{value:"IV. Expanding <code>OpenAPIv3</code> Information",id:"iv-expanding-openapiv3-information",level:2}];function l(e){let t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"OpenAPIv3"})," protocol is mainly used in standardized routing. Before reading the introduction to the API documentation protocol, please familiarize yourself with the standardized routing: ",(0,o.jsx)(t.a,{href:"/en/docs/web/router-registering-strict-router",children:"Standard Router"})]})}),"\n",(0,o.jsxs)(t.h2,{id:"i-openapiv3",children:["I. ",(0,o.jsx)(t.code,{children:"OpenAPIv3"})]}),"\n",(0,o.jsxs)(t.p,{children:["For a detailed introduction to the ",(0,o.jsx)(t.code,{children:"OpenAPIv3"})," protocol, please refer to: ",(0,o.jsx)(t.a,{href:"https://swagger.io/specification/",children:"https://swagger.io/specification/"})]}),"\n",(0,o.jsxs)(t.h2,{id:"ii-gmeta-metadata",children:["II. ",(0,o.jsx)(t.code,{children:"g.Meta"})," Metadata"]}),"\n",(0,o.jsxs)(t.p,{children:["API metadata information can be implemented by embedding the ",(0,o.jsx)(t.code,{children:"g.Meta"})," structure in the input struct and using its attribute tags."]}),"\n",(0,o.jsxs)(t.p,{children:["For an introduction to the metadata component, please refer to the section: ",(0,o.jsx)(t.a,{href:"/en/docs/components/util-gmeta",children:"Metadata"})]}),"\n",(0,o.jsx)(t.h2,{id:"iii-common-protocol-tags",children:"III. Common Protocol Tags"}),"\n",(0,o.jsxs)(t.p,{children:["The attribute tags in input and output structs fully support the ",(0,o.jsx)(t.code,{children:"OpenAPIv3"})," protocol. Once the corresponding protocol tags are added, the generated ",(0,o.jsx)(t.code,{children:"OpenAPIv3"})," information will automatically include the attribute."]}),"\n",(0,o.jsxs)(t.p,{children:["Most tag attributes are automatically generated by the ",(0,o.jsx)(t.code,{children:"Server"})," component, and there are not many tags that developers need to set manually."]}),"\n",(0,o.jsx)(t.h3,{id:"1-basic-tags",children:"1. Basic Tags"}),"\n",(0,o.jsx)(t.p,{children:"Commonly used basic tags include:"}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Common OpenAPIv3 Tags"}),(0,o.jsx)(t.th,{children:"Description"}),(0,o.jsx)(t.th,{children:"Remarks"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"path"})}),(0,o.jsx)(t.td,{children:"Combined with the prefix at registration to form the API URI path"}),(0,o.jsxs)(t.td,{children:["Used for ",(0,o.jsx)(t.code,{children:"g.Meta"})," to mark API metadata"]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"tags"})}),(0,o.jsx)(t.td,{children:"The tag to which the API belongs for API classification"}),(0,o.jsxs)(t.td,{children:["Used for ",(0,o.jsx)(t.code,{children:"g.Meta"})," to mark API metadata"]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"method"})}),(0,o.jsxs)(t.td,{children:["The request method for the API: ",(0,o.jsx)(t.code,{children:"GET/PUT/POST/DELETE...(case insensitive)"})]}),(0,o.jsxs)(t.td,{children:["Used for ",(0,o.jsx)(t.code,{children:"g.Meta"})," to mark API metadata"]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"deprecated"})}),(0,o.jsx)(t.td,{children:"Marks the API as deprecated"}),(0,o.jsxs)(t.td,{children:["Used for ",(0,o.jsx)(t.code,{children:"g.Meta"})," to mark API metadata"]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"summary"})}),(0,o.jsx)(t.td,{children:"Brief description of the API/parameter"}),(0,o.jsxs)(t.td,{children:["Abbreviation ",(0,o.jsx)(t.code,{children:"sm"})]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"description"})}),(0,o.jsx)(t.td,{children:"Detailed description of the API/parameter"}),(0,o.jsxs)(t.td,{children:["Abbreviation ",(0,o.jsx)(t.code,{children:"dc"})]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"in"})}),(0,o.jsx)(t.td,{children:"Parameter submission method"}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"header/path/query/cookie"})})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"default"})}),(0,o.jsx)(t.td,{children:"Default value for the parameter"}),(0,o.jsxs)(t.td,{children:["Abbreviation ",(0,o.jsx)(t.code,{children:"d"})]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"mime"})}),(0,o.jsxs)(t.td,{children:["The ",(0,o.jsx)(t.code,{children:"MIME"})," type of the API, such as ",(0,o.jsx)(t.code,{children:"multipart/form-data"}),", generally set globally, defaults to ",(0,o.jsx)(t.code,{children:"application/json"}),"."]}),(0,o.jsxs)(t.td,{children:["Used for ",(0,o.jsx)(t.code,{children:"g.Meta"})," to mark API metadata"]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"type"})}),(0,o.jsxs)(t.td,{children:["The type of the parameter, generally not needed, special parameters may require manual setting, such as ",(0,o.jsx)(t.code,{children:"file"})]}),(0,o.jsx)(t.td,{children:"Only applicable to parameter attributes"})]})]})]}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["For more tags, please refer to the standard ",(0,o.jsx)(t.code,{children:"OpenAPIv3"})," protocol: ",(0,o.jsx)(t.a,{href:"https://swagger.io/specification/",children:"https://swagger.io/specification/"})]})}),"\n",(0,o.jsx)(t.h3,{id:"2-extension-tags",children:"2. Extension Tags"}),"\n",(0,o.jsxs)(t.p,{children:["In the ",(0,o.jsx)(t.code,{children:"OpenAPI"})," specification, all tags prefixed with ",(0,o.jsx)(t.code,{children:"x-"})," are customizable extension tags by developers. Extension tags can be defined in any API or attribute using ",(0,o.jsx)(t.code,{children:"Golang struct tag"})," format, and during the generation of API documentation, they will be returned as independent fields. For example:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "github.com/gogf/gf/v2/errors/gcode"\n    "github.com/gogf/gf/v2/errors/gerror"\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\ntype GetListReq struct {\n    g.Meta `path:"/user" tags:"User" method:"get" x-group:"User/Info" summary:"Get user list with basic info."`\n    Page   int `dc:"Page number" d:"1" x-sort:"1"`\n    Size   int `dc:"Size for per page." d:"10" x-sort:"2"`\n}\ntype GetListRes struct{}\n\ntype Controller struct{}\n\nfunc (c *Controller) GetList(ctx context.Context, req *GetListReq) (res *GetListRes, err error) {\n    return nil, gerror.NewCode(gcode.CodeNotImplemented)\n}\n\nfunc main() {\n    s := g.Server()\n    s.Group("/", func(group *ghttp.RouterGroup) {\n        group.Bind(new(Controller))\n    })\n    s.SetOpenApiPath("/api.json")\n    s.SetSwaggerPath("/swagger")\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["After execution, visit the address ",(0,o.jsx)(t.a,{href:"http://127.0.0.1:8199/swagger",children:"http://127.0.0.1:8199/swagger"})," to view the ",(0,o.jsx)(t.code,{children:"swagger ui"}),", and visit ",(0,o.jsx)(t.a,{href:"http://127.0.0.1:8199/api.json",children:"http://127.0.0.1:8199/api.json"})," to view the corresponding ",(0,o.jsx)(t.code,{children:"OpenAPIv3"})," documentation. The generated ",(0,o.jsx)(t.code,{children:"OpenAPIv3"})," documentation is as follows:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'{\n    "openapi": "3.0.0",\n    "components": {\n        "schemas": {\n            "main.GetListReq": {\n                "properties": {\n                    "Page": {\n                        "default": 1,\n                        "description": "Page number",\n                        "format": "int",\n                        "properties": {},\n                        "type": "integer",\n                        "x-sort": "1"\n                    },\n                    "Size": {\n                        "default": 10,\n                        "description": "Size for per page.",\n                        "format": "int",\n                        "properties": {},\n                        "type": "integer",\n                        "x-sort": "2"\n                    }\n                },\n                "type": "object",\n                "x-group": "User/Info"\n            },\n            "main.GetListRes": {\n                "properties": {},\n                "type": "object"\n            }\n        }\n    },\n    "info": {\n        "title": "",\n        "version": ""\n    },\n    "paths": {\n        "/user": {\n            "get": {\n                "parameters": [\n                    {\n                        "description": "Page number",\n                        "in": "query",\n                        "name": "Page",\n                        "schema": {\n                            "default": 1,\n                            "description": "Page number",\n                            "format": "int",\n                            "properties": {},\n                            "type": "integer",\n                            "x-sort": "1"\n                        },\n                        "x-sort": "1"\n                    },\n                    {\n                        "description": "Size for per page.",\n                        "in": "query",\n                        "name": "Size",\n                        "schema": {\n                            "default": 10,\n                            "description": "Size for per page.",\n                            "format": "int",\n                            "properties": {},\n                            "type": "integer",\n                            "x-sort": "2"\n                        },\n                        "x-sort": "2"\n                    }\n                ],\n                "responses": {\n                    "200": {\n                        "content": {\n                            "application/json": {\n                                "schema": {\n                                    "$ref": "#/components/schemas/main.GetListRes"\n                                }\n                            }\n                        },\n                        "description": ""\n                    }\n                },\n                "summary": "Get user list with basic info.",\n                "tags": [\n                    "User"\n                ],\n                "x-group": "User/Info"\n            },\n            "x-group": "User/Info"\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"As you can see, the extension tags have been included in the API documentation."}),"\n",(0,o.jsxs)(t.h2,{id:"iv-expanding-openapiv3-information",children:["IV. Expanding ",(0,o.jsx)(t.code,{children:"OpenAPIv3"})," Information"]}),"\n",(0,o.jsxs)(t.p,{children:["The core API information has already been automatically generated. If developers want to further complete the API information, they can obtain the ",(0,o.jsx)(t.code,{children:"OpenAPIv3"})," struct object via ",(0,o.jsx)(t.code,{children:"s.GetOpenApi()"})," and manually fill in the corresponding attribute content. Let's look at an example where we design a common data structure around each API:"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:n(585391).Z+"",width:"3584",height:"2070"})}),"\n",(0,o.jsxs)(t.p,{children:["From this, we can see that with the general ",(0,o.jsx)(t.code,{children:"OpenAPIv3"})," object, we can customize its content and generate various other types of custom API documentation based on it."]})]})}function h(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},585391:function(e,t,n){n.d(t,{Z:function(){return i}});let i=n.p+"assets/images/452372a121db73abd8c5027077b3026e-87092b3e642702b6dd6c9e8e76407fc5.png"},250065:function(e,t,n){n.d(t,{Z:function(){return a},a:function(){return s}});var i=n(667294);let o={},r=i.createContext(o);function s(e){let t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);