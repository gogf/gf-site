"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["46787"],{917045:function(e,t,i){i.r(t),i.d(t,{metadata:()=>n,contentTitle:()=>c,default:()=>f,assets:()=>s,toc:()=>d,frontMatter:()=>a});var n=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u6587\u4EF6\u76D1\u63A7-gfsnotify/\u6587\u4EF6\u76D1\u63A7-\u6DFB\u52A0\u76D1\u63A7","title":"File Watching - Add","description":"Define and implement file watching functionality, using the gfsnotify library in the GoFrame framework to watch file creation, writing, deletion, renaming, and permission modification events in a specified directory. Supports recursive watching, automatically detecting changes in files within directories and subdirectories, with flexible watching options and real-time output of file event information related to the directory.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u6587\u4EF6\u76D1\u63A7-gfsnotify/\u6587\u4EF6\u76D1\u63A7-\u6DFB\u52A0\u76D1\u63A7.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u6587\u4EF6\u76D1\u63A7-gfsnotify","slug":"/docs/components/os-gfsnotify-add","permalink":"/en/docs/components/os-gfsnotify-add","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u6587\u4EF6\u76D1\u63A7-gfsnotify/\u6587\u4EF6\u76D1\u63A7-\u6DFB\u52A0\u76D1\u63A7.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/components/os-gfsnotify-add","title":"File Watching - Add","sidebar_position":0,"hide_title":true,"keywords":["Add Watch","File Watching","GoFrame Framework","gfsnotify","Recursive Watching","File Modification","Directory Watching","File Event","File Change","Watching Options"],"description":"Define and implement file watching functionality, using the gfsnotify library in the GoFrame framework to watch file creation, writing, deletion, renaming, and permission modification events in a specified directory. Supports recursive watching, automatically detecting changes in files within directories and subdirectories, with flexible watching options and real-time output of file event information related to the directory."},"sidebar":"mainSidebar","previous":{"title":"File Watching","permalink":"/en/docs/components/os-gfsnotify"},"next":{"title":"File Watching - Remove","permalink":"/en/docs/components/os-gfsnotify-remove"}}'),o=i("785893"),r=i("250065");let a={slug:"/docs/components/os-gfsnotify-add",title:"File Watching - Add",sidebar_position:0,hide_title:!0,keywords:["Add Watch","File Watching","GoFrame Framework","gfsnotify","Recursive Watching","File Modification","Directory Watching","File Event","File Change","Watching Options"],description:"Define and implement file watching functionality, using the gfsnotify library in the GoFrame framework to watch file creation, writing, deletion, renaming, and permission modification events in a specified directory. Supports recursive watching, automatically detecting changes in files within directories and subdirectories, with flexible watching options and real-time output of file event information related to the directory."},c=void 0,s={},d=[{value:"Add Watch",id:"add-watch",level:2},{value:"Recursive Watching",id:"recursive-watching",level:2}];function l(e){let t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"add-watch",children:"Add Watch"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gfsnotify"\n)\n\nfunc main() {\n    var (\n        path     = "/home/john/temp"\n        ctx      = context.Background()\n        logger   = g.Log()\n        callback = func(event *gfsnotify.Event) {\n            if event.IsCreate() {\n                logger.Debug(ctx, "Create file: ", event.Path)\n            }\n            if event.IsWrite() {\n                logger.Debug(ctx, "Write file: ", event.Path)\n            }\n            if event.IsRemove() {\n                logger.Debug(ctx, "Delete file: ", event.Path)\n            }\n            if event.IsRename() {\n                logger.Debug(ctx, "Rename file: ", event.Path)\n            }\n            if event.IsChmod() {\n                logger.Debug(ctx, "Change permissions: ", event.Path)\n            }\n            logger.Debug(ctx, event)\n        }\n    )\n    _, err := gfsnotify.Add(path, callback, gfsnotify.WatchOption{})\n    if err != nil {\n        logger.Fatal(ctx, err)\n    } else {\n        select {}\n    }\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"/home/john"})," parameter is a directory. When we create/delete/modify files in the ",(0,o.jsx)(t.code,{children:"/home/john"})," directory, ",(0,o.jsx)(t.code,{children:"gfsnotify"})," detects the file modifications and outputs the corresponding event information."]}),"\n",(0,o.jsx)(t.h2,{id:"recursive-watching",children:"Recursive Watching"}),"\n",(0,o.jsxs)(t.p,{children:["We can use ",(0,o.jsx)(t.code,{children:"gfsnotify.WatchOption"})," to set some options for watching, such as whether to enable recursive watching. By default, the ",(0,o.jsx)(t.code,{children:"Add"})," method performs recursive watching, meaning that changes to files within the directory (including those in subdirectories) will also trigger the file watching callback."]}),"\n",(0,o.jsx)(t.p,{children:"If we create new directories under the watched directory and continue to create new directories or files within them, and so on, the newly created directories or files will also be automatically watched."})]})}function f(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},250065:function(e,t,i){i.d(t,{Z:function(){return c},a:function(){return a}});var n=i(667294);let o={},r=n.createContext(o);function a(e){let t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);