"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["53254"],{531553:function(e,r,n){n.r(r),n.d(r,{metadata:()=>o,contentTitle:()=>s,default:()=>l,assets:()=>c,toc:()=>d,frontMatter:()=>a});var o=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u9519\u8BEF\u5904\u7406/\u9519\u8BEF\u5904\u7406-\u6700\u4F73\u5B9E\u8DF5","title":"Error Handling - Best Practices","description":"Effectively handle errors in the GoFrame framework, including printing stack information of error objects and correctly using the Wrap method to encapsulate error objects, avoiding duplication of error messages. Through specific code examples, demonstrate how to optimize error handling and improve the stability of GoFrame framework applications.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u9519\u8BEF\u5904\u7406/\u9519\u8BEF\u5904\u7406-\u6700\u4F73\u5B9E\u8DF5.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u9519\u8BEF\u5904\u7406","slug":"/docs/core/gerror-practice","permalink":"/en/docs/core/gerror-practice","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u9519\u8BEF\u5904\u7406/\u9519\u8BEF\u5904\u7406-\u6700\u4F73\u5B9E\u8DF5.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732411910000,"sidebarPosition":5,"frontMatter":{"slug":"/docs/core/gerror-practice","title":"Error Handling - Best Practices","sidebar_position":5,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","Error Handling","Best Practices","Error Stack","Wrap Method","Error Object","Golang","Print Error","Error Message"],"description":"Effectively handle errors in the GoFrame framework, including printing stack information of error objects and correctly using the Wrap method to encapsulate error objects, avoiding duplication of error messages. Through specific code examples, demonstrate how to optimize error handling and improve the stability of GoFrame framework applications."},"sidebar":"mainSidebar","previous":{"title":"Error Handling - Other Features","permalink":"/en/docs/core/gerror-other"},"next":{"title":"Error Handling - Performance","permalink":"/en/docs/core/gerror-benchmark"}}'),t=n("785893"),i=n("250065");let a={slug:"/docs/core/gerror-practice",title:"Error Handling - Best Practices",sidebar_position:5,hide_title:!0,keywords:["GoFrame","GoFrame Framework","Error Handling","Best Practices","Error Stack","Wrap Method","Error Object","Golang","Print Error","Error Message"],description:"Effectively handle errors in the GoFrame framework, including printing stack information of error objects and correctly using the Wrap method to encapsulate error objects, avoiding duplication of error messages. Through specific code examples, demonstrate how to optimize error handling and improve the stability of GoFrame framework applications."},s=void 0,c={},d=[{value:"Print Stack Information in Error Objects",id:"print-stack-information-in-error-objects",level:2},{value:"Avoid Repeated Error Message Printing When Using the Wrap Method",id:"avoid-repeated-error-message-printing-when-using-the-wrap-method",level:2}];function g(e){let r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"print-stack-information-in-error-objects",children:"Print Stack Information in Error Objects"}),"\n",(0,t.jsxs)(r.p,{children:["When printing error objects via ",(0,t.jsx)(r.code,{children:"fmt/glog"})," or other packages, stack information is not output by default. For example:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/encoding/gjson"\n)\n\nfunc main() {\n    _, err := gjson.Encode(func() {})\n    fmt.Printf("err: %v", err)\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"After execution, the terminal output:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-html",children:"err: json.Marshal failed: json: unsupported type: func()\n"})}),"\n",(0,t.jsxs)(r.p,{children:["To print stack information from an error object, use the ",(0,t.jsx)(r.code,{children:"%+v"})," formatting option. For example:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/encoding/gjson"\n)\n\nfunc main() {\n    _, err := gjson.Encode(func() {})\n    fmt.Printf("err: %+v", err)\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"After execution, the terminal output:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-text",children:"err: json.Marshal failed: json: unsupported type: func()\n1. json.Marshal failed\n   1).  github.com/gogf/gf/v2/internal/json.Marshal\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/internal/json/json.go:30\n   2).  github.com/gogf/gf/v2/encoding/gjson.Encode\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/encoding/gjson/gjson_stdlib_json_util.go:41\n   3).  main.main\n        /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/.test/main.go:10\n2. json: unsupported type: func()\n"})}),"\n",(0,t.jsx)(r.h2,{id:"avoid-repeated-error-message-printing-when-using-the-wrap-method",children:"Avoid Repeated Error Message Printing When Using the Wrap Method"}),"\n",(0,t.jsxs)(r.p,{children:["Do not print the error object into the error message when ",(0,t.jsx)(r.code,{children:"Wrap"}),"ping an error object, as ",(0,t.jsx)(r.code,{children:"Wrap"})," inherently encapsulates the target error object within the newly created error object. Including the error again in the error string can cause duplications when printing the error stack. For instance (the stack information is not printed for simplification):"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/encoding/gjson"\n    "github.com/gogf/gf/v2/errors/gerror"\n)\n\nfunc main() {\n    _, err1 := gjson.Encode(func() {})\n    err2 := gerror.Wrapf(err1, `error occurred: %v`, err1)\n    fmt.Printf("err: %v", err2)\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"After execution, the terminal output shows duplicate error messages:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-text",children:"err: error occurred: json.Marshal failed: json: unsupported type: func(): json.Marshal failed: json: unsupported type: func()\n"})}),"\n",(0,t.jsx)(r.p,{children:"Let's fix the above code example as shown below:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/encoding/gjson"\n    "github.com/gogf/gf/v2/errors/gerror"\n)\n\nfunc main() {\n    _, err1 := gjson.Encode(func() {})\n    err2 := gerror.Wrap(err1, `error occurred`)\n    fmt.Printf("err: %v", err2)\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"After execution, the terminal output:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-text",children:"err: error occurred: json.Marshal failed: json: unsupported type: func()\n"})})]})}function l(e={}){let{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},250065:function(e,r,n){n.d(r,{Z:function(){return s},a:function(){return a}});var o=n(667294);let t={},i=o.createContext(t);function a(e){let r=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(i.Provider,{value:r},e.children)}}}]);