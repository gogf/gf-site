"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["93257"],{249271:function(e,n,i){i.r(n),i.d(n,{metadata:()=>o,contentTitle:()=>t,default:()=>u,assets:()=>l,toc:()=>d,frontMatter:()=>r});var o=JSON.parse('{"id":"docs/\u6846\u67B6\u8BBE\u8BA1/\u6A21\u5757\u5316\u8BBE\u8BA1","title":"Modular Design","description":"The principles of software modular design and reuse, with a detailed explanation of principles like Reuse/Release Equivalency, Common Closure Principle, and Common Reuse Principle. Through the GoFrame framework\'s modular design case study, emphasis is placed on the importance of maintainability and the strategy for balancing module design. Modular design helps improve development efficiency and code quality, ensuring software stability and ease of maintenance.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6846\u67B6\u8BBE\u8BA1/\u6A21\u5757\u5316\u8BBE\u8BA1.md","sourceDirName":"docs/\u6846\u67B6\u8BBE\u8BA1","slug":"/docs/design/modular","permalink":"/en/docs/design/modular","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6846\u67B6\u8BBE\u8BA1/\u6A21\u5757\u5316\u8BBE\u8BA1.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732411910000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/design/modular","title":"Modular Design","sidebar_position":0,"hide_title":true,"keywords":["Modular Design","Software Decoupling","Code Reuse","GoFrame Framework","Golang Modules","Software Development Principles","Module Reuse","Compiled Language","Monorepo Package Design","Module Aggregation"],"description":"The principles of software modular design and reuse, with a detailed explanation of principles like Reuse/Release Equivalency, Common Closure Principle, and Common Reuse Principle. Through the GoFrame framework\'s modular design case study, emphasis is placed on the importance of maintainability and the strategy for balancing module design. Modular design helps improve development efficiency and code quality, ensuring software stability and ease of maintenance."},"sidebar":"mainSidebar","previous":{"title":"Framework Design","permalink":"/en/docs/design"},"next":{"title":"Unified Framework Design","permalink":"/en/docs/design/unified"}}'),s=i("785893"),a=i("250065");let r={slug:"/docs/design/modular",title:"Modular Design",sidebar_position:0,hide_title:!0,keywords:["Modular Design","Software Decoupling","Code Reuse","GoFrame Framework","Golang Modules","Software Development Principles","Module Reuse","Compiled Language","Monorepo Package Design","Module Aggregation"],description:"The principles of software modular design and reuse, with a detailed explanation of principles like Reuse/Release Equivalency, Common Closure Principle, and Common Reuse Principle. Through the GoFrame framework's modular design case study, emphasis is placed on the importance of maintainability and the strategy for balancing module design. Modular design helps improve development efficiency and code quality, ensuring software stability and ease of maintenance."},t=void 0,l={},d=[{value:"I. What is a Module",id:"i-what-is-a-module",level:2},{value:"II. Goals of Modularity",id:"ii-goals-of-modularity",level:2},{value:"III. Principles of Module Reuse",id:"iii-principles-of-module-reuse",level:2},{value:"<code>REP</code> Reuse/Release Equivalency Principle",id:"rep-reuserelease-equivalency-principle",level:3},{value:"<code>CCP</code> Common Closure Principle",id:"ccp-common-closure-principle",level:3},{value:"<code>CRP</code> Common Reuse Principle",id:"crp-common-reuse-principle",level:3},{value:"Competition Between Reuse Principles",id:"competition-between-reuse-principles",level:3},{value:"IV. Framework Module Design",id:"iv-framework-module-design",level:2},{value:"Monorepo Package Design",id:"monorepo-package-design",level:3},{value:"Module Aggregation Design",id:"module-aggregation-design",level:3},{value:"V. Common FAQs",id:"v-common-faqs",level:2},{value:"1. Although each module is designed with low coupling, even when modules can be selectively included, you still have to download the complete framework code.",id:"1-although-each-module-is-designed-with-low-coupling-even-when-modules-can-be-selectively-included-you-still-have-to-download-the-complete-framework-code",level:3},{value:"2. Will the release frequency of the framework increase if the version change of any module in the framework triggers a framework release?",id:"2-will-the-release-frequency-of-the-framework-increase-if-the-version-change-of-any-module-in-the-framework-triggers-a-framework-release",level:3},{value:"3. The framework aggregates and maintains core universal modules; what constitutes a core universal module?",id:"3-the-framework-aggregates-and-maintains-core-universal-modules-what-constitutes-a-core-universal-module",level:3},{value:"4. Since the framework includes many modules, with limited human resources, I believe each module couldn&#39;t be better than individual single-package projects on GitHub.",id:"4-since-the-framework-includes-many-modules-with-limited-human-resources-i-believe-each-module-couldnt-be-better-than-individual-single-package-projects-on-github",level:3},{value:"5. Because the framework includes numerous modules, I think the performance of each module is generally not high.",id:"5-because-the-framework-includes-numerous-modules-i-think-the-performance-of-each-module-is-generally-not-high",level:3}];function c(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["In this chapter, we will first discuss some design and reuse principles of modularity in software design, and then introduce the modular design of the ",(0,s.jsx)(n.code,{children:"GoFrame"})," framework to better understand the philosophy behind ",(0,s.jsx)(n.code,{children:"GoFrame's"})," modular design."]}),"\n",(0,s.jsx)(n.h2,{id:"i-what-is-a-module",children:"I. What is a Module"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:"module"}),", also known as a ",(0,s.jsx)(n.strong,{children:"component"}),", is a unit of encapsulation for reusable functionality within a software system. The concept of a module may vary slightly at different levels of software architecture. At the development framework level, a module is the smallest unit of encapsulation for a specific type of functional logic. In the ",(0,s.jsx)(n.code,{children:"Golang"})," codebase, we can also refer to a ",(0,s.jsx)(n.code,{children:"package"})," as a module."]}),"\n",(0,s.jsx)(n.h2,{id:"ii-goals-of-modularity",children:"II. Goals of Modularity"}),"\n",(0,s.jsxs)(n.p,{children:["The purpose of modular design in software is to achieve as much ",(0,s.jsx)(n.strong,{children:"decoupling"})," and ",(0,s.jsx)(n.strong,{children:"reuse"})," of software functional logic as possible, with the ultimate goal of ensuring the efficiency and quality of software development and maintenance."]}),"\n",(0,s.jsx)(n.h2,{id:"iii-principles-of-module-reuse",children:"III. Principles of Module Reuse"}),"\n",(0,s.jsxs)(n.h3,{id:"rep-reuserelease-equivalency-principle",children:[(0,s.jsx)(n.code,{children:"REP"})," Reuse/Release Equivalency Principle"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Reuse/Release Equivalency Principle"})," (",(0,s.jsx)(n.code,{children:"Reuse/Release Equivalency Principle"}),"): The smallest granularity of software reuse should be equivalent to the smallest granularity of its release."]}),"\n",(0,s.jsx)(n.p,{children:"In simple terms, if you want to reuse a piece of code, make it a separate module."}),"\n",(0,s.jsxs)(n.h3,{id:"ccp-common-closure-principle",children:[(0,s.jsx)(n.code,{children:"CCP"})," Common Closure Principle"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Common Closure Principle"})," (",(0,s.jsx)(n.code,{children:"Common Closure Principle"}),"): Classes that are modified for the same purpose should be placed in the same module."]}),"\n",(0,s.jsxs)(n.p,{children:["For most applications, the importance of ",(0,s.jsx)(n.strong,{children:"maintainability"})," far outweighs ",(0,s.jsx)(n.strong,{children:"reusability"}),". Code changes caused by the same reasons are best kept within the same module. If dispersed across multiple modules, the cost of development, submission, and deployment will increase."]}),"\n",(0,s.jsxs)(n.h3,{id:"crp-common-reuse-principle",children:[(0,s.jsx)(n.code,{children:"CRP"})," Common Reuse Principle"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Common Reuse Principle"})," (",(0,s.jsx)(n.code,{children:"Common Reuse Principle"}),"): Do not force a module to depend on things it does not need."]}),"\n",(0,s.jsx)(n.p,{children:"You might have experienced integrating module A, but module A depends on modules B and C. Even if you don't need modules B and C at all, you have to integrate them. This is because you're only using a portion of module A's capabilities, and the additional capabilities of module A bring extra dependencies. If following the Common Reuse Principle, you need to split A, retaining only the parts you need."}),"\n",(0,s.jsx)(n.h3,{id:"competition-between-reuse-principles",children:"Competition Between Reuse Principles"}),"\n",(0,s.jsxs)(n.p,{children:["There is a ",(0,s.jsx)(n.strong,{children:"competition"})," between the principles of ",(0,s.jsx)(n.code,{children:"REP"}),", ",(0,s.jsx)(n.code,{children:"CCP"}),", and ",(0,s.jsx)(n.code,{children:"CRP"}),". ",(0,s.jsx)(n.code,{children:"REP"})," and ",(0,s.jsx)(n.code,{children:"CCP"})," are ",(0,s.jsx)(n.strong,{children:"adhesive principles"}),", which make modules larger, while ",(0,s.jsx)(n.code,{children:"CRP"})," is an ",(0,s.jsx)(n.strong,{children:"exclusive principle"}),", which makes modules smaller. Adhering to ",(0,s.jsx)(n.code,{children:"REP"})," and ",(0,s.jsx)(n.code,{children:"CCP"})," while ignoring ",(0,s.jsx)(n.code,{children:"CRP"})," will lead to dependencies on many unused modules and classes, resulting in your module undergoing too many unnecessary releases due to changes in these modules or classes; adhering to ",(0,s.jsx)(n.code,{children:"REP"})," and ",(0,s.jsx)(n.code,{children:"CRP"})," while ignoring ",(0,s.jsx)(n.code,{children:"CCP"}),", because the modules are split too narrowly, a change request might require changing ",(0,s.jsx)(n.code,{children:"n"})," modules, incurring significant costs."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"image",src:i(834664).Z+"",width:"722",height:"573"})}),"\n",(0,s.jsx)(n.p,{children:"Figure 2. Tension Diagram of Competition Between Module Reuse Principles"}),"\n",(0,s.jsxs)(n.p,{children:["A competent architect should be able to locate the most suitable position within the tension triangle region for the current state of the development team. For example, in the early stages of a project, ",(0,s.jsx)(n.code,{children:"CCP"})," is more important than ",(0,s.jsx)(n.code,{children:"REP"}),", and as the project develops, this optimal position should be constantly adjusted."]}),"\n",(0,s.jsx)(n.h2,{id:"iv-framework-module-design",children:"IV. Framework Module Design"}),"\n",(0,s.jsx)(n.p,{children:"After the introduction of module design principles and reuse principles, we should have a general understanding of the principles of module development and management. Let's continue with the introduction of the framework's modular design, which will be relatively easy to understand."}),"\n",(0,s.jsx)(n.h3,{id:"monorepo-package-design",children:"Monorepo Package Design"}),"\n",(0,s.jsxs)(n.p,{children:["According to the ",(0,s.jsx)(n.code,{children:"REP"})," principle, we understand that a reusable module supports independent version management, and such is the case for monorepo package design. There are many such monorepo packages in ",(0,s.jsx)(n.code,{children:"Golang"}),", where each package is an independent module. According to the ",(0,s.jsx)(n.code,{children:"CRP"})," principle, a monorepo package can be further refined and decoupled. Let's take a scenario of developing complex business projects, with common package dependencies like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"module business\n\ngo 1.16\n\nrequire (\n    business.com/golang/strings v1.0.0\n    business.com/golang/config v1.15.0\n    business.com/golang/container v1.1.0\n    business.com/golang/encoding v1.2.0\n    business.com/golang/files v1.2.1\n    business.com/golang/cache v1.7.3\n    business.com/framework/utils v1.30.1\n    github.com/pkg/errors v0.9.0\n    github.com/goorm/orm v1.2.1\n    github.com/goredis/redis v1.7.4\n    github.com/gokafka/kafka v0.1.0\n    github.com/gometrics/metrics v0.3.5\n    github.com/gotracing/tracing v0.8.2\n    github.com/gohttp/http v1.18.1\n    github.com/google/grpc v1.16.1\n    github.com/smith/env v1.0.2\n    github.com/htbj/command v1.1.1\n    github.com/kmlevel1/pool v1.1.4\n    github.com/anolog/logging v1.16.2\n    github.com/bgses123/session v1.5.1\n    github.com/gomytmp/template v1.3.4\n    github.com/govalidation/validate v1.19.2\n    github.com/yetme1/goi18n v0.10.0\n    github.com/convman/convert v1.20.0\n    github.com/google/uuid v1.1.2\n    // ...\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"The module dependencies in the example are typical universal modules, commonly found in most business projects. The module addresses are fictional for demonstration purposes and may not actually exist."}),"\n",(0,s.jsxs)(n.p,{children:["For those who have developed slightly complex business projects using ",(0,s.jsx)(n.code,{children:"Golang"}),", such scenarios should be familiar. A typical software company often has at least hundreds of such projects, and the real module dependency relationships are far more complex than those in the example. In ",(0,s.jsx)(n.code,{children:"Golang"})," project development, maintaining module dependencies is a significant challenge, and we often encounter pain points, including:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Numerous modules achieving the same functional logic, increasing selection cost"}),"\n",(0,s.jsx)(n.li,{children:"Excessive module dependencies affecting a project's overall stability"}),"\n",(0,s.jsx)(n.li,{children:"Excessive module dependencies causing confusion over whether to upgrade these modules"}),"\n",(0,s.jsxs)(n.li,{children:["Modules being scattered in design, lacking a unified structure. Refer to the section: ",(0,s.jsx)(n.a,{href:"/en/docs/design/unified",children:"Unified Framework Design"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"A case in point from personal experience."}),"\n",(0,s.jsx)(n.p,{children:"My company has dozens of self-developed modules, widely used across hundreds of business projects. On one occasion, we submitted bug fixes for several modules, two of which were notably critical. Immediately after, we required all business projects to upgrade their corresponding module versions with utmost caution. Of course, this wasn't a one-time instance, and similar scenarios are easy to imagine."}),"\n",(0,s.jsx)(n.p,{children:"Alternatively, we could choose not to actively push all business projects to upgrade modules; instead, projects only upgrade when encountering these bugs. Management's response to such a solution......is best imagined harmoniously."}),"\n",(0,s.jsxs)(n.p,{children:["The primary cause of such issues is often the instability of modules, which require continuous iterations and improvements. Projects using these modules are inherently coupled, and changes in these modules inevitably affect related projects. The more foundational a module is, the broader the dependency from top-layer modules and the greater the impact. But even if a module stabilizes, risks still exist. ",(0,s.jsx)(n.code,{children:"Golang's"})," standard library, widely considered stable, is continually evolving with improvements and bug fixes\u2014just fortunate not to encounter them\u2014posing relatively low risk."]}),"\n",(0,s.jsx)(n.p,{children:"Good software design isn't static but capable of rapid adaptation to changes, allowing quick improvements. Module design and management are no different. Seeking ways to promptly refine module logic and effectively maintain module dependencies is more practical and efficient than merely developing more stable functional modules."}),"\n",(0,s.jsx)(n.h3,{id:"module-aggregation-design",children:"Module Aggregation Design"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"GoFrame's"})," approach to modular management leans more towards the ",(0,s.jsx)(n.code,{children:"CCP"})," principle, valuing ",(0,s.jsx)(n.strong,{children:"maintainability"})," more than ",(0,s.jsx)(n.strong,{children:"reusability"}),". Since ",(0,s.jsx)(n.code,{children:"GoFrame"})," is considered from the perspective of ",(0,s.jsx)(n.strong,{children:"development frameworks"}),", the overall framework design is top-down rather than point-wise. As mentioned, foundational modules have a wider impact due to their extensive dependencies on top-level modules. Therefore, the framework maintains core universal modules collectively, ensuring closure and stability of foundational modules, enhancing development efficiency and maintainability, and reducing integration and maintenance costs through unified version management."]}),"\n",(0,s.jsxs)(n.p,{children:["From the standpoint of ",(0,s.jsx)(n.code,{children:"GoFrame's"})," modular design, the dependency scenario in the earlier example should resemble the following:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"module business\n\ngo 1.16\n\nrequire (\n    github.com/gogf/gf v1.16.0\n    github.com/goorm/orm v1.15.1\n    github.com/goredis/redis v1.7.4\n    github.com/gokafka/kafka v0.1.0\n    github.com/google/grpc v1.16.1\n    // ...\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"GoFrame"})," maintains only common core modules, while non-core universal modules or those with high stability are still recommended to use as monorepo packages, as advocated by ",(0,s.jsx)(n.code,{children:"REP"})," and ",(0,s.jsx)(n.code,{children:"CRP"})," principles of module reuse. Under this design pattern:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The framework's core maintains a comprehensive set of universal foundational modules, reducing the cost of choosing foundational modules."}),"\n",(0,s.jsx)(n.li,{children:"We only need to maintain a unified framework version, not dozens of module versions."}),"\n",(0,s.jsx)(n.li,{children:"We need to understand only one framework's changes, not changes across dozens of modules."}),"\n",(0,s.jsx)(n.li,{children:"Only one framework version requires upgrading, not multiple module versions."}),"\n",(0,s.jsx)(n.li,{children:"It reduces developers' cognitive load, enhances module maintainability, and makes maintaining module version consistency easier across projects."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"v-common-faqs",children:"V. Common FAQs"}),"\n",(0,s.jsx)(n.h3,{id:"1-although-each-module-is-designed-with-low-coupling-even-when-modules-can-be-selectively-included-you-still-have-to-download-the-complete-framework-code",children:"1. Although each module is designed with low coupling, even when modules can be selectively included, you still have to download the complete framework code."}),"\n",(0,s.jsxs)(n.p,{children:["This is not an issue for compiled languages, as ",(0,s.jsx)(n.strong,{children:"source file downloads at the file level are not directly related to logical coupling between modules"}),". The root cause of this issue stems from differing perspectives on understanding ",(0,s.jsx)(n.strong,{children:"compiled languages"})," versus ",(0,s.jsx)(n.strong,{children:"interpreted languages"}),". In the internet age, interpreted languages have thrived, while Golang stands distinctively popular yet unique in this era."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"image",src:i(395573).Z+"",width:"2126",height:"614"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compiled Languages"}),": (taking static compilation as an example) typically start from the ",(0,s.jsx)(n.code,{children:"main"})," package as the entry point. The compiler automatically analyzes the source code and compiles and processes resources of all logically dependent modules to ultimately generate static binary files for release. Source files, including those of dependent modules (logical dependencies), are used only during the compilation phase and are not directly relied upon for release, such as C/C++, Golang, Rust, etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Interpreted Languages"}),': typically package their own source files (or bytecode) along with the source files (or bytecode) of dependent modules for release, e.g., PHP, Java, NodeJS, Python, etc. In this case, the size of dependent module source code significantly impacts project release. Furthermore, module dependencies encoded in package configuration files result in all specified modules being included during packaging, regardless of logical dependencies. If a module contains 100,000 functions and only one function is utilized, all functions within that module are packed for release, as interpreted languages do not undergo "compile-assemble-link" stages before deployment, requiring full parsing at runtime for both source code and module dependencies. Particularly for those transitioning from PHP/Java to Go, this mindset needs adaptation.']}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-will-the-release-frequency-of-the-framework-increase-if-the-version-change-of-any-module-in-the-framework-triggers-a-framework-release",children:"2. Will the release frequency of the framework increase if the version change of any module in the framework triggers a framework release?"}),"\n",(0,s.jsxs)(n.p,{children:["Certainly, the module design of the framework considers stability factors, organizing only ",(0,s.jsx)(n.strong,{children:"common core modules"})," according to ",(0,s.jsx)(n.code,{children:"CCP"})," and avoiding specific business logic encapsulations, as such implementations add variance to framework modules."]}),"\n",(0,s.jsxs)(n.p,{children:["Under conditions ensuring a degree of stability, module version releases adhere to the framework's unified iterative development schedule. Aside from necessary ",(0,s.jsx)(n.code,{children:"hot fixes"}),", version releases happen in fixed time windows to ensure the core framework's stability. Therefore, managing module versions via aggregation does not increase the release frequency of the framework; rather, it decreases it, making module versions within the framework more stable."]}),"\n",(0,s.jsx)(n.h3,{id:"3-the-framework-aggregates-and-maintains-core-universal-modules-what-constitutes-a-core-universal-module",children:"3. The framework aggregates and maintains core universal modules; what constitutes a core universal module?"}),"\n",(0,s.jsxs)(n.p,{children:["First, they are ",(0,s.jsx)(n.strong,{children:"foundational modules"}),", typically residing at the lowest level of the module dependency chain and having the greatest stability impact on projects."]}),"\n",(0,s.jsx)(n.p,{children:"Second, the vast majority of projects (the 80-20 rule) would rely on common foundational modules, which can be considered core modules."}),"\n",(0,s.jsxs)(n.p,{children:["Finally, these modules do not encompass specific ",(0,s.jsx)(n.strong,{children:"business logic implementations"}),". Counter-examples include modules related to WeChat official accounts/weapp, CMS/CRM, blockchain, etc., which are specific business logic packages."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"A fully accurate assessment of module universality is unattainable. To keep the core concise, the framework adopts a conservative stance and iteratively adjusts based on actual needs."})}),"\n",(0,s.jsx)(n.p,{children:"Here is a reference for module layering:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"image",src:i(737256).Z+"",width:"602",height:"722"})}),"\n",(0,s.jsx)(n.p,{children:"Reference for Module Layering"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Business Implementation Modules"}),": Logic implementation for specific business projects, including further code layering of the business project."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Common Business Modules"}),": Reusable business logic encapsulations, e.g., WeChat official accounts/weapp, CMS/CRM, blockchain-related logic encapsulation modules."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Universal Base Modules"}),": Foundational modules not provided or extended based on the standard library, such as configuration, validation, caching, ORM, I18N, etc."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Standard Base Modules"}),": Golang's standard library."]}),"\n",(0,s.jsx)(n.h3,{id:"4-since-the-framework-includes-many-modules-with-limited-human-resources-i-believe-each-module-couldnt-be-better-than-individual-single-package-projects-on-github",children:"4. Since the framework includes many modules, with limited human resources, I believe each module couldn't be better than individual single-package projects on GitHub."}),"\n",(0,s.jsx)(n.p,{children:"Doing something less frequently doesn't inherently ensure better quality; there's no direct causality between the two."}),"\n",(0,s.jsx)(n.h3,{id:"5-because-the-framework-includes-numerous-modules-i-think-the-performance-of-each-module-is-generally-not-high",children:"5. Because the framework includes numerous modules, I think the performance of each module is generally not high."}),"\n",(0,s.jsx)(n.p,{children:"Haha."})]})}function u(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},395573:function(e,n,i){i.d(n,{Z:function(){return o}});let o=i.p+"assets/images/7b9d58a737b0340d95454312801c3c0e-b8cb2961af5c7a177ac7118eaedb225e.png"},834664:function(e,n,i){i.d(n,{Z:function(){return o}});let o=i.p+"assets/images/bcfbb9253aefc770b284cc0c67ae68b8-71878511e0a3d271a2fd316e2ed94e76.png"},737256:function(e,n,i){i.d(n,{Z:function(){return o}});let o=i.p+"assets/images/f48e08aa60bb126bb41953bcbe98b438-1b5831687661321f35f0f20a8d9ccfcc.png"},250065:function(e,n,i){i.d(n,{Z:function(){return t},a:function(){return r}});var o=i(667294);let s={},a=o.createContext(s);function r(e){let n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);