"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["34061"],{300920:function(e,r,t){t.r(r),t.d(r,{metadata:()=>n,contentTitle:()=>a,default:()=>u,assets:()=>d,toc:()=>l,frontMatter:()=>i});var n=JSON.parse('{"id":"docs/WEB\u670D\u52A1\u5F00\u53D1/\u8BF7\u6C42\u8F93\u5165/\u8BF7\u6C42\u8F93\u5165-\u8BF7\u6C42\u6821\u9A8C","title":"Request - Validation","description":"In the GoFrame framework, request input validation is implemented for struct attributes through the v tag. In the example, we explain how to use the gvalid module for validation, how to set and parse the registered request data structure, and how to handle validation errors. We also demonstrate how to test API responses and error messages using curl. Additionally, we provide usage suggestions for different versions to improve user experience and code usability.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/WEB\u670D\u52A1\u5F00\u53D1/\u8BF7\u6C42\u8F93\u5165/\u8BF7\u6C42\u8F93\u5165-\u8BF7\u6C42\u6821\u9A8C.md","sourceDirName":"docs/WEB\u670D\u52A1\u5F00\u53D1/\u8BF7\u6C42\u8F93\u5165","slug":"/docs/web/request-validation","permalink":"/en/docs/web/request-validation","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/WEB\u670D\u52A1\u5F00\u53D1/\u8BF7\u6C42\u8F93\u5165/\u8BF7\u6C42\u8F93\u5165-\u8BF7\u6C42\u6821\u9A8C.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732541616000,"sidebarPosition":2,"frontMatter":{"slug":"/docs/web/request-validation","title":"Request - Validation","sidebar_position":2,"hide_title":true,"keywords":["GoFrame","Request Validation","GoFrame Framework","gvalid","Struct Validation","Route Registration","Request Parameters","Error Handling","Register Request","Data Validation"],"description":"In the GoFrame framework, request input validation is implemented for struct attributes through the v tag. In the example, we explain how to use the gvalid module for validation, how to set and parse the registered request data structure, and how to handle validation errors. We also demonstrate how to test API responses and error messages using curl. Additionally, we provide usage suggestions for different versions to improve user experience and code usability."},"sidebar":"mainSidebar","previous":{"title":"Request - Parameter Binding","permalink":"/en/docs/web/request-struct-converting"},"next":{"title":"Request - JSON/XML","permalink":"/en/docs/web/request-json-xml-parameter"}}'),s=t("785893"),o=t("250065");let i={slug:"/docs/web/request-validation",title:"Request - Validation",sidebar_position:2,hide_title:!0,keywords:["GoFrame","Request Validation","GoFrame Framework","gvalid","Struct Validation","Route Registration","Request Parameters","Error Handling","Register Request","Data Validation"],description:"In the GoFrame framework, request input validation is implemented for struct attributes through the v tag. In the example, we explain how to use the gvalid module for validation, how to set and parse the registered request data structure, and how to handle validation errors. We also demonstrate how to test API responses and error messages using curl. Additionally, we provide usage suggestions for different versions to improve user experience and code usability."},a=void 0,d={},l=[{value:"Example 1, Basic Usage",id:"example-1-basic-usage",level:2},{value:"Example 2, Validation Error Handling",id:"example-2-validation-error-handling",level:3}];function c(e){let r={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"Request"})," object offers excellent request validation capabilities by binding the ",(0,s.jsx)(r.code,{children:"v"})," tag to struct attributes. Since the underlying validation functionality is achieved through the ",(0,s.jsx)(r.code,{children:"gvalid"})," module, for more detailed validation rules and introduction, please refer to the ",(0,s.jsx)(r.a,{href:"/en/docs/core/gvalid-parameter-type-struct-example",children:"Struct Validation - Example"})," section."]}),"\n",(0,s.jsx)(r.admonition,{type:"warning",children:(0,s.jsxs)(r.p,{children:["The way of transforming request parameters to structs in the example code below applies to framework ",(0,s.jsx)(r.code,{children:"v1"}),". From version ",(0,s.jsx)(r.code,{children:"v2"}),", it is recommended to implement automated parameter struct transformation and validation through standard routes: ",(0,s.jsx)(r.a,{href:"/en/docs/web/router-registering-strict-router",children:"Standard Router"})]})}),"\n",(0,s.jsx)(r.h2,{id:"example-1-basic-usage",children:"Example 1, Basic Usage"}),"\n",(0,s.jsxs)(r.p,{children:["We will adjust the previous example to add the ",(0,s.jsx)(r.code,{children:"v"})," validation tag."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n)\n\n// RegisterReq Register request data structure\ntype RegisterReq struct {\n    Name  string `p:"username"  v:"required|length:4,30#Please enter an account|Account length should be between {min} and {max} characters"`\n    Pass  string `p:"password1" v:"required|length:6,30#Please enter the password|Password length is insufficient"`\n    Pass2 string `p:"password2" v:"required|length:6,30|same:password1#Please confirm the password|Password length is insufficient|Passwords do not match"`\n}\n\n// RegisterRes Register response data structure\ntype RegisterRes struct {\n    Code  int         `json:"code"`\n    Error string      `json:"error"`\n    Data  interface{} `json:"data"`\n}\n\nfunc main() {\n    s := g.Server()\n    s.Group("/", func(group *ghttp.RouterGroup) {\n        group.ALL("/register", func(r *ghttp.Request) {\n            var req *RegisterReq\n            if err := r.Parse(&req); err != nil {\n                r.Response.WriteJsonExit(RegisterRes{\n                    Code:  1,\n                    Error: err.Error(),\n                })\n            }\n            // ...\n            r.Response.WriteJsonExit(RegisterRes{\n                Data: req,\n            })\n        })\n    })\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["In this example, we define two structs: ",(0,s.jsx)(r.code,{children:"RegisterReq"})," for receiving parameters and ",(0,s.jsx)(r.code,{children:"RegisterRes"})," for returning data. Since the API returns a ",(0,s.jsx)(r.code,{children:"JSON"})," data structure, you can see that only the returned struct has the ",(0,s.jsx)(r.code,{children:"json"})," tag, while the receiving struct only has the ",(0,s.jsx)(r.code,{children:"p"})," tag. This is because ",(0,s.jsx)(r.code,{children:"RegisterReq"})," is only used for receiving parameters and does not need to set the returned ",(0,s.jsx)(r.code,{children:"json"})," tag."]}),"\n",(0,s.jsx)(r.admonition,{type:"tip",children:(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"p"})," tag is optional; by default, property name matching and conversion are performed under the ",(0,s.jsx)(r.strong,{children:"ignore special characters and case-insensitive"})," rules, meeting most business scenarios' needs by default."]})}),"\n",(0,s.jsxs)(r.p,{children:["For demonstration purposes, the ",(0,s.jsx)(r.code,{children:"RegisterReq"})," object is returned in the normal return result ",(0,s.jsx)(r.code,{children:"Data"})," property. Since this object does not have a bound ",(0,s.jsx)(r.code,{children:"json"})," tag, the returned ",(0,s.jsx)(r.code,{children:"JSON"})," fields will match its property names."]}),"\n",(0,s.jsxs)(r.p,{children:["After executing, we use the ",(0,s.jsx)(r.code,{children:"curl"})," tool to test:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:'$ curl "http://127.0.0.1:8199/register?name=john&password1=123456&password2=123456"\n{"code":0,"error":"","data":{"Name":"john","Pass":"123456","Pass2":"123456"}}\n\n$ curl "http://127.0.0.1:8199/register?name=john&password1=123456&password2=12345"\n{"code":1,"error":"Password length is insufficient","data":null}\n\n$ curl "http://127.0.0.1:8199/register"\n{"code":1,"error":"Please enter an account","data":null}\n'})}),"\n",(0,s.jsx)(r.h3,{id:"example-2-validation-error-handling",children:"Example 2, Validation Error Handling"}),"\n",(0,s.jsx)(r.admonition,{type:"tip",children:(0,s.jsx)(r.p,{children:"In the latest version, only the first error is returned."})}),"\n",(0,s.jsxs)(r.p,{children:["As shown in the above example, when a request validation error occurs, all validation failure errors are returned, which may not be very user-friendly. When an error occurs, we can convert the validation error into a ",(0,s.jsx)(r.code,{children:"gvalid.Error"})," API object and then control the error return flexibly."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/net/ghttp"\n    "github.com/gogf/gf/v2/util/gvalid"\n)\n\ntype RegisterReq struct {\n    Name  string `p:"username"  v:"required|length:4,30#Please enter an account|Account length should be between {min} and {max} characters"`\n    Pass  string `p:"password1" v:"required|length:6,30#Please enter the password|Password length is insufficient"`\n    Pass2 string `p:"password2" v:"required|length:6,30|same:password1#Please confirm the password|Password length is insufficient|Passwords do not match"`\n}\n\ntype RegisterRes struct {\n    Code  int         `json:"code"`\n    Error string      `json:"error"`\n    Data  interface{} `json:"data"`\n}\n\nfunc main() {\n    s := g.Server()\n    s.Group("/", func(group *ghttp.RouterGroup) {\n        group.ALL("/register", func(r *ghttp.Request) {\n            var req *RegisterReq\n            if err := r.Parse(&req); err != nil {\n                // Validation error.\n                if v, ok := err.(gvalid.Error); ok {\n                    r.Response.WriteJsonExit(RegisterRes{\n                        Code:  1,\n                        Error: v.FirstError().Error(),\n                    })\n                }\n                // Other error.\n                r.Response.WriteJsonExit(RegisterRes{\n                    Code:  1,\n                    Error: err.Error(),\n                })\n            }\n            // ...\n            r.Response.WriteJsonExit(RegisterRes{\n                Data: req,\n            })\n        })\n    })\n    s.SetPort(8199)\n    s.Run()\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["As shown, when an error occurs, we can use the ",(0,s.jsx)(r.code,{children:"err.(gvalid.Error)"})," assertion method to determine whether the error is a validation error. If so, the first validation error is returned instead of all. For more detailed error control methods, please refer to the ",(0,s.jsx)(r.a,{href:"/en/docs/core/gvalid-result-handling",children:"Data Validation - Result"})," section."]}),"\n",(0,s.jsxs)(r.admonition,{type:"tip",children:[(0,s.jsxs)(r.p,{children:["Moreover, we can use ",(0,s.jsx)(r.code,{children:"gerror.Current"})," to obtain the first error message instead of using the assertion judgment. For example:"]}),(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"var req *RegisterReq\nif err := r.Parse(&req); err != nil {\n    r.Response.WriteJsonExit(RegisterRes{\n        Code:  1,\n        Error: gerror.Current(err).Error(),\n    })\n}\n"})})]}),"\n",(0,s.jsxs)(r.p,{children:["After executing, we test using the ",(0,s.jsx)(r.code,{children:"curl"})," tool:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:'$ curl "http://127.0.0.1:8199/register"\n{"code":1,"error":"Please enter an account","data":null}\n\n$ curl "http://127.0.0.1:8199/register?name=john&password1=123456&password2=1234567"\n{"code":1,"error":"Passwords do not match","data":null}\n'})})]})}function u(e={}){let{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},250065:function(e,r,t){t.d(r,{Z:function(){return a},a:function(){return i}});var n=t(667294);let s={},o=n.createContext(s);function i(e){let r=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);