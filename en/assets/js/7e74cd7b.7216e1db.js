"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["14722"],{132875:function(e,n,s){s.r(n),s.d(n,{metadata:()=>o,contentTitle:()=>a,default:()=>l,assets:()=>c,toc:()=>p,frontMatter:()=>i});var o=JSON.parse('{"id":"docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u8FDB\u7A0B\u7BA1\u7406-gproc/\u8FDB\u7A0B\u7BA1\u7406-\u94FE\u8DEF\u8DDF\u8E2A","title":"Process - Tracing","description":"Methods for process management and tracinging using the GoFrame framework. By utilizing the OpenTelemetry specification, it supports cross-process tracinging features, making it very suitable for temporarily running processes. The example code demonstrates how to start a subprocess in the main process and pass trace information, showcasing the powerful capabilities of the GoFrame framework in process management.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u8FDB\u7A0B\u7BA1\u7406-gproc/\u8FDB\u7A0B\u7BA1\u7406-\u94FE\u8DEF\u8DDF\u8E2A.md","sourceDirName":"docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u8FDB\u7A0B\u7BA1\u7406-gproc","slug":"/docs/components/os-gproc-tracing","permalink":"/en/docs/components/os-gproc-tracing","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u7EC4\u4EF6\u5217\u8868/\u7CFB\u7EDF\u76F8\u5173/\u8FDB\u7A0B\u7BA1\u7406-gproc/\u8FDB\u7A0B\u7BA1\u7406-\u94FE\u8DEF\u8DDF\u8E2A.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732443619000,"sidebarPosition":3,"frontMatter":{"slug":"/docs/components/os-gproc-tracing","title":"Process - Tracing","sidebar_position":3,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","Process Management","Tracing","OpenTelemetry","Cross-Process","Main Process","Subprocess","gproc","os-gproc-tracing"],"description":"Methods for process management and tracinging using the GoFrame framework. By utilizing the OpenTelemetry specification, it supports cross-process tracinging features, making it very suitable for temporarily running processes. The example code demonstrates how to start a subprocess in the main process and pass trace information, showcasing the powerful capabilities of the GoFrame framework in process management."},"sidebar":"mainSidebar","previous":{"title":"Process - Signal","permalink":"/en/docs/components/os-gproc-signal"},"next":{"title":"Template Engine","permalink":"/en/docs/components/os-gview"}}'),r=s("785893"),t=s("250065");let i={slug:"/docs/components/os-gproc-tracing",title:"Process - Tracing",sidebar_position:3,hide_title:!0,keywords:["GoFrame","GoFrame Framework","Process Management","Tracing","OpenTelemetry","Cross-Process","Main Process","Subprocess","gproc","os-gproc-tracing"],description:"Methods for process management and tracinging using the GoFrame framework. By utilizing the OpenTelemetry specification, it supports cross-process tracinging features, making it very suitable for temporarily running processes. The example code demonstrates how to start a subprocess in the main process and pass trace information, showcasing the powerful capabilities of the GoFrame framework in process management."},a=void 0,c={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Main Process",id:"main-process",level:3},{value:"Subprocess",id:"subprocess",level:3},{value:"Execution Result",id:"execution-result",level:3}];function g(e){let n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["The process management component supports cross-process tracinging features, which are especially useful for some temporarily running processes. The overall tracinging of the framework adopts the ",(0,r.jsx)(n.code,{children:"OpenTelemetry"})," specification."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.h3,{id:"main-process",children:"Main Process"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"main.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gctx"\n    "github.com/gogf/gf/v2/os/gproc"\n)\n\nfunc main() {\n    ctx := gctx.GetInitCtx()\n    g.Log().Debug(ctx, `this is main process`)\n    if err := gproc.ShellRun(ctx, `go run sub.go`); err != nil {\n        panic(err)\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"subprocess",children:"Subprocess"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"sub.go"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nfunc main() {\n    ctx := gctx.GetInitCtx()\n    g.Log().Debug(ctx, `this is sub process`)\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"execution-result",children:"Execution Result"}),"\n",(0,r.jsx)(n.p,{children:"After execution, the terminal outputs the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ go run main.go\n2022-06-21 20:35:06.196 [DEBU] {00698a61e2a2fa1661da5d7993d72e8c} this is main process\n2022-06-21 20:35:07.482 [DEBU] {00698a61e2a2fa1661da5d7993d72e8c} this is sub process\n"})}),"\n",(0,r.jsx)(n.p,{children:"As you can see, the trace information has been automatically passed to the subprocess."})]})}function l(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return a},a:function(){return i}});var o=s(667294);let r={},t=o.createContext(r);function i(e){let n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);