"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["73912"],{336490:function(e,n,t){t.r(n),t.d(n,{metadata:()=>i,contentTitle:()=>r,default:()=>d,assets:()=>s,toc:()=>l,frontMatter:()=>c});var i=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u914D\u7F6E\u7BA1\u7406/\u914D\u7F6E\u7BA1\u7406-\u914D\u7F6E\u5BF9\u8C61","title":"Configuration - Object","description":"Use the GoFrame framework for configuration management, acquiring configuration objects through the singleton pattern. With g.Cfg() and gcfg.Instance methods, it\'s easy to read global configurations like database connection info and template engine directory settings. Supports auto-searching and caching configuration files by file extension to enhance development efficiency.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u914D\u7F6E\u7BA1\u7406/\u914D\u7F6E\u7BA1\u7406-\u914D\u7F6E\u5BF9\u8C61.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u914D\u7F6E\u7BA1\u7406","slug":"/docs/core/gcfg-cfg","permalink":"/en/docs/core/gcfg-cfg","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u914D\u7F6E\u7BA1\u7406/\u914D\u7F6E\u7BA1\u7406-\u914D\u7F6E\u5BF9\u8C61.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":0,"frontMatter":{"slug":"/docs/core/gcfg-cfg","title":"Configuration - Object","sidebar_position":0,"hide_title":true,"keywords":["GoFrame","Configuration Management","Global Configuration","Singleton Pattern","g.Cfg","gcfg.Instance","MySQL Database","Configuration Reading","Auto Search","Template Engine"],"description":"Use the GoFrame framework for configuration management, acquiring configuration objects through the singleton pattern. With g.Cfg() and gcfg.Instance methods, it\'s easy to read global configurations like database connection info and template engine directory settings. Supports auto-searching and caching configuration files by file extension to enhance development efficiency."},"sidebar":"mainSidebar","previous":{"title":"Configuration","permalink":"/en/docs/core/gcfg"},"next":{"title":"Configuration - File","permalink":"/en/docs/core/gcfg-file"}}'),o=t("785893"),a=t("250065");let c={slug:"/docs/core/gcfg-cfg",title:"Configuration - Object",sidebar_position:0,hide_title:!0,keywords:["GoFrame","Configuration Management","Global Configuration","Singleton Pattern","g.Cfg","gcfg.Instance","MySQL Database","Configuration Reading","Auto Search","Template Engine"],description:"Use the GoFrame framework for configuration management, acquiring configuration objects through the singleton pattern. With g.Cfg() and gcfg.Instance methods, it's easy to read global configurations like database connection info and template engine directory settings. Supports auto-searching and caching configuration files by file extension to enhance development efficiency."},r=void 0,s={},l=[{value:"Using <code>g.Cfg</code>",id:"using-gcfg",level:3},{value:"Using <code>gcfg.Instance</code>",id:"using-gcfginstance",level:3},{value:"Auto Search Feature",id:"auto-search-feature",level:3}];function g(e){let n={code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["We recommend using the singleton pattern to obtain the configuration management object. We can conveniently get the default global configuration management object through ",(0,o.jsx)(n.code,{children:"g.Cfg()"}),". Additionally, we can get the configuration management object singleton through the ",(0,o.jsx)(n.code,{children:"gcfg.Instance"})," package method."]}),"\n",(0,o.jsxs)(n.h3,{id:"using-gcfg",children:["Using ",(0,o.jsx)(n.code,{children:"g.Cfg"})]}),"\n",(0,o.jsxs)(n.p,{children:["Let's look at an example demonstrating how to read global configuration information. It's important to note that the global configuration is framework-related, so it is consistently obtained using ",(0,o.jsx)(n.code,{children:"g.Cfg()"}),". Below is a default global configuration file, which includes the directory configuration for the template engine and the configuration for a ",(0,o.jsx)(n.code,{children:"MySQL"})," database cluster (two ",(0,o.jsx)(n.code,{children:"master"})," servers)."]}),"\n",(0,o.jsx)(n.p,{children:"Configuration example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'viewpath: "/home/www/templates/"\ndatabase:\n  default:\n  - link: "mysql:root:12345678@tcp(127.0.0.1:3306)/test"\n    role: "master"\n  - link: "mysql:root:12345678@tcp(127.0.0.1:3306)/test"\n    role: "slave"\n'})}),"\n",(0,o.jsx)(n.p,{children:"Code example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nfunc main() {\n    var ctx = gctx.New()\n    fmt.Println(g.Cfg().Get(ctx, "viewpath"))\n    fmt.Println(g.Cfg().Get(ctx, "database.default.0.role"))\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The above example reads the ",(0,o.jsx)(n.code,{children:"role"})," information of the first database configuration. After running, the output is:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"/home/www/templates/\nmaster\n"})}),"\n",(0,o.jsxs)(n.p,{children:["As you can see, we can obtain a global configuration manager singleton object using the ",(0,o.jsx)(n.code,{children:"g.Cfg()"})," method. The configuration file contents can be accessed hierarchically using a ",(0,o.jsx)(n.code,{children:"."})," (dot) in the pattern (arrays start at ",(0,o.jsx)(n.code,{children:"0"})," by default). The pattern parameter ",(0,o.jsx)(n.code,{children:"database.default.0.role"})," refers to reading the ",(0,o.jsx)(n.code,{children:"role"})," data of the 0th database server in the ",(0,o.jsx)(n.code,{children:"default"})," database cluster within the ",(0,o.jsx)(n.code,{children:"database"})," configuration item."]}),"\n",(0,o.jsxs)(n.h3,{id:"using-gcfginstance",children:["Using ",(0,o.jsx)(n.code,{children:"gcfg.Instance"})]}),"\n",(0,o.jsxs)(n.p,{children:["Of course, you can also independently use the ",(0,o.jsx)(n.code,{children:"gcfg"})," package to get a singleton object through the ",(0,o.jsx)(n.code,{children:"Instance"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/os/gcfg"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nfunc main() {\n    var ctx = gctx.New()\n    fmt.Println(gcfg.Instance().Get(ctx, "viewpath"))\n    fmt.Println(gcfg.Instance().Get(ctx, "database.default.0.role"))\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"auto-search-feature",children:"Auto Search Feature"}),"\n",(0,o.jsxs)(n.p,{children:["When a singleton object is created, it will automatically search for configuration files based on file extensions ",(0,o.jsx)(n.code,{children:"toml/yaml/yml/json/ini/xml/properties"}),". By default, it will automatically search and cache configuration files like ",(0,o.jsx)(n.code,{children:"config.toml/yaml/yml/json/ini/xml/properties"}),". When a configuration file is modified externally, the cache will automatically refresh."]}),"\n",(0,o.jsxs)(n.p,{children:["To facilitate calls to configuration files in multi-file scenarios, simplify usage, and enhance development efficiency, the singleton object will automatically use the ",(0,o.jsx)(n.strong,{children:"singleton name"})," for file searching upon creation. For instance, the singleton object obtained with ",(0,o.jsx)(n.code,{children:'g.Cfg("redis")'})," will automatically search for ",(0,o.jsx)(n.code,{children:"redis.toml/yaml/yml/json/ini/xml/properties"}),". If the search is successful, the file will be loaded into memory cache, and the next time, it will be read directly from memory. If the file does not exist, the default configuration file (",(0,o.jsx)(n.code,{children:"config.toml"}),") is used."]})]})}function d(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return r},a:function(){return c}});var i=t(667294);let o={},a=i.createContext(o);function c(e){let n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);