"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["47001"],{61731:function(e,n,t){t.r(n),t.d(n,{metadata:()=>i,contentTitle:()=>a,default:()=>u,assets:()=>g,toc:()=>c,frontMatter:()=>r});var i=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6-\u94FE\u5F0F\u64CD\u4F5C","title":"Logging - Chaining Operations","description":"The glog module in the GoFrame framework supports chaining operations for logging functionality. This includes setting log output paths, log file categorization, log levels, enabling trace printing, and more. Additionally, it provides examples of setting file backtrack values and implementing asynchronous log output, optimizing the logging experience comprehensively.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6-\u94FE\u5F0F\u64CD\u4F5C.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6","slug":"/docs/core/glog-chaining","permalink":"/en/docs/core/glog-chaining","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6/\u65E5\u5FD7\u7EC4\u4EF6-\u94FE\u5F0F\u64CD\u4F5C.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":3,"frontMatter":{"slug":"/docs/core/glog-chaining","title":"Logging - Chaining Operations","sidebar_position":3,"hide_title":true,"keywords":["GoFrame","GoFrame Framework","Log Component","Chaining Operations","glog","Log Output","Log Level","File Backtrack","Terminal Output","Asynchronous Log"],"description":"The glog module in the GoFrame framework supports chaining operations for logging functionality. This includes setting log output paths, log file categorization, log levels, enabling trace printing, and more. Additionally, it provides examples of setting file backtrack values and implementing asynchronous log output, optimizing the logging experience comprehensively."},"sidebar":"mainSidebar","previous":{"title":"Logging - File Directory","permalink":"/en/docs/core/glog-file-folder"},"next":{"title":"Logging - Color Printing","permalink":"/en/docs/core/glog-color"}}'),o=t("785893"),l=t("250065");let r={slug:"/docs/core/glog-chaining",title:"Logging - Chaining Operations",sidebar_position:3,hide_title:!0,keywords:["GoFrame","GoFrame Framework","Log Component","Chaining Operations","glog","Log Output","Log Level","File Backtrack","Terminal Output","Asynchronous Log"],description:"The glog module in the GoFrame framework supports chaining operations for logging functionality. This includes setting log output paths, log file categorization, log levels, enabling trace printing, and more. Additionally, it provides examples of setting file backtrack values and implementing asynchronous log output, optimizing the logging experience comprehensively."},a=void 0,g={},c=[{value:"Example 1, Basic Usage",id:"example-1-basic-usage",level:2},{value:"Example 2, Print Call Line Number",id:"example-2-print-call-line-number",level:2},{value:"Example 3, File Backtrack <code>Skip</code>",id:"example-3-file-backtrack-skip",level:2}];function s(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["For a complete method list, refer to the API documentation: ",(0,o.jsx)(n.a,{href:"https://pkg.go.dev/github.com/gogf/gf/v2/os/glog",children:"https://pkg.go.dev/github.com/gogf/gf/v2/os/glog"})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"glog"})," module supports a very convenient ",(0,o.jsx)(n.code,{children:"chaining operation"})," method, with the main chaining methods as follows:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"// Redirect log output interface\nfunc To(writer io.Writer) *Logger\n// Log content output to directory\nfunc Path(path string) *Logger\n// Set log file category\nfunc Cat(category string) *Logger\n// Set log file format\nfunc File(file string) *Logger\n// Set log print level\nfunc Level(level int) *Logger\n// Set log print level (string)\nfunc LevelStr(levelStr string) *Logger\n// Set file backtrack value\nfunc Skip(skip int) *Logger\n// Enable trace printing\nfunc Stack(enabled bool) *Logger\n// Enable trace printing with filter string\nfunc StackWithFilter(filter string) *Logger\n// Enable terminal output\nfunc Stdout(enabled...bool) *Logger\n// Enable log header information\nfunc Header(enabled...bool) *Logger\n// Output log line number information\nfunc Line(long...bool) *Logger\n// Asynchronous log output\nfunc Async(enabled...bool) *Logger\n"})}),"\n",(0,o.jsx)(n.h2,{id:"example-1-basic-usage",children:"Example 1, Basic Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gfile"\n)\n\nfunc main() {\n    ctx := context.TODO()\n    path := "/tmp/glog-cat"\n    g.Log().SetPath(path)\n    g.Log().Stdout(false).Cat("cat1").Cat("cat2").Print(ctx, "test")\n    list, err := gfile.ScanDir(path, "*", true)\n    g.Dump(err)\n    g.Dump(list)\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"After execution, the output is:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'[\n    "/tmp/glog-cat/cat1",\n    "/tmp/glog-cat/cat1/cat2",\n    "/tmp/glog-cat/cat1/cat2/2018-10-10.log",\n]\n'})}),"\n",(0,o.jsx)(n.h2,{id:"example-2-print-call-line-number",children:"Example 2, Print Call Line Number"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc main() {\n    ctx := context.TODO()\n    g.Log().Line().Print(ctx, "this is the short file name with its line number")\n    g.Log().Line(true).Print(ctx, "lone file name with line number")\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"After execution, the terminal output is:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:"2019-05-23 09:22:58.141 glog_line.go:8: this is the short file name with its line number\n2019-05-23 09:22:58.142 /Users/john/Workspace/Go/GOPATH/src/github.com/gogf/gf/.example/os/glog/glog_line.go:9: lone file name with line number\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"example-3-file-backtrack-skip",children:["Example 3, File Backtrack ",(0,o.jsx)(n.code,{children:"Skip"})]}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes we encapsulate the ",(0,o.jsx)(n.code,{children:"glog"})," module using some modules to print logs, such as encapsulating a ",(0,o.jsx)(n.code,{children:"logger"})," package to print logs via ",(0,o.jsx)(n.code,{children:"logger.Print"}),". In this case, the printed call line number is always the same location because, for ",(0,o.jsx)(n.code,{children:"glog"}),", its caller is always the ",(0,o.jsx)(n.code,{children:"logger.Print"})," method. At this time, we can set the backtrack value to skip the backtracked file count, using ",(0,o.jsx)(n.code,{children:"SetStackSkip"})," or the chaining method ",(0,o.jsx)(n.code,{children:"Skip"}),"."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["The setting of the file backtrack value also affects the ",(0,o.jsx)(n.code,{children:"Stack"})," call backtrack print result."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "github.com/gogf/gf/v2/frame/g"\n)\n\nfunc PrintLog(ctx context.Context, content string) {\n    g.Log().Skip(1).Line().Print(ctx, "line number with skip:", content)\n    g.Log().Line().Print(ctx, "line number without skip:", content)\n}\n\nfunc main() {\n    ctx := context.TODO()\n    PrintLog(ctx, "just test")\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"After execution, the terminal output is:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:"2019-05-23 19:30:10.984 glog_line2.go:13: line number with skip: just test\n2019-05-23 19:30:10.984 glog_line2.go:9: line number without skip: just test\n"})})]})}function u(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(s,{...e})}):s(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return r}});var i=t(667294);let o={},l=i.createContext(o);function r(e){let n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);