"use strict";(self.webpackChunkgf_site=self.webpackChunkgf_site||[]).push([["5350"],{606702:function(e,t,n){n.r(t),n.d(t,{metadata:()=>a,contentTitle:()=>c,default:()=>u,assets:()=>d,toc:()=>s,frontMatter:()=>o});var a=JSON.parse('{"id":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u6821\u9A8C/\u6570\u636E\u6821\u9A8C-\u9012\u5F52\u6821\u9A8C","title":"Data Validation - Recursive","description":"The recursive validation feature of the data validation component in the GoFrame framework. Through example code, it demonstrates how to perform nested validation on struct, slice, and map types of data to achieve effective validation of complex data structures. Special note is made on handling empty objects in recursive validation, and empty objects with default values are considered passed and validated.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u6821\u9A8C/\u6570\u636E\u6821\u9A8C-\u9012\u5F52\u6821\u9A8C.md","sourceDirName":"docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u6821\u9A8C","slug":"/docs/core/gvalid-recursive-validating","permalink":"/en/docs/core/gvalid-recursive-validating","draft":false,"unlisted":false,"editUrl":"https://github.com/gogf/gf-site/blob/main/docs/docs/\u6838\u5FC3\u7EC4\u4EF6/\u6570\u636E\u6821\u9A8C/\u6570\u636E\u6821\u9A8C-\u9012\u5F52\u6821\u9A8C.md","tags":[],"version":"current","lastUpdatedBy":"John","lastUpdatedAt":1732440306000,"sidebarPosition":5,"frontMatter":{"slug":"/docs/core/gvalid-recursive-validating","title":"Data Validation - Recursive","sidebar_position":5,"hide_title":true,"keywords":["Data Validation","Recursive Validation","GoFrame","GoFrame Framework","Nested Validation","Struct Validation","Map Validation","Slice Validation","Validation Component","GoFrame Validator"],"description":"The recursive validation feature of the data validation component in the GoFrame framework. Through example code, it demonstrates how to perform nested validation on struct, slice, and map types of data to achieve effective validation of complex data structures. Special note is made on handling empty objects in recursive validation, and empty objects with default values are considered passed and validated."},"sidebar":"mainSidebar","previous":{"title":"Data Validation - Optional Rule","permalink":"/en/docs/core/gvalid-optional-rule"},"next":{"title":"Data Validation - Custom","permalink":"/en/docs/core/gvalid-custom-rules"}}'),i=n("785893"),r=n("250065");let o={slug:"/docs/core/gvalid-recursive-validating",title:"Data Validation - Recursive",sidebar_position:5,hide_title:!0,keywords:["Data Validation","Recursive Validation","GoFrame","GoFrame Framework","Nested Validation","Struct Validation","Map Validation","Slice Validation","Validation Component","GoFrame Validator"],description:"The recursive validation feature of the data validation component in the GoFrame framework. Through example code, it demonstrates how to perform nested validation on struct, slice, and map types of data to achieve effective validation of complex data structures. Special note is made on handling empty objects in recursive validation, and empty objects with default values are considered passed and validated."},c=void 0,d={},s=[{value:"Example 1, Recursive Validation: <code>struct</code>",id:"example-1-recursive-validation-struct",level:2},{value:"Example 2, Recursive Validation: <code>slice</code>",id:"example-2-recursive-validation-slice",level:2},{value:"Example 3, Recursive Validation: <code>map</code>",id:"example-3-recursive-validation-map",level:2},{value:"Note: Impact of Empty Objects on Recursive Validation",id:"note-impact-of-empty-objects-on-recursive-validation",level:2}];function l(e){let t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["The validation component supports powerful recursive validation (nested validation) features. If the properties or key values in the given validation data are of type ",(0,i.jsx)(t.code,{children:"struct/map/slice"}),", recursive validation will be automatically performed. Let's look at a few examples:"]}),"\n",(0,i.jsxs)(t.h2,{id:"example-1-recursive-validation-struct",children:["Example 1, Recursive Validation: ",(0,i.jsx)(t.code,{children:"struct"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\ntype SearchReq struct {\n    Key    string `v:"required"`\n    Option SearchOption\n}\n\ntype SearchOption struct {\n    Page int `v:"min:1"`\n    Size int `v:"max:100"`\n}\n\nfunc main() {\n    var (\n        ctx = gctx.New()\n        req = SearchReq{\n            Key: "GoFrame",\n            Option: SearchOption{\n                Page: 1,\n                Size: 10000,\n            },\n        }\n    )\n    err := g.Validator().Data(req).Run(ctx)\n    fmt.Println(err)\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"After execution, the terminal outputs:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"The Size value `10000` must be equal or lesser than 100\n"})}),"\n",(0,i.jsxs)(t.h2,{id:"example-2-recursive-validation-slice",children:["Example 2, Recursive Validation: ",(0,i.jsx)(t.code,{children:"slice"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nfunc main() {\n    type Student struct {\n        Name string `v:"required#Student Name is required"`\n        Age  int\n    }\n    type Teacher struct {\n        Name     string\n        Students []Student\n    }\n    var (\n        ctx     = gctx.New()\n        teacher = Teacher{}\n        data    = g.Map{\n            "name":     "john",\n            "students": `[{"age":2},{"name":"jack", "age":4}]`,\n        }\n    )\n    err := g.Validator().Assoc(data).Data(teacher).Run(ctx)\n    fmt.Println(err)\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"After execution, the terminal outputs:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Student Name is required\n"})}),"\n",(0,i.jsxs)(t.h2,{id:"example-3-recursive-validation-map",children:["Example 3, Recursive Validation: ",(0,i.jsx)(t.code,{children:"map"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nfunc main() {\n    type Student struct {\n        Name string `v:"required#Student Name is required"`\n        Age  int\n    }\n    type Teacher struct {\n        Name     string\n        Students map[string]Student\n    }\n    var (\n        ctx     = gctx.New()\n        teacher = Teacher{\n            Name: "Smith",\n            Students: map[string]Student{\n                "john": {Name: "", Age: 18},\n            },\n        }\n    )\n    err := g.Validator().Data(teacher).Run(ctx)\n    fmt.Println(err)\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"After execution, the terminal outputs:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Student Name is required\n"})}),"\n",(0,i.jsx)(t.h2,{id:"note-impact-of-empty-objects-on-recursive-validation",children:"Note: Impact of Empty Objects on Recursive Validation"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nfunc main() {\n    type Student struct {\n        Name string `v:"required"`\n    }\n    type Teacher struct {\n        Students Student\n    }\n    var (\n        ctx     = gctx.New()\n        teacher = Teacher{}\n        data    = g.Map{\n            "students": nil,\n        }\n    )\n    err := g.Validator().Assoc(data).Data(teacher).Run(ctx)\n    fmt.Println(err)\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"After execution, the terminal outputs:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Student Name is required\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Some may find it strange why the ",(0,i.jsx)(t.code,{children:"Name"})," field of the ",(0,i.jsx)(t.code,{children:"Student"})," struct is validated even though the ",(0,i.jsx)(t.code,{children:"Student"})," field value was not passed. This is because the ",(0,i.jsx)(t.code,{children:"Student"})," property is an empty struct with default values (the ",(0,i.jsx)(t.code,{children:"Name"})," default value is an empty string). In recursive validation, although ",(0,i.jsx)(t.code,{children:"Student"})," is not a required parameter, meaning you could choose not to pass it, if it is passed, it will be validated according to the validation rules of the properties within it (an empty object with default values is also considered to have a value). You can compare this with the differences in the code below:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n\n    "github.com/gogf/gf/v2/frame/g"\n    "github.com/gogf/gf/v2/os/gctx"\n)\n\nfunc main() {\n    type Student struct {\n        Name string `v:"required"`\n    }\n    type Teacher struct {\n        Students *Student\n    }\n    var (\n        ctx     = gctx.New()\n        teacher = Teacher{}\n        data    = g.Map{\n            "students": nil,\n        }\n    )\n    err := g.Validator().Assoc(data).Data(teacher).Run(ctx)\n    fmt.Println(err)\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The only difference from the previous example is that the ",(0,i.jsx)(t.code,{children:"Student"})," property has been changed from a struct to a struct pointer ",(0,i.jsx)(t.code,{children:"*Student"}),", thus the property is no longer an empty object with default values. After execution, the terminal outputs nothing, indicating validation passed."]})]})}function u(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},250065:function(e,t,n){n.d(t,{Z:function(){return c},a:function(){return o}});var a=n(667294);let i={},r=a.createContext(i);function o(e){let t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);